<?xml version='1.0' encoding='UTF-8'?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ContentStore subsystem that allows switching between different types e.g. unencrypted and encrypted -->
    <bean id="ContentStore" class="org.alfresco.repo.management.subsystems.CryptodocSwitchableApplicationContextFactory"
        parent="abstractPropertyBackedBean">
        <property name="autoStart">
            <value>false</value>
        </property>
        <property name="category">
            <value>ContentStore</value>
        </property>
        <property name="sourceBeanName">
            <!-- default subsystem's bean name -->
            <value>${filecontentstore.subsystem.name}</value>
        </property>
        <property name="instancePath">
            <list>
                <value>manager</value>
            </list>
        </property>
    </bean>

    <!-- Default ContentStore subsystem, that does not use encryption -->
    <bean id="unencryptedContentStore" class="org.alfresco.repo.management.subsystems.ChildApplicationContextFactory" parent="abstractPropertyBackedBean">
        <property name="autoStart">
            <value>true</value>
        </property>
        <property name="category">
            <value>ContentStore</value>
        </property>
        <property name="typeName">
            <value>unencrypted</value>
        </property>
        <property name="instancePath">
            <list>
                <value>managed</value>
                <value>unencrypted</value>
            </list>
        </property>
    </bean>

    <!-- Import the selected ContentStore subsystem's fileContentStore bean for use in the main repository context -->
    <bean id="fileContentStore" class="org.alfresco.repo.management.subsystems.CryptodocSubsystemProxyFactory">
        <property name="sourceApplicationContextFactory">
            <ref bean="ContentStore" />
        </property>
        <property name="sourceBeanName">
            <value>fileContentStore</value>
        </property>
        <property name="interfaces">
            <list>
                <value>org.alfresco.repo.content.ContentStore</value>
                <value>org.alfresco.repo.content.ContentStoreCaps</value>
            </list>
        </property>
    </bean>
       
   <bean id="defaultFileContentUrlProvider" class="org.alfresco.repo.content.filestore.TimeBasedFileContentUrlProvider">
       <property name="bucketsPerMinute" value="${dir.contentstore.bucketsPerMinute}"/>
   </bean>
   <!-- This content limit provider is used above (and can also be overriden, eg. by modules). -->
   <bean id="defaultContentLimitProvider" class="org.alfresco.repo.content.ContentLimitProvider$SimpleFixedLimitProvider">
       <property name="sizeLimitString" value="${system.content.maximumFileSizeLimit}"/>
   </bean>
   
   <!-- deleted content will get pushed into this store, where it can be cleaned up at will -->
   <bean id="deletedContentStore" class="org.alfresco.repo.content.filestore.FileContentStore">
      <constructor-arg>
         <value>${dir.contentstore.deleted}</value>
      </constructor-arg>
   </bean>
   <!-- bean to move deleted content into the the backup store -->
   <bean id="deletedContentBackupListener" class="org.alfresco.repo.content.cleanup.DeletedContentBackupCleanerListener" >
      <property name="store">
         <ref bean="deletedContentStore" />
      </property>
   </bean>
   
   <!-- A list of content deletion listeners.  This is split out for re-use. -->
   <bean id="deletedContentBackupListeners" class="java.util.ArrayList">
      <constructor-arg>
         <list>
            <ref bean="deletedContentBackupListener" />
         </list>
      </constructor-arg>
   </bean>
   
   <!-- Performs the content cleanup -->
   <bean id="contentStoreCleaner" class="org.alfresco.repo.content.cleanup.ContentStoreCleaner" init-method="init">
      <property name="protectDays" >
         <value>${system.content.orphanProtectDays}</value>
      </property>
      <property name="deletionFailureAction" >
         <value>${system.content.deletionFailureAction}</value>
      </property>
      <property name="eagerContentStoreCleaner" >
         <ref bean="eagerContentStoreCleaner" />
      </property>
      <property name="jobLockService">
         <ref bean="jobLockService" />
      </property>
      <property name="contentDataDAO">
           <ref bean="contentDataDAO"/>
      </property>
      <property name="dictionaryService">
         <ref bean="dictionaryService" />
      </property>
      <property name="contentService" >
         <ref bean="contentService" />
      </property>
      <property name="transactionService" >
         <ref bean="transactionService" />
      </property>
      <property name="batchSize" >
         <value>${system.content.cleanerBatchSize}</value>
      </property>
   </bean>

   <bean id="eagerContentStoreCleaner" class="org.alfresco.repo.content.cleanup.EagerContentStoreCleaner" init-method="init">
      <property name="eagerOrphanCleanup" >
         <value>${system.content.eagerOrphanCleanup}</value>
      </property>
      <property name="stores" ref="contentStoresToClean" />
      <property name="listeners" >
         <ref bean="deletedContentBackupListeners" />
      </property>
   </bean>
   
   <bean id="contentStoresToClean" class="java.util.ArrayList" >
      <constructor-arg>
         <list>
            <ref bean="fileContentStore" />
         </list>
      </constructor-arg>
   </bean>
   
   <!-- Abstract bean definition defining base definition for content service -->
   <bean id="baseContentService" class="org.alfresco.repo.content.ContentServiceImpl" abstract="true" init-method="init">
      <property name="retryingTransactionHelper">
          <ref bean="retryingTransactionHelper"/>
      </property>
      <property name="dictionaryService">
          <ref bean="dictionaryService" />
      </property>
      <property name="nodeService">
          <ref bean="nodeService" />
      </property>
      <property name="policyComponent">
          <ref bean="policyComponent" />
      </property>
      <property name="mimetypeService">
         <ref bean="mimetypeService"/>
      </property>
      <property name="eagerContentStoreCleaner" >
         <ref bean="eagerContentStoreCleaner" />
      </property>
      <property name="ignoreEmptyContent" >
         <value>${policy.content.update.ignoreEmpty}</value>
      </property>
   </bean>
   
   <bean id="contentService" parent="baseContentService">
      <property name="store">
          <ref bean="fileContentStore" />
      </property>
   </bean>

    <!-- Our common Tika configuration -->
    <bean id="tikaConfig" class="org.apache.tika.config.TikaConfig" >
        <constructor-arg type="java.io.InputStream" value="classpath:alfresco/tika/tika-config.xml" />
    </bean>
   
    <!-- Characterset decoder -->
    <bean id="charset.finder" class="org.alfresco.repo.content.encoding.ContentCharsetFinder">
      <property name="defaultCharset">
         <value>UTF-8</value>
      </property>
      <property name="mimetypeService">
         <ref bean="mimetypeService"/>
      </property>
      <property name="charactersetFinders">
         <list>
            <bean class="org.alfresco.encoding.GuessEncodingCharsetFinder" />
            <bean class="org.alfresco.encoding.TikaCharsetFinder" />
         </list>
      </property>
    </bean>

    <bean id="shutdownIndicator" class="org.alfresco.util.ShutdownIndicator"/>

    <bean id="mimetypeConfigService" class="org.springframework.extensions.config.xml.XMLConfigService" init-method="init">
        <constructor-arg>
            <bean class="org.alfresco.util.ResourceFinderConfigSource">
                <property name="resourceFinder">
                    <ref bean="resourceFinder" />
                </property>
                <property name="locations">
                    <list>
                        <value>classpath:alfresco/mimetype/mimetype-map.xml</value>
                        <value>classpath:alfresco/mimetype/mimetype-map-openoffice.xml</value>
                        <value>classpath*:alfresco/module/*/mimetype-map*.xml</value>
                        <value>classpath*:alfresco/extension/mimetype/*-map.xml</value>
                    </list>
                </property>
            </bean>
        </constructor-arg>
    </bean>

   <bean id="mimetypeService" class="org.alfresco.repo.content.MimetypeMap" init-method="init" >
      <property name="configService">
         <ref bean="mimetypeConfigService" />
      </property>
      <property name="contentCharsetFinder">
         <ref bean="charset.finder"/>
      </property>
      <property name="tikaConfig">
         <ref bean="tikaConfig"/>
      </property>
      <property name="jsonObjectMapper" ref="mimetypeServiceJsonObjectMapper" />
      <property name="mimetypeJsonConfigDir" value="${mimetype.config.dir}" />
      <property name="cronExpression" value="${mimetype.config.cronExpression}" />
      <property name="initialAndOnErrorCronExpression" value="${mimetype.config.initialAndOnError.cronExpression}" />
      <property name="shutdownIndicator" ref="shutdownIndicator" />
   </bean>

    <bean id="mimetypeServiceJsonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />

    <bean id="contentFilterLanguagesConfigService" class="org.springframework.extensions.config.xml.XMLConfigService" init-method="init">
      <constructor-arg>
         <bean class="org.springframework.extensions.config.source.UrlConfigSource">
            <constructor-arg>
               <list>
                  <value>classpath:alfresco/ml/content-filter-lang.xml</value>
               </list>
            </constructor-arg>
         </bean>
      </constructor-arg>
   </bean>

   <bean id="contentFilterLanguagesService" class="org.alfresco.repo.model.ml.ContentFilterLanguagesMap" init-method="init" >
      <property name="configService">
         <ref bean="contentFilterLanguagesConfigService" />
      </property>
   </bean>

   <!-- Metadata Extraction Registry -->
   <bean id="metadataExtracterRegistry" class="org.alfresco.repo.content.metadata.MetadataExtracterRegistry">
       <property name="asyncExtractEnabled" value="${content.metadata.async.extract.enabled}" />
       <property name="asyncEmbedEnabled" value="${content.metadata.async.embed.enabled}" />
   </bean>
   
   <!-- Abstract bean definition defining base definition for all metadata extracters -->
   <bean id="baseMetadataExtracter"
         abstract="true"
         init-method="register">
      <property name="registry">
         <ref bean="metadataExtracterRegistry" />
      </property>
      <property name="mimetypeService">
         <ref bean="mimetypeService" />
      </property>
      <property name="dictionaryService">
         <ref bean="dictionaryService" />
      </property>
      <property name="properties">
         <ref bean="global-properties" />
      </property>
      <property name="supportedDateFormats">
          <list>
              <value>EEE, d MMM yyyy HH:mm:ss Z</value>
              <value>EEE, d MMM yy HH:mm:ss Z</value>
              <value>d MMM yyyy HH:mm:ss Z</value>
          </list>
      </property>
   </bean>
   
   <!-- Content Metadata Extractors -->
   <!-- The last one listed for any mimetype will be used if available -->

   <bean id="extractor.Asynchronous" class="org.alfresco.repo.content.metadata.AsynchronousExtractor" parent="baseMetadataExtracter">
      <property name="nodeService" ref="nodeService" />
      <property name="namespacePrefixResolver" ref="namespaceService" />
      <property name="transformerDebug" ref="transformerDebug" />
      <property name="renditionService2" ref="renditionService2" />
      <property name="renditionDefinitionRegistry2" ref="renditionDefinitionRegistry2" />
      <property name="contentService" ref="ContentService" />
      <property name="transactionService" ref="transactionService" />
      <property name="transformServiceRegistry" ref="transformServiceRegistry" />
      <property name="taggingService" ref="taggingService" />
      <property name="metadataExtractorPropertyMappingOverrides">
         <list>
             <ref bean="extracter.RFC822" /> <!-- The RM AMP overrides this bean, extending the base class -->
         </list>
      </property>
   </bean>

    <!-- No longer used as an extractor but still extended by RM to provide additional mappings -->
    <bean id="extracter.RFC822"        class="org.alfresco.repo.content.metadata.RFC822MetadataExtracter"        parent="baseMetadataExtracter" >
        <property name="nodeService" ref="nodeService"/>
    </bean>

   <!-- Transformation Debug -->
    <bean id="transformerDebug" class="org.alfresco.repo.content.transform.AdminUiTransformerDebug">
       <property name="nodeService" ref="nodeService" />
       <property name="mimetypeService" ref="mimetypeService" />
       <property name="transformerLog" ref="transformerLog" />
       <property name="transformerDebugLog" ref="transformerDebugLog" />
       <property name="localTransformServiceRegistry" ref="localTransformServiceRegistry" />
       <property name="remoteTransformServiceRegistry" ref="remoteTransformServiceRegistry" />
   </bean>

   <!-- Transformer JMX bean (in addition to sub system properties) -->
   <bean id="transformerConfigMBean" class="org.alfresco.repo.management.subsystems.SubsystemProxyFactory">
      <property name="sourceApplicationContextFactory">
         <ref bean="Transformers" />
      </property>
      <property name="interfaces">
         <list>
            <value>org.alfresco.repo.content.transform.TransformerConfigMBean</value>
         </list>
      </property>
   </bean>

    <!-- Logger for transformer debug that may be accessed via JMX -->
   <bean id="transformerDebugLog" class="org.alfresco.repo.management.subsystems.SubsystemProxyFactory">
      <property name="sourceApplicationContextFactory">
         <ref bean="Transformers" />
      </property>
      <property name="sourceBeanName">
         <value>transformerDebugLog</value>
      </property>
      <property name="interfaces">
         <list>
            <value>org.apache.commons.logging.Log</value>
         </list>
      </property>
   </bean>
   
   <!-- Logger for transformer log that may be accessed via JMX -->
   <bean id="transformerLog" class="org.alfresco.repo.management.subsystems.SubsystemProxyFactory">
      <property name="sourceApplicationContextFactory">
         <ref bean="Transformers" />
      </property>
      <property name="sourceBeanName">
         <value>transformerLog</value>
      </property>
      <property name="interfaces">
         <list>
            <value>org.apache.commons.logging.Log</value>
         </list>
      </property>
   </bean>

   <!-- System direct access URL configuration settings -->
   <bean id="systemWideDirectUrlConfig" class="org.alfresco.repo.content.directurl.SystemWideDirectUrlConfig" init-method="init">
      <property name="enabled" value="${system.directAccessUrl.enabled}" />
      <property name="defaultExpiryTimeInSec" value="${system.directAccessUrl.defaultExpiryTimeInSec}" />
      <property name="maxExpiryTimeInSec" value="${system.directAccessUrl.maxExpiryTimeInSec}" />
   </bean>

   <!-- Abstract Direct Access URL configuration -->
   <bean id="abstractDirectUrlConfig" class="org.alfresco.repo.content.directurl.AbstractDirectUrlConfig" abstract="true">
      <property name="systemWideDirectUrlConfig" >
         <ref bean="systemWideDirectUrlConfig" />
      </property>
   </bean>

   
</beans>
