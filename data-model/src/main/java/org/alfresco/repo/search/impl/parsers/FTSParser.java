// $ANTLR null ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g 2019-12-18 09:26:10

package org.alfresco.repo.search.impl.parsers;

import java.util.List;
import java.util.Stack;

import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;

@SuppressWarnings("all")
public class FTSParser extends Parser
{
    public static final String[] tokenNames = new String[]{
            "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMP", "AND", "AT", "BAR", "BOOST",
            "CARAT", "COLON", "COMMA", "CONJUNCTION", "DATETIME", "DAY", "DECIMAL_INTEGER_LITERAL",
            "DECIMAL_NUMERAL", "DEFAULT", "DIGIT", "DISJUNCTION", "DOLLAR", "DOT",
            "DOTDOT", "E", "EQUALS", "EXACT_PHRASE", "EXACT_TERM", "EXCLAMATION",
            "EXCLUDE", "EXCLUSIVE", "EXPONENT", "FG_EXACT_PHRASE", "FG_EXACT_TERM",
            "FG_PHRASE", "FG_PROXIMITY", "FG_RANGE", "FG_SYNONYM", "FG_TERM", "FIELD_CONJUNCTION",
            "FIELD_DEFAULT", "FIELD_DISJUNCTION", "FIELD_EXCLUDE", "FIELD_GROUP",
            "FIELD_MANDATORY", "FIELD_NEGATION", "FIELD_OPTIONAL", "FIELD_REF", "FLOATING_POINT_LITERAL",
            "FS", "FTS", "FTSPHRASE", "FTSPRE", "FTSWILD", "FTSWORD", "FUZZY", "F_ESC",
            "F_HEX", "F_URI_ALPHA", "F_URI_DIGIT", "F_URI_ESC", "F_URI_OTHER", "GT",
            "HOUR", "ID", "INCLUSIVE", "IN_WORD", "LCURL", "LPAREN", "LSQUARE", "LT",
            "MANDATORY", "MILLIS", "MINUS", "MINUTE", "MONTH", "NAME_SPACE", "NEGATION",
            "NON_ZERO_DIGIT", "NOT", "NOW", "OPTIONAL", "OR", "PERCENT", "PHRASE",
            "PLUS", "PREFIX", "PROXIMITY", "QUALIFIER", "QUESTION_MARK", "RANGE",
            "RCURL", "RPAREN", "RSQUARE", "SECOND", "SIGNED_INTEGER", "SPECIFICDATETIME",
            "STAR", "START_WORD", "SYNONYM", "TEMPLATE", "TERM", "TILDA", "TO", "UNIT",
            "URI", "WS", "YEAR", "ZERO_DIGIT"
    };
    public static final int EOF = -1;
    public static final int AMP = 4;
    public static final int AND = 5;
    public static final int AT = 6;
    public static final int BAR = 7;
    public static final int BOOST = 8;
    public static final int CARAT = 9;
    public static final int COLON = 10;
    public static final int COMMA = 11;
    public static final int CONJUNCTION = 12;
    public static final int DATETIME = 13;
    public static final int DAY = 14;
    public static final int DECIMAL_INTEGER_LITERAL = 15;
    public static final int DECIMAL_NUMERAL = 16;
    public static final int DEFAULT = 17;
    public static final int DIGIT = 18;
    public static final int DISJUNCTION = 19;
    public static final int DOLLAR = 20;
    public static final int DOT = 21;
    public static final int DOTDOT = 22;
    public static final int E = 23;
    public static final int EQUALS = 24;
    public static final int EXACT_PHRASE = 25;
    public static final int EXACT_TERM = 26;
    public static final int EXCLAMATION = 27;
    public static final int EXCLUDE = 28;
    public static final int EXCLUSIVE = 29;
    public static final int EXPONENT = 30;
    public static final int FG_EXACT_PHRASE = 31;
    public static final int FG_EXACT_TERM = 32;
    public static final int FG_PHRASE = 33;
    public static final int FG_PROXIMITY = 34;
    public static final int FG_RANGE = 35;
    public static final int FG_SYNONYM = 36;
    public static final int FG_TERM = 37;
    public static final int FIELD_CONJUNCTION = 38;
    public static final int FIELD_DEFAULT = 39;
    public static final int FIELD_DISJUNCTION = 40;
    public static final int FIELD_EXCLUDE = 41;
    public static final int FIELD_GROUP = 42;
    public static final int FIELD_MANDATORY = 43;
    public static final int FIELD_NEGATION = 44;
    public static final int FIELD_OPTIONAL = 45;
    public static final int FIELD_REF = 46;
    public static final int FLOATING_POINT_LITERAL = 47;
    public static final int FS = 48;
    public static final int FTS = 49;
    public static final int FTSPHRASE = 50;
    public static final int FTSPRE = 51;
    public static final int FTSWILD = 52;
    public static final int FTSWORD = 53;
    public static final int FUZZY = 54;
    public static final int F_ESC = 55;
    public static final int F_HEX = 56;
    public static final int F_URI_ALPHA = 57;
    public static final int F_URI_DIGIT = 58;
    public static final int F_URI_ESC = 59;
    public static final int F_URI_OTHER = 60;
    public static final int GT = 61;
    public static final int HOUR = 62;
    public static final int ID = 63;
    public static final int INCLUSIVE = 64;
    public static final int IN_WORD = 65;
    public static final int LCURL = 66;
    public static final int LPAREN = 67;
    public static final int LSQUARE = 68;
    public static final int LT = 69;
    public static final int MANDATORY = 70;
    public static final int MILLIS = 71;
    public static final int MINUS = 72;
    public static final int MINUTE = 73;
    public static final int MONTH = 74;
    public static final int NAME_SPACE = 75;
    public static final int NEGATION = 76;
    public static final int NON_ZERO_DIGIT = 77;
    public static final int NOT = 78;
    public static final int NOW = 79;
    public static final int OPTIONAL = 80;
    public static final int OR = 81;
    public static final int PERCENT = 82;
    public static final int PHRASE = 83;
    public static final int PLUS = 84;
    public static final int PREFIX = 85;
    public static final int PROXIMITY = 86;
    public static final int QUALIFIER = 87;
    public static final int QUESTION_MARK = 88;
    public static final int RANGE = 89;
    public static final int RCURL = 90;
    public static final int RPAREN = 91;
    public static final int RSQUARE = 92;
    public static final int SECOND = 93;
    public static final int SIGNED_INTEGER = 94;
    public static final int SPECIFICDATETIME = 95;
    public static final int STAR = 96;
    public static final int START_WORD = 97;
    public static final int SYNONYM = 98;
    public static final int TEMPLATE = 99;
    public static final int TERM = 100;
    public static final int TILDA = 101;
    public static final int TO = 102;
    public static final int UNIT = 103;
    public static final int URI = 104;
    public static final int WS = 105;
    public static final int YEAR = 106;
    public static final int ZERO_DIGIT = 107;

    // delegates
    public Parser[] getDelegates()
    {
        return new Parser[]{};
    }

    // delegators

    public FTSParser(TokenStream input)
    {
        this(input, new RecognizerSharedState());
    }

    public FTSParser(TokenStream input, RecognizerSharedState state)
    {
        super(input, state);
    }

    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor)
    {
        this.adaptor = adaptor;
    }

    public TreeAdaptor getTreeAdaptor()
    {
        return adaptor;
    }

    @Override
    public String[] getTokenNames()
    {
        return FTSParser.tokenNames;
    }

    @Override
    public String getGrammarFileName()
    {
        return "./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g";
    }

    public enum Mode
    {
        CMIS, DEFAULT_CONJUNCTION, DEFAULT_DISJUNCTION
    }

    private Stack<String> paraphrases = new Stack<String>();

    private boolean defaultFieldConjunction = true;

    private Mode mode = Mode.DEFAULT_CONJUNCTION;

    public Mode getMode()
    {
        return mode;
    }

    public void setMode(Mode mode)
    {
        this.mode = mode;
    }

    public boolean defaultFieldConjunction()
    {
        return defaultFieldConjunction;
    }

    public void setDefaultFieldConjunction(boolean defaultFieldConjunction)
    {
        this.defaultFieldConjunction = defaultFieldConjunction;
    }

    protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) throws RecognitionException
    {
        throw new MismatchedTokenException(ttype, input);
    }

    public Object recoverFromMismatchedSet(IntStream input, RecognitionException e, BitSet follow) throws RecognitionException
    {
        throw e;
    }

    public String getErrorMessage(RecognitionException e, String[] tokenNames)
    {
        List stack = getRuleInvocationStack(e, this.getClass().getName());
        String msg = e.getMessage();
        if (e instanceof UnwantedTokenException)
        {
            UnwantedTokenException ute = (UnwantedTokenException) e;
            String tokenName = "<unknown>";
            if (ute.expecting == Token.EOF)
            {
                tokenName = "EOF";
            }
            else
            {
                tokenName = tokenNames[ute.expecting];
            }
            msg = "extraneous input " + getTokenErrorDisplay(ute.getUnexpectedToken())
                    + " expecting " + tokenName;
        }
        else if (e instanceof MissingTokenException)
        {
            MissingTokenException mte = (MissingTokenException) e;
            String tokenName = "<unknown>";
            if (mte.expecting == Token.EOF)
            {
                tokenName = "EOF";
            }
            else
            {
                tokenName = tokenNames[mte.expecting];
            }
            msg = "missing " + tokenName + " at " + getTokenErrorDisplay(e.token)
                    + "  (" + getLongTokenErrorDisplay(e.token) + ")";
        }
        else if (e instanceof MismatchedTokenException)
        {
            MismatchedTokenException mte = (MismatchedTokenException) e;
            String tokenName = "<unknown>";
            if (mte.expecting == Token.EOF)
            {
                tokenName = "EOF";
            }
            else
            {
                tokenName = tokenNames[mte.expecting];
            }
            msg = "mismatched input " + getTokenErrorDisplay(e.token)
                    + " expecting " + tokenName + "  (" + getLongTokenErrorDisplay(e.token) + ")";
        }
        else if (e instanceof MismatchedTreeNodeException)
        {
            MismatchedTreeNodeException mtne = (MismatchedTreeNodeException) e;
            String tokenName = "<unknown>";
            if (mtne.expecting == Token.EOF)
            {
                tokenName = "EOF";
            }
            else
            {
                tokenName = tokenNames[mtne.expecting];
            }
            msg = "mismatched tree node: " + mtne.node + " expecting " + tokenName;
        }
        else if (e instanceof NoViableAltException)
        {
            NoViableAltException nvae = (NoViableAltException) e;
            msg = "no viable alternative at input " + getTokenErrorDisplay(e.token)
                    + "\n\t (decision=" + nvae.decisionNumber
                    + " state " + nvae.stateNumber + ")"
                    + " decision=<<" + nvae.grammarDecisionDescription + ">>";
        }
        else if (e instanceof EarlyExitException)
        {
            // EarlyExitException eee = (EarlyExitException)e;
            // for development, can add "(decision="+eee.decisionNumber+")"
            msg = "required (...)+ loop did not match anything at input " + getTokenErrorDisplay(e.token);
        }
        else if (e instanceof MismatchedSetException)
        {
            MismatchedSetException mse = (MismatchedSetException) e;
            msg = "mismatched input " + getTokenErrorDisplay(e.token)
                    + " expecting set " + mse.expecting;
        }
        else if (e instanceof MismatchedNotSetException)
        {
            MismatchedNotSetException mse = (MismatchedNotSetException) e;
            msg = "mismatched input " + getTokenErrorDisplay(e.token)
                    + " expecting set " + mse.expecting;
        }
        else if (e instanceof FailedPredicateException)
        {
            FailedPredicateException fpe = (FailedPredicateException) e;
            msg = "rule " + fpe.ruleName + " failed predicate: {" + fpe.predicateText + "}?";
        }

        if (paraphrases.size() > 0)
        {
            String paraphrase = (String) paraphrases.peek();
            msg = msg + " " + paraphrase;
        }
        return msg + "\n\t" + stack;
    }

    public String getLongTokenErrorDisplay(Token t)
    {
        return t.toString();
    }

    public String getErrorString(RecognitionException e)
    {
        String hdr = getErrorHeader(e);
        String msg = getErrorMessage(e, this.getTokenNames());
        return hdr + " " + msg;
    }

    public static class ftsQuery_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsQuery"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:342:1: ftsQuery : ftsDisjunction EOF -> ftsDisjunction ;
    public final FTSParser.ftsQuery_return ftsQuery() throws RecognitionException
    {
        FTSParser.ftsQuery_return retval = new FTSParser.ftsQuery_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EOF2 = null;
        ParserRuleReturnScope ftsDisjunction1 = null;

        Object EOF2_tree = null;
        RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor, "token EOF");
        RewriteRuleSubtreeStream stream_ftsDisjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsDisjunction");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:343:9: ( ftsDisjunction EOF -> ftsDisjunction )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:344:9: ftsDisjunction EOF
            {
                pushFollow(FOLLOW_ftsDisjunction_in_ftsQuery578);
                ftsDisjunction1 = ftsDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsDisjunction.add(ftsDisjunction1.getTree());
                EOF2 = (Token) match(input, EOF, FOLLOW_EOF_in_ftsQuery580);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_EOF.add(EOF2);

                // AST REWRITE
                // elements: ftsDisjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 345:17: -> ftsDisjunction
                    {
                        adaptor.addChild(root_0, stream_ftsDisjunction.nextTree());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsQuery"

    public static class ftsDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:353:1: ftsDisjunction : ({...}? cmisExplicitDisjunction |{...}? ftsExplicitDisjunction |{...}? ftsImplicitDisjunction );
    public final FTSParser.ftsDisjunction_return ftsDisjunction() throws RecognitionException
    {
        FTSParser.ftsDisjunction_return retval = new FTSParser.ftsDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope cmisExplicitDisjunction3 = null;
        ParserRuleReturnScope ftsExplicitDisjunction4 = null;
        ParserRuleReturnScope ftsImplicitDisjunction5 = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:354:9: ({...}? cmisExplicitDisjunction |{...}? ftsExplicitDisjunction |{...}? ftsImplicitDisjunction )
            int alt1 = 3;
            switch (input.LA(1))
            {
            case COMMA:
            case DOT:
            {
                int LA1_1 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 1, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case ID:
            {
                int LA1_2 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 2, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSWORD:
            {
                int LA1_3 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 3, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSPRE:
            {
                int LA1_4 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 4, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSWILD:
            {
                int LA1_5 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 5, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case NOT:
            {
                int LA1_6 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 6, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case TO:
            {
                int LA1_7 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 7, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case DECIMAL_INTEGER_LITERAL:
            {
                int LA1_8 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 8, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FLOATING_POINT_LITERAL:
            {
                int LA1_9 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 9, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case STAR:
            {
                int LA1_10 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 10, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case QUESTION_MARK:
            {
                int LA1_11 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 11, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case DATETIME:
            {
                int LA1_12 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 12, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case URI:
            {
                int LA1_13 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 13, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSPHRASE:
            {
                int LA1_14 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 14, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case MINUS:
            {
                int LA1_15 = input.LA(2);
                if (((getMode() == Mode.CMIS)))
                {
                    alt1 = 1;
                }
                else if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 15, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case AND:
            {
                int LA1_16 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 16, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case AMP:
            {
                alt1 = 2;
            }
                break;
            case EXCLAMATION:
            {
                int LA1_18 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 18, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case AT:
            {
                int LA1_19 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 19, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case OR:
            {
                int LA1_20 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 20, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case LSQUARE:
            {
                int LA1_21 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 21, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case LT:
            {
                int LA1_22 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 22, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case EQUALS:
            {
                int LA1_23 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 23, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case TILDA:
            {
                int LA1_24 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 24, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case LPAREN:
            {
                int LA1_25 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 25, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case PERCENT:
            {
                int LA1_26 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 26, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case PLUS:
            {
                int LA1_27 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 27, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case BAR:
            {
                int LA1_28 = input.LA(2);
                if (((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    alt1 = 2;
                }
                else if (((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    alt1 = 3;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 1, 28, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
                throw nvae;
            }
            switch (alt1)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:355:11: {...}? cmisExplicitDisjunction
            {
                root_0 = (Object) adaptor.nil();

                if (!((getMode() == Mode.CMIS)))
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "ftsDisjunction", "getMode() == Mode.CMIS");
                }
                pushFollow(FOLLOW_cmisExplicitDisjunction_in_ftsDisjunction640);
                cmisExplicitDisjunction3 = cmisExplicitDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, cmisExplicitDisjunction3.getTree());

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:356:11: {...}? ftsExplicitDisjunction
            {
                root_0 = (Object) adaptor.nil();

                if (!((getMode() == Mode.DEFAULT_CONJUNCTION)))
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "ftsDisjunction", "getMode() == Mode.DEFAULT_CONJUNCTION");
                }
                pushFollow(FOLLOW_ftsExplicitDisjunction_in_ftsDisjunction654);
                ftsExplicitDisjunction4 = ftsExplicitDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsExplicitDisjunction4.getTree());

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:357:11: {...}? ftsImplicitDisjunction
            {
                root_0 = (Object) adaptor.nil();

                if (!((getMode() == Mode.DEFAULT_DISJUNCTION)))
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "ftsDisjunction", "getMode() == Mode.DEFAULT_DISJUNCTION");
                }
                pushFollow(FOLLOW_ftsImplicitDisjunction_in_ftsDisjunction668);
                ftsImplicitDisjunction5 = ftsImplicitDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsImplicitDisjunction5.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsDisjunction"

    public static class ftsExplicitDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsExplicitDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:360:1: ftsExplicitDisjunction : ftsImplicitConjunction ( or ftsImplicitConjunction )* -> ^( DISJUNCTION ( ftsImplicitConjunction )+ ) ;
    public final FTSParser.ftsExplicitDisjunction_return ftsExplicitDisjunction() throws RecognitionException
    {
        FTSParser.ftsExplicitDisjunction_return retval = new FTSParser.ftsExplicitDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsImplicitConjunction6 = null;
        ParserRuleReturnScope or7 = null;
        ParserRuleReturnScope ftsImplicitConjunction8 = null;

        RewriteRuleSubtreeStream stream_or = new RewriteRuleSubtreeStream(adaptor, "rule or");
        RewriteRuleSubtreeStream stream_ftsImplicitConjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsImplicitConjunction");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:361:9: ( ftsImplicitConjunction ( or ftsImplicitConjunction )* -> ^( DISJUNCTION ( ftsImplicitConjunction )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:362:9: ftsImplicitConjunction ( or ftsImplicitConjunction )*
            {
                pushFollow(FOLLOW_ftsImplicitConjunction_in_ftsExplicitDisjunction701);
                ftsImplicitConjunction6 = ftsImplicitConjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsImplicitConjunction.add(ftsImplicitConjunction6.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:362:32: ( or ftsImplicitConjunction )*
                loop2: while (true)
                {
                    int alt2 = 2;
                    int LA2_0 = input.LA(1);
                    if ((LA2_0 == BAR || LA2_0 == OR))
                    {
                        alt2 = 1;
                    }

                    switch (alt2)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:362:33: or ftsImplicitConjunction
                    {
                        pushFollow(FOLLOW_or_in_ftsExplicitDisjunction704);
                        or7 = or();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_or.add(or7.getTree());
                        pushFollow(FOLLOW_ftsImplicitConjunction_in_ftsExplicitDisjunction706);
                        ftsImplicitConjunction8 = ftsImplicitConjunction();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsImplicitConjunction.add(ftsImplicitConjunction8.getTree());
                    }
                        break;

                    default:
                        break loop2;
                    }
                }

                // AST REWRITE
                // elements: ftsImplicitConjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 363:17: -> ^( DISJUNCTION ( ftsImplicitConjunction )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:364:25: ^( DISJUNCTION ( ftsImplicitConjunction )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(DISJUNCTION, "DISJUNCTION"), root_1);
                            if (!(stream_ftsImplicitConjunction.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsImplicitConjunction.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsImplicitConjunction.nextTree());
                            }
                            stream_ftsImplicitConjunction.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsExplicitDisjunction"

    public static class cmisExplicitDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "cmisExplicitDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:367:1: cmisExplicitDisjunction : cmisConjunction ( or cmisConjunction )* -> ^( DISJUNCTION ( cmisConjunction )+ ) ;
    public final FTSParser.cmisExplicitDisjunction_return cmisExplicitDisjunction() throws RecognitionException
    {
        FTSParser.cmisExplicitDisjunction_return retval = new FTSParser.cmisExplicitDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope cmisConjunction9 = null;
        ParserRuleReturnScope or10 = null;
        ParserRuleReturnScope cmisConjunction11 = null;

        RewriteRuleSubtreeStream stream_cmisConjunction = new RewriteRuleSubtreeStream(adaptor, "rule cmisConjunction");
        RewriteRuleSubtreeStream stream_or = new RewriteRuleSubtreeStream(adaptor, "rule or");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:368:9: ( cmisConjunction ( or cmisConjunction )* -> ^( DISJUNCTION ( cmisConjunction )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:369:9: cmisConjunction ( or cmisConjunction )*
            {
                pushFollow(FOLLOW_cmisConjunction_in_cmisExplicitDisjunction790);
                cmisConjunction9 = cmisConjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_cmisConjunction.add(cmisConjunction9.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:369:25: ( or cmisConjunction )*
                loop3: while (true)
                {
                    int alt3 = 2;
                    int LA3_0 = input.LA(1);
                    if ((LA3_0 == BAR || LA3_0 == OR))
                    {
                        alt3 = 1;
                    }

                    switch (alt3)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:369:26: or cmisConjunction
                    {
                        pushFollow(FOLLOW_or_in_cmisExplicitDisjunction793);
                        or10 = or();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_or.add(or10.getTree());
                        pushFollow(FOLLOW_cmisConjunction_in_cmisExplicitDisjunction795);
                        cmisConjunction11 = cmisConjunction();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_cmisConjunction.add(cmisConjunction11.getTree());
                    }
                        break;

                    default:
                        break loop3;
                    }
                }

                // AST REWRITE
                // elements: cmisConjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 370:17: -> ^( DISJUNCTION ( cmisConjunction )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:371:25: ^( DISJUNCTION ( cmisConjunction )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(DISJUNCTION, "DISJUNCTION"), root_1);
                            if (!(stream_cmisConjunction.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_cmisConjunction.hasNext())
                            {
                                adaptor.addChild(root_1, stream_cmisConjunction.nextTree());
                            }
                            stream_cmisConjunction.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmisExplicitDisjunction"

    public static class ftsImplicitDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsImplicitDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:374:1: ftsImplicitDisjunction : ( ( or )? ftsExplicitConjunction )+ -> ^( DISJUNCTION ( ftsExplicitConjunction )+ ) ;
    public final FTSParser.ftsImplicitDisjunction_return ftsImplicitDisjunction() throws RecognitionException
    {
        FTSParser.ftsImplicitDisjunction_return retval = new FTSParser.ftsImplicitDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope or12 = null;
        ParserRuleReturnScope ftsExplicitConjunction13 = null;

        RewriteRuleSubtreeStream stream_or = new RewriteRuleSubtreeStream(adaptor, "rule or");
        RewriteRuleSubtreeStream stream_ftsExplicitConjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsExplicitConjunction");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:375:9: ( ( ( or )? ftsExplicitConjunction )+ -> ^( DISJUNCTION ( ftsExplicitConjunction )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:376:9: ( ( or )? ftsExplicitConjunction )+
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:376:9: ( ( or )? ftsExplicitConjunction )+
                int cnt5 = 0;
                loop5: while (true)
                {
                    int alt5 = 2;
                    int LA5_0 = input.LA(1);
                    if (((LA5_0 >= AND && LA5_0 <= BAR) || LA5_0 == COMMA || LA5_0 == DATETIME || LA5_0 == DECIMAL_INTEGER_LITERAL || LA5_0 == DOT || LA5_0 == EQUALS || LA5_0 == EXCLAMATION || LA5_0 == FLOATING_POINT_LITERAL || (LA5_0 >= FTSPHRASE && LA5_0 <= FTSWORD) || LA5_0 == ID || (LA5_0 >= LPAREN && LA5_0 <= LT) || LA5_0 == MINUS || LA5_0 == NOT || (LA5_0 >= OR && LA5_0 <= PERCENT) || LA5_0 == PLUS || LA5_0 == QUESTION_MARK || LA5_0 == STAR || (LA5_0 >= TILDA && LA5_0 <= TO) || LA5_0 == URI))
                    {
                        alt5 = 1;
                    }

                    switch (alt5)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:376:10: ( or )? ftsExplicitConjunction
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:376:10: ( or )?
                        int alt4 = 2;
                        int LA4_0 = input.LA(1);
                        if ((LA4_0 == OR))
                        {
                            int LA4_1 = input.LA(2);
                            if (((LA4_1 >= AND && LA4_1 <= BAR) || LA4_1 == COMMA || LA4_1 == DATETIME || LA4_1 == DECIMAL_INTEGER_LITERAL || LA4_1 == DOT || LA4_1 == EQUALS || LA4_1 == EXCLAMATION || LA4_1 == FLOATING_POINT_LITERAL || (LA4_1 >= FTSPHRASE && LA4_1 <= FTSWORD) || LA4_1 == ID || (LA4_1 >= LPAREN && LA4_1 <= LT) || LA4_1 == MINUS || LA4_1 == NOT || (LA4_1 >= OR && LA4_1 <= PERCENT) || LA4_1 == PLUS || LA4_1 == QUESTION_MARK || LA4_1 == STAR || (LA4_1 >= TILDA && LA4_1 <= TO) || LA4_1 == URI))
                            {
                                alt4 = 1;
                            }
                        }
                        else if ((LA4_0 == BAR))
                        {
                            int LA4_2 = input.LA(2);
                            if ((LA4_2 == BAR))
                            {
                                alt4 = 1;
                            }
                        }
                        switch (alt4)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:376:10: or
                        {
                            pushFollow(FOLLOW_or_in_ftsImplicitDisjunction880);
                            or12 = or();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_or.add(or12.getTree());
                        }
                            break;

                        }

                        pushFollow(FOLLOW_ftsExplicitConjunction_in_ftsImplicitDisjunction883);
                        ftsExplicitConjunction13 = ftsExplicitConjunction();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsExplicitConjunction.add(ftsExplicitConjunction13.getTree());
                    }
                        break;

                    default:
                        if (cnt5 >= 1)
                            break loop5;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(5, input);
                        throw eee;
                    }
                    cnt5++;
                }

                // AST REWRITE
                // elements: ftsExplicitConjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 377:17: -> ^( DISJUNCTION ( ftsExplicitConjunction )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:378:25: ^( DISJUNCTION ( ftsExplicitConjunction )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(DISJUNCTION, "DISJUNCTION"), root_1);
                            if (!(stream_ftsExplicitConjunction.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsExplicitConjunction.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsExplicitConjunction.nextTree());
                            }
                            stream_ftsExplicitConjunction.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsImplicitDisjunction"

    public static class ftsExplicitConjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsExplicitConjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:385:1: ftsExplicitConjunction : ftsPrefixed ( and ftsPrefixed )* -> ^( CONJUNCTION ( ftsPrefixed )+ ) ;
    public final FTSParser.ftsExplicitConjunction_return ftsExplicitConjunction() throws RecognitionException
    {
        FTSParser.ftsExplicitConjunction_return retval = new FTSParser.ftsExplicitConjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsPrefixed14 = null;
        ParserRuleReturnScope and15 = null;
        ParserRuleReturnScope ftsPrefixed16 = null;

        RewriteRuleSubtreeStream stream_and = new RewriteRuleSubtreeStream(adaptor, "rule and");
        RewriteRuleSubtreeStream stream_ftsPrefixed = new RewriteRuleSubtreeStream(adaptor, "rule ftsPrefixed");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:386:9: ( ftsPrefixed ( and ftsPrefixed )* -> ^( CONJUNCTION ( ftsPrefixed )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:387:9: ftsPrefixed ( and ftsPrefixed )*
            {
                pushFollow(FOLLOW_ftsPrefixed_in_ftsExplicitConjunction970);
                ftsPrefixed14 = ftsPrefixed();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsPrefixed.add(ftsPrefixed14.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:387:21: ( and ftsPrefixed )*
                loop6: while (true)
                {
                    int alt6 = 2;
                    int LA6_0 = input.LA(1);
                    if ((LA6_0 == AND))
                    {
                        int LA6_2 = input.LA(2);
                        if (((LA6_2 >= AND && LA6_2 <= BAR) || LA6_2 == COMMA || LA6_2 == DATETIME || LA6_2 == DECIMAL_INTEGER_LITERAL || LA6_2 == DOT || LA6_2 == EQUALS || LA6_2 == EXCLAMATION || LA6_2 == FLOATING_POINT_LITERAL || (LA6_2 >= FTSPHRASE && LA6_2 <= FTSWORD) || LA6_2 == ID || (LA6_2 >= LPAREN && LA6_2 <= LT) || LA6_2 == MINUS || LA6_2 == NOT || (LA6_2 >= OR && LA6_2 <= PERCENT) || LA6_2 == PLUS || LA6_2 == QUESTION_MARK || LA6_2 == STAR || (LA6_2 >= TILDA && LA6_2 <= TO) || LA6_2 == URI))
                        {
                            alt6 = 1;
                        }

                    }
                    else if ((LA6_0 == AMP))
                    {
                        alt6 = 1;
                    }

                    switch (alt6)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:387:22: and ftsPrefixed
                    {
                        pushFollow(FOLLOW_and_in_ftsExplicitConjunction973);
                        and15 = and();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_and.add(and15.getTree());
                        pushFollow(FOLLOW_ftsPrefixed_in_ftsExplicitConjunction975);
                        ftsPrefixed16 = ftsPrefixed();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsPrefixed.add(ftsPrefixed16.getTree());
                    }
                        break;

                    default:
                        break loop6;
                    }
                }

                // AST REWRITE
                // elements: ftsPrefixed
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 388:17: -> ^( CONJUNCTION ( ftsPrefixed )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:389:25: ^( CONJUNCTION ( ftsPrefixed )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(CONJUNCTION, "CONJUNCTION"), root_1);
                            if (!(stream_ftsPrefixed.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsPrefixed.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsPrefixed.nextTree());
                            }
                            stream_ftsPrefixed.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsExplicitConjunction"

    public static class ftsImplicitConjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsImplicitConjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:392:1: ftsImplicitConjunction : ( ( and )? ftsPrefixed )+ -> ^( CONJUNCTION ( ftsPrefixed )+ ) ;
    public final FTSParser.ftsImplicitConjunction_return ftsImplicitConjunction() throws RecognitionException
    {
        FTSParser.ftsImplicitConjunction_return retval = new FTSParser.ftsImplicitConjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope and17 = null;
        ParserRuleReturnScope ftsPrefixed18 = null;

        RewriteRuleSubtreeStream stream_and = new RewriteRuleSubtreeStream(adaptor, "rule and");
        RewriteRuleSubtreeStream stream_ftsPrefixed = new RewriteRuleSubtreeStream(adaptor, "rule ftsPrefixed");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:393:9: ( ( ( and )? ftsPrefixed )+ -> ^( CONJUNCTION ( ftsPrefixed )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:394:9: ( ( and )? ftsPrefixed )+
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:394:9: ( ( and )? ftsPrefixed )+
                int cnt8 = 0;
                loop8: while (true)
                {
                    int alt8 = 2;
                    switch (input.LA(1))
                    {
                    case OR:
                    {
                        int LA8_1 = input.LA(2);
                        if ((LA8_1 == COLON))
                        {
                            alt8 = 1;
                        }

                    }
                        break;
                    case BAR:
                    {
                        int LA8_2 = input.LA(2);
                        if (((LA8_2 >= AND && LA8_2 <= AT) || LA8_2 == COMMA || LA8_2 == DATETIME || LA8_2 == DECIMAL_INTEGER_LITERAL || LA8_2 == DOT || LA8_2 == EQUALS || LA8_2 == FLOATING_POINT_LITERAL || (LA8_2 >= FTSPHRASE && LA8_2 <= FTSWORD) || LA8_2 == ID || (LA8_2 >= LPAREN && LA8_2 <= LT) || LA8_2 == NOT || (LA8_2 >= OR && LA8_2 <= PERCENT) || LA8_2 == QUESTION_MARK || LA8_2 == STAR || (LA8_2 >= TILDA && LA8_2 <= TO) || LA8_2 == URI))
                        {
                            alt8 = 1;
                        }

                    }
                        break;
                    case AMP:
                    case AND:
                    case AT:
                    case COMMA:
                    case DATETIME:
                    case DECIMAL_INTEGER_LITERAL:
                    case DOT:
                    case EQUALS:
                    case EXCLAMATION:
                    case FLOATING_POINT_LITERAL:
                    case FTSPHRASE:
                    case FTSPRE:
                    case FTSWILD:
                    case FTSWORD:
                    case ID:
                    case LPAREN:
                    case LSQUARE:
                    case LT:
                    case MINUS:
                    case NOT:
                    case PERCENT:
                    case PLUS:
                    case QUESTION_MARK:
                    case STAR:
                    case TILDA:
                    case TO:
                    case URI:
                    {
                        alt8 = 1;
                    }
                        break;
                    }
                    switch (alt8)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:394:10: ( and )? ftsPrefixed
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:394:10: ( and )?
                        int alt7 = 2;
                        int LA7_0 = input.LA(1);
                        if ((LA7_0 == AND))
                        {
                            int LA7_1 = input.LA(2);
                            if (((LA7_1 >= AND && LA7_1 <= BAR) || LA7_1 == COMMA || LA7_1 == DATETIME || LA7_1 == DECIMAL_INTEGER_LITERAL || LA7_1 == DOT || LA7_1 == EQUALS || LA7_1 == EXCLAMATION || LA7_1 == FLOATING_POINT_LITERAL || (LA7_1 >= FTSPHRASE && LA7_1 <= FTSWORD) || LA7_1 == ID || (LA7_1 >= LPAREN && LA7_1 <= LT) || LA7_1 == MINUS || LA7_1 == NOT || (LA7_1 >= OR && LA7_1 <= PERCENT) || LA7_1 == PLUS || LA7_1 == QUESTION_MARK || LA7_1 == STAR || (LA7_1 >= TILDA && LA7_1 <= TO) || LA7_1 == URI))
                            {
                                alt7 = 1;
                            }
                        }
                        else if ((LA7_0 == AMP))
                        {
                            alt7 = 1;
                        }
                        switch (alt7)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:394:10: and
                        {
                            pushFollow(FOLLOW_and_in_ftsImplicitConjunction1060);
                            and17 = and();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_and.add(and17.getTree());
                        }
                            break;

                        }

                        pushFollow(FOLLOW_ftsPrefixed_in_ftsImplicitConjunction1063);
                        ftsPrefixed18 = ftsPrefixed();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsPrefixed.add(ftsPrefixed18.getTree());
                    }
                        break;

                    default:
                        if (cnt8 >= 1)
                            break loop8;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(8, input);
                        throw eee;
                    }
                    cnt8++;
                }

                // AST REWRITE
                // elements: ftsPrefixed
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 395:17: -> ^( CONJUNCTION ( ftsPrefixed )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:396:25: ^( CONJUNCTION ( ftsPrefixed )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(CONJUNCTION, "CONJUNCTION"), root_1);
                            if (!(stream_ftsPrefixed.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsPrefixed.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsPrefixed.nextTree());
                            }
                            stream_ftsPrefixed.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsImplicitConjunction"

    public static class cmisConjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "cmisConjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:399:1: cmisConjunction : ( cmisPrefixed )+ -> ^( CONJUNCTION ( cmisPrefixed )+ ) ;
    public final FTSParser.cmisConjunction_return cmisConjunction() throws RecognitionException
    {
        FTSParser.cmisConjunction_return retval = new FTSParser.cmisConjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope cmisPrefixed19 = null;

        RewriteRuleSubtreeStream stream_cmisPrefixed = new RewriteRuleSubtreeStream(adaptor, "rule cmisPrefixed");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:400:9: ( ( cmisPrefixed )+ -> ^( CONJUNCTION ( cmisPrefixed )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:401:9: ( cmisPrefixed )+
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:401:9: ( cmisPrefixed )+
                int cnt9 = 0;
                loop9: while (true)
                {
                    int alt9 = 2;
                    int LA9_0 = input.LA(1);
                    if ((LA9_0 == COMMA || LA9_0 == DATETIME || LA9_0 == DECIMAL_INTEGER_LITERAL || LA9_0 == DOT || LA9_0 == FLOATING_POINT_LITERAL || (LA9_0 >= FTSPHRASE && LA9_0 <= FTSWORD) || LA9_0 == ID || LA9_0 == MINUS || LA9_0 == NOT || LA9_0 == QUESTION_MARK || LA9_0 == STAR || LA9_0 == TO || LA9_0 == URI))
                    {
                        alt9 = 1;
                    }

                    switch (alt9)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:401:9: cmisPrefixed
                    {
                        pushFollow(FOLLOW_cmisPrefixed_in_cmisConjunction1147);
                        cmisPrefixed19 = cmisPrefixed();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_cmisPrefixed.add(cmisPrefixed19.getTree());
                    }
                        break;

                    default:
                        if (cnt9 >= 1)
                            break loop9;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(9, input);
                        throw eee;
                    }
                    cnt9++;
                }

                // AST REWRITE
                // elements: cmisPrefixed
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 402:17: -> ^( CONJUNCTION ( cmisPrefixed )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:403:25: ^( CONJUNCTION ( cmisPrefixed )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(CONJUNCTION, "CONJUNCTION"), root_1);
                            if (!(stream_cmisPrefixed.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_cmisPrefixed.hasNext())
                            {
                                adaptor.addChild(root_1, stream_cmisPrefixed.nextTree());
                            }
                            stream_cmisPrefixed.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmisConjunction"

    public static class ftsPrefixed_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsPrefixed"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:413:1: ftsPrefixed : ( ( not )=> not ftsTest ( boost )? -> ^( NEGATION ftsTest ( boost )? ) | ftsTest ( boost )? -> ^( DEFAULT ftsTest ( boost )? ) | PLUS ftsTest ( boost )? -> ^( MANDATORY ftsTest ( boost )? ) | BAR ftsTest ( boost )? -> ^( OPTIONAL ftsTest ( boost )? ) | MINUS ftsTest ( boost )? -> ^( EXCLUDE ftsTest ( boost )? ) );
    public final FTSParser.ftsPrefixed_return ftsPrefixed() throws RecognitionException
    {
        FTSParser.ftsPrefixed_return retval = new FTSParser.ftsPrefixed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS25 = null;
        Token BAR28 = null;
        Token MINUS31 = null;
        ParserRuleReturnScope not20 = null;
        ParserRuleReturnScope ftsTest21 = null;
        ParserRuleReturnScope boost22 = null;
        ParserRuleReturnScope ftsTest23 = null;
        ParserRuleReturnScope boost24 = null;
        ParserRuleReturnScope ftsTest26 = null;
        ParserRuleReturnScope boost27 = null;
        ParserRuleReturnScope ftsTest29 = null;
        ParserRuleReturnScope boost30 = null;
        ParserRuleReturnScope ftsTest32 = null;
        ParserRuleReturnScope boost33 = null;

        Object PLUS25_tree = null;
        Object BAR28_tree = null;
        Object MINUS31_tree = null;
        RewriteRuleTokenStream stream_BAR = new RewriteRuleTokenStream(adaptor, "token BAR");
        RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
        RewriteRuleSubtreeStream stream_not = new RewriteRuleSubtreeStream(adaptor, "rule not");
        RewriteRuleSubtreeStream stream_boost = new RewriteRuleSubtreeStream(adaptor, "rule boost");
        RewriteRuleSubtreeStream stream_ftsTest = new RewriteRuleSubtreeStream(adaptor, "rule ftsTest");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:414:9: ( ( not )=> not ftsTest ( boost )? -> ^( NEGATION ftsTest ( boost )? ) | ftsTest ( boost )? -> ^( DEFAULT ftsTest ( boost )? ) | PLUS ftsTest ( boost )? -> ^( MANDATORY ftsTest ( boost )? ) | BAR ftsTest ( boost )? -> ^( OPTIONAL ftsTest ( boost )? ) | MINUS ftsTest ( boost )? -> ^( EXCLUDE ftsTest ( boost )? ) )
            int alt15 = 5;
            int LA15_0 = input.LA(1);
            if ((LA15_0 == NOT))
            {
                int LA15_1 = input.LA(2);
                if ((synpred1_FTS()))
                {
                    alt15 = 1;
                }
                else if ((true))
                {
                    alt15 = 2;
                }

            }
            else if (((LA15_0 >= AND && LA15_0 <= AT) || LA15_0 == COMMA || LA15_0 == DATETIME || LA15_0 == DECIMAL_INTEGER_LITERAL || LA15_0 == DOT || LA15_0 == EQUALS || LA15_0 == FLOATING_POINT_LITERAL || (LA15_0 >= FTSPHRASE && LA15_0 <= FTSWORD) || LA15_0 == ID || (LA15_0 >= LPAREN && LA15_0 <= LT) || (LA15_0 >= OR && LA15_0 <= PERCENT) || LA15_0 == QUESTION_MARK || LA15_0 == STAR || (LA15_0 >= TILDA && LA15_0 <= TO) || LA15_0 == URI))
            {
                alt15 = 2;
            }
            else if ((LA15_0 == EXCLAMATION) && (synpred1_FTS()))
            {
                alt15 = 1;
            }
            else if ((LA15_0 == PLUS))
            {
                alt15 = 3;
            }
            else if ((LA15_0 == BAR))
            {
                alt15 = 4;
            }
            else if ((LA15_0 == MINUS))
            {
                alt15 = 5;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
                throw nvae;
            }

            switch (alt15)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:415:9: ( not )=> not ftsTest ( boost )?
            {
                pushFollow(FOLLOW_not_in_ftsPrefixed1239);
                not20 = not();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_not.add(not20.getTree());
                pushFollow(FOLLOW_ftsTest_in_ftsPrefixed1241);
                ftsTest21 = ftsTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsTest.add(ftsTest21.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:415:30: ( boost )?
                int alt10 = 2;
                int LA10_0 = input.LA(1);
                if ((LA10_0 == CARAT))
                {
                    alt10 = 1;
                }
                switch (alt10)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:415:30: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsPrefixed1243);
                    boost22 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost22.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsTest, boost
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 416:17: -> ^( NEGATION ftsTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:417:25: ^( NEGATION ftsTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(NEGATION, "NEGATION"), root_1);
                            adaptor.addChild(root_1, stream_ftsTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:417:44: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:418:11: ftsTest ( boost )?
            {
                pushFollow(FOLLOW_ftsTest_in_ftsPrefixed1307);
                ftsTest23 = ftsTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsTest.add(ftsTest23.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:418:19: ( boost )?
                int alt11 = 2;
                int LA11_0 = input.LA(1);
                if ((LA11_0 == CARAT))
                {
                    alt11 = 1;
                }
                switch (alt11)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:418:19: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsPrefixed1309);
                    boost24 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost24.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsTest, boost
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 419:17: -> ^( DEFAULT ftsTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:420:25: ^( DEFAULT ftsTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(DEFAULT, "DEFAULT"), root_1);
                            adaptor.addChild(root_1, stream_ftsTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:420:43: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:421:11: PLUS ftsTest ( boost )?
            {
                PLUS25 = (Token) match(input, PLUS, FOLLOW_PLUS_in_ftsPrefixed1373);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_PLUS.add(PLUS25);

                pushFollow(FOLLOW_ftsTest_in_ftsPrefixed1375);
                ftsTest26 = ftsTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsTest.add(ftsTest26.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:421:24: ( boost )?
                int alt12 = 2;
                int LA12_0 = input.LA(1);
                if ((LA12_0 == CARAT))
                {
                    alt12 = 1;
                }
                switch (alt12)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:421:24: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsPrefixed1377);
                    boost27 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost27.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsTest, boost
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 422:17: -> ^( MANDATORY ftsTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:423:25: ^( MANDATORY ftsTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(MANDATORY, "MANDATORY"), root_1);
                            adaptor.addChild(root_1, stream_ftsTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:423:45: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:424:11: BAR ftsTest ( boost )?
            {
                BAR28 = (Token) match(input, BAR, FOLLOW_BAR_in_ftsPrefixed1441);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_BAR.add(BAR28);

                pushFollow(FOLLOW_ftsTest_in_ftsPrefixed1443);
                ftsTest29 = ftsTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsTest.add(ftsTest29.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:424:23: ( boost )?
                int alt13 = 2;
                int LA13_0 = input.LA(1);
                if ((LA13_0 == CARAT))
                {
                    alt13 = 1;
                }
                switch (alt13)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:424:23: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsPrefixed1445);
                    boost30 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost30.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: boost, ftsTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 425:17: -> ^( OPTIONAL ftsTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:426:25: ^( OPTIONAL ftsTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(OPTIONAL, "OPTIONAL"), root_1);
                            adaptor.addChild(root_1, stream_ftsTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:426:44: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:427:11: MINUS ftsTest ( boost )?
            {
                MINUS31 = (Token) match(input, MINUS, FOLLOW_MINUS_in_ftsPrefixed1509);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_MINUS.add(MINUS31);

                pushFollow(FOLLOW_ftsTest_in_ftsPrefixed1511);
                ftsTest32 = ftsTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsTest.add(ftsTest32.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:427:25: ( boost )?
                int alt14 = 2;
                int LA14_0 = input.LA(1);
                if ((LA14_0 == CARAT))
                {
                    alt14 = 1;
                }
                switch (alt14)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:427:25: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsPrefixed1513);
                    boost33 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost33.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: boost, ftsTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 428:17: -> ^( EXCLUDE ftsTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:429:25: ^( EXCLUDE ftsTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXCLUDE, "EXCLUDE"), root_1);
                            adaptor.addChild(root_1, stream_ftsTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:429:43: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsPrefixed"

    public static class cmisPrefixed_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "cmisPrefixed"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:432:1: cmisPrefixed : ( cmisTest -> ^( DEFAULT cmisTest ) | MINUS cmisTest -> ^( EXCLUDE cmisTest ) );
    public final FTSParser.cmisPrefixed_return cmisPrefixed() throws RecognitionException
    {
        FTSParser.cmisPrefixed_return retval = new FTSParser.cmisPrefixed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token MINUS35 = null;
        ParserRuleReturnScope cmisTest34 = null;
        ParserRuleReturnScope cmisTest36 = null;

        Object MINUS35_tree = null;
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
        RewriteRuleSubtreeStream stream_cmisTest = new RewriteRuleSubtreeStream(adaptor, "rule cmisTest");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:433:9: ( cmisTest -> ^( DEFAULT cmisTest ) | MINUS cmisTest -> ^( EXCLUDE cmisTest ) )
            int alt16 = 2;
            int LA16_0 = input.LA(1);
            if ((LA16_0 == COMMA || LA16_0 == DATETIME || LA16_0 == DECIMAL_INTEGER_LITERAL || LA16_0 == DOT || LA16_0 == FLOATING_POINT_LITERAL || (LA16_0 >= FTSPHRASE && LA16_0 <= FTSWORD) || LA16_0 == ID || LA16_0 == NOT || LA16_0 == QUESTION_MARK || LA16_0 == STAR || LA16_0 == TO || LA16_0 == URI))
            {
                alt16 = 1;
            }
            else if ((LA16_0 == MINUS))
            {
                alt16 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
                throw nvae;
            }

            switch (alt16)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:434:9: cmisTest
            {
                pushFollow(FOLLOW_cmisTest_in_cmisPrefixed1598);
                cmisTest34 = cmisTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_cmisTest.add(cmisTest34.getTree());
                // AST REWRITE
                // elements: cmisTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 435:17: -> ^( DEFAULT cmisTest )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:436:25: ^( DEFAULT cmisTest )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(DEFAULT, "DEFAULT"), root_1);
                            adaptor.addChild(root_1, stream_cmisTest.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:437:11: MINUS cmisTest
            {
                MINUS35 = (Token) match(input, MINUS, FOLLOW_MINUS_in_cmisPrefixed1658);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_MINUS.add(MINUS35);

                pushFollow(FOLLOW_cmisTest_in_cmisPrefixed1660);
                cmisTest36 = cmisTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_cmisTest.add(cmisTest36.getTree());
                // AST REWRITE
                // elements: cmisTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 438:17: -> ^( EXCLUDE cmisTest )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:439:25: ^( EXCLUDE cmisTest )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXCLUDE, "EXCLUDE"), root_1);
                            adaptor.addChild(root_1, stream_cmisTest.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmisPrefixed"

    public static class ftsTest_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsTest"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:445:1: ftsTest : ( ( ftsFieldGroupProximity )=> ftsFieldGroupProximity -> ^( PROXIMITY ftsFieldGroupProximity ) | ( ftsRange )=> ftsRange -> ^( RANGE ftsRange ) | ( ftsFieldGroup )=> ftsFieldGroup -> ftsFieldGroup | ( ftsTermOrPhrase )=> ftsTermOrPhrase | ( ftsExactTermOrPhrase )=> ftsExactTermOrPhrase | ( ftsTokenisedTermOrPhrase )=> ftsTokenisedTermOrPhrase | LPAREN ftsDisjunction RPAREN -> ftsDisjunction | template -> template );
    public final FTSParser.ftsTest_return ftsTest() throws RecognitionException
    {
        FTSParser.ftsTest_return retval = new FTSParser.ftsTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LPAREN43 = null;
        Token RPAREN45 = null;
        ParserRuleReturnScope ftsFieldGroupProximity37 = null;
        ParserRuleReturnScope ftsRange38 = null;
        ParserRuleReturnScope ftsFieldGroup39 = null;
        ParserRuleReturnScope ftsTermOrPhrase40 = null;
        ParserRuleReturnScope ftsExactTermOrPhrase41 = null;
        ParserRuleReturnScope ftsTokenisedTermOrPhrase42 = null;
        ParserRuleReturnScope ftsDisjunction44 = null;
        ParserRuleReturnScope template46 = null;

        Object LPAREN43_tree = null;
        Object RPAREN45_tree = null;
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_template = new RewriteRuleSubtreeStream(adaptor, "rule template");
        RewriteRuleSubtreeStream stream_ftsRange = new RewriteRuleSubtreeStream(adaptor, "rule ftsRange");
        RewriteRuleSubtreeStream stream_ftsFieldGroupProximity = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupProximity");
        RewriteRuleSubtreeStream stream_ftsDisjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsDisjunction");
        RewriteRuleSubtreeStream stream_ftsFieldGroup = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroup");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:446:9: ( ( ftsFieldGroupProximity )=> ftsFieldGroupProximity -> ^( PROXIMITY ftsFieldGroupProximity ) | ( ftsRange )=> ftsRange -> ^( RANGE ftsRange ) | ( ftsFieldGroup )=> ftsFieldGroup -> ftsFieldGroup | ( ftsTermOrPhrase )=> ftsTermOrPhrase | ( ftsExactTermOrPhrase )=> ftsExactTermOrPhrase | ( ftsTokenisedTermOrPhrase )=> ftsTokenisedTermOrPhrase | LPAREN ftsDisjunction RPAREN -> ftsDisjunction | template -> template )
            int alt17 = 8;
            alt17 = dfa17.predict(input);
            switch (alt17)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:447:12: ( ftsFieldGroupProximity )=> ftsFieldGroupProximity
            {
                pushFollow(FOLLOW_ftsFieldGroupProximity_in_ftsTest1752);
                ftsFieldGroupProximity37 = ftsFieldGroupProximity();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupProximity.add(ftsFieldGroupProximity37.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupProximity
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 448:17: -> ^( PROXIMITY ftsFieldGroupProximity )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:449:25: ^( PROXIMITY ftsFieldGroupProximity )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PROXIMITY, "PROXIMITY"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupProximity.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:451:12: ( ftsRange )=> ftsRange
            {
                pushFollow(FOLLOW_ftsRange_in_ftsTest1829);
                ftsRange38 = ftsRange();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsRange.add(ftsRange38.getTree());
                // AST REWRITE
                // elements: ftsRange
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 452:17: -> ^( RANGE ftsRange )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:453:25: ^( RANGE ftsRange )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(RANGE, "RANGE"), root_1);
                            adaptor.addChild(root_1, stream_ftsRange.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:455:12: ( ftsFieldGroup )=> ftsFieldGroup
            {
                pushFollow(FOLLOW_ftsFieldGroup_in_ftsTest1908);
                ftsFieldGroup39 = ftsFieldGroup();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroup.add(ftsFieldGroup39.getTree());
                // AST REWRITE
                // elements: ftsFieldGroup
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 456:17: -> ftsFieldGroup
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroup.nextTree());
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:458:12: ( ftsTermOrPhrase )=> ftsTermOrPhrase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsTermOrPhrase_in_ftsTest1957);
                ftsTermOrPhrase40 = ftsTermOrPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsTermOrPhrase40.getTree());

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:460:12: ( ftsExactTermOrPhrase )=> ftsExactTermOrPhrase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsExactTermOrPhrase_in_ftsTest1986);
                ftsExactTermOrPhrase41 = ftsExactTermOrPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsExactTermOrPhrase41.getTree());

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:462:12: ( ftsTokenisedTermOrPhrase )=> ftsTokenisedTermOrPhrase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsTokenisedTermOrPhrase_in_ftsTest2016);
                ftsTokenisedTermOrPhrase42 = ftsTokenisedTermOrPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsTokenisedTermOrPhrase42.getTree());

            }
                break;
            case 7:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:465:12: LPAREN ftsDisjunction RPAREN
            {
                LPAREN43 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_ftsTest2047);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_LPAREN.add(LPAREN43);

                pushFollow(FOLLOW_ftsDisjunction_in_ftsTest2049);
                ftsDisjunction44 = ftsDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsDisjunction.add(ftsDisjunction44.getTree());
                RPAREN45 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_ftsTest2051);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_RPAREN.add(RPAREN45);

                // AST REWRITE
                // elements: ftsDisjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 466:17: -> ftsDisjunction
                    {
                        adaptor.addChild(root_0, stream_ftsDisjunction.nextTree());
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 8:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:467:12: template
            {
                pushFollow(FOLLOW_template_in_ftsTest2084);
                template46 = template();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_template.add(template46.getTree());
                // AST REWRITE
                // elements: template
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 468:17: -> template
                    {
                        adaptor.addChild(root_0, stream_template.nextTree());
                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsTest"

    public static class cmisTest_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "cmisTest"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:471:1: cmisTest : ( cmisTerm -> ^( TERM cmisTerm ) | cmisPhrase -> ^( PHRASE cmisPhrase ) );
    public final FTSParser.cmisTest_return cmisTest() throws RecognitionException
    {
        FTSParser.cmisTest_return retval = new FTSParser.cmisTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope cmisTerm47 = null;
        ParserRuleReturnScope cmisPhrase48 = null;

        RewriteRuleSubtreeStream stream_cmisTerm = new RewriteRuleSubtreeStream(adaptor, "rule cmisTerm");
        RewriteRuleSubtreeStream stream_cmisPhrase = new RewriteRuleSubtreeStream(adaptor, "rule cmisPhrase");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:472:9: ( cmisTerm -> ^( TERM cmisTerm ) | cmisPhrase -> ^( PHRASE cmisPhrase ) )
            int alt18 = 2;
            int LA18_0 = input.LA(1);
            if ((LA18_0 == COMMA || LA18_0 == DATETIME || LA18_0 == DECIMAL_INTEGER_LITERAL || LA18_0 == DOT || LA18_0 == FLOATING_POINT_LITERAL || (LA18_0 >= FTSPRE && LA18_0 <= FTSWORD) || LA18_0 == ID || LA18_0 == NOT || LA18_0 == QUESTION_MARK || LA18_0 == STAR || LA18_0 == TO || LA18_0 == URI))
            {
                alt18 = 1;
            }
            else if ((LA18_0 == FTSPHRASE))
            {
                alt18 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
                throw nvae;
            }

            switch (alt18)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:473:9: cmisTerm
            {
                pushFollow(FOLLOW_cmisTerm_in_cmisTest2137);
                cmisTerm47 = cmisTerm();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_cmisTerm.add(cmisTerm47.getTree());
                // AST REWRITE
                // elements: cmisTerm
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 474:17: -> ^( TERM cmisTerm )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:475:25: ^( TERM cmisTerm )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                            adaptor.addChild(root_1, stream_cmisTerm.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:476:11: cmisPhrase
            {
                pushFollow(FOLLOW_cmisPhrase_in_cmisTest2197);
                cmisPhrase48 = cmisPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_cmisPhrase.add(cmisPhrase48.getTree());
                // AST REWRITE
                // elements: cmisPhrase
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 477:17: -> ^( PHRASE cmisPhrase )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:478:25: ^( PHRASE cmisPhrase )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                            adaptor.addChild(root_1, stream_cmisPhrase.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmisTest"

    public static class template_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "template"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:481:1: template : ( PERCENT tempReference -> ^( TEMPLATE tempReference ) | PERCENT LPAREN ( tempReference ( COMMA )? )+ RPAREN -> ^( TEMPLATE ( tempReference )+ ) );
    public final FTSParser.template_return template() throws RecognitionException
    {
        FTSParser.template_return retval = new FTSParser.template_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PERCENT49 = null;
        Token PERCENT51 = null;
        Token LPAREN52 = null;
        Token COMMA54 = null;
        Token RPAREN55 = null;
        ParserRuleReturnScope tempReference50 = null;
        ParserRuleReturnScope tempReference53 = null;

        Object PERCENT49_tree = null;
        Object PERCENT51_tree = null;
        Object LPAREN52_tree = null;
        Object COMMA54_tree = null;
        Object RPAREN55_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_PERCENT = new RewriteRuleTokenStream(adaptor, "token PERCENT");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_tempReference = new RewriteRuleSubtreeStream(adaptor, "rule tempReference");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:482:9: ( PERCENT tempReference -> ^( TEMPLATE tempReference ) | PERCENT LPAREN ( tempReference ( COMMA )? )+ RPAREN -> ^( TEMPLATE ( tempReference )+ ) )
            int alt21 = 2;
            int LA21_0 = input.LA(1);
            if ((LA21_0 == PERCENT))
            {
                int LA21_1 = input.LA(2);
                if ((LA21_1 == LPAREN))
                {
                    alt21 = 2;
                }
                else if (((LA21_1 >= AND && LA21_1 <= AT) || LA21_1 == ID || LA21_1 == NOT || LA21_1 == OR || LA21_1 == TO || LA21_1 == URI))
                {
                    alt21 = 1;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
                throw nvae;
            }

            switch (alt21)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:483:9: PERCENT tempReference
            {
                PERCENT49 = (Token) match(input, PERCENT, FOLLOW_PERCENT_in_template2278);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_PERCENT.add(PERCENT49);

                pushFollow(FOLLOW_tempReference_in_template2280);
                tempReference50 = tempReference();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_tempReference.add(tempReference50.getTree());
                // AST REWRITE
                // elements: tempReference
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 484:17: -> ^( TEMPLATE tempReference )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:485:25: ^( TEMPLATE tempReference )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TEMPLATE, "TEMPLATE"), root_1);
                            adaptor.addChild(root_1, stream_tempReference.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:486:11: PERCENT LPAREN ( tempReference ( COMMA )? )+ RPAREN
            {
                PERCENT51 = (Token) match(input, PERCENT, FOLLOW_PERCENT_in_template2340);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_PERCENT.add(PERCENT51);

                LPAREN52 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_template2342);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_LPAREN.add(LPAREN52);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:486:26: ( tempReference ( COMMA )? )+
                int cnt20 = 0;
                loop20: while (true)
                {
                    int alt20 = 2;
                    int LA20_0 = input.LA(1);
                    if (((LA20_0 >= AND && LA20_0 <= AT) || LA20_0 == ID || LA20_0 == NOT || LA20_0 == OR || LA20_0 == TO || LA20_0 == URI))
                    {
                        alt20 = 1;
                    }

                    switch (alt20)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:486:27: tempReference ( COMMA )?
                    {
                        pushFollow(FOLLOW_tempReference_in_template2345);
                        tempReference53 = tempReference();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_tempReference.add(tempReference53.getTree());
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:486:41: ( COMMA )?
                        int alt19 = 2;
                        int LA19_0 = input.LA(1);
                        if ((LA19_0 == COMMA))
                        {
                            alt19 = 1;
                        }
                        switch (alt19)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:486:41: COMMA
                        {
                            COMMA54 = (Token) match(input, COMMA, FOLLOW_COMMA_in_template2347);
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_COMMA.add(COMMA54);

                        }
                            break;

                        }

                    }
                        break;

                    default:
                        if (cnt20 >= 1)
                            break loop20;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(20, input);
                        throw eee;
                    }
                    cnt20++;
                }

                RPAREN55 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_template2352);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_RPAREN.add(RPAREN55);

                // AST REWRITE
                // elements: tempReference
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 487:17: -> ^( TEMPLATE ( tempReference )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:488:25: ^( TEMPLATE ( tempReference )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TEMPLATE, "TEMPLATE"), root_1);
                            if (!(stream_tempReference.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_tempReference.hasNext())
                            {
                                adaptor.addChild(root_1, stream_tempReference.nextTree());
                            }
                            stream_tempReference.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"

    public static class fuzzy_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "fuzzy"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:491:1: fuzzy : TILDA number -> ^( FUZZY number ) ;
    public final FTSParser.fuzzy_return fuzzy() throws RecognitionException
    {
        FTSParser.fuzzy_return retval = new FTSParser.fuzzy_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TILDA56 = null;
        ParserRuleReturnScope number57 = null;

        Object TILDA56_tree = null;
        RewriteRuleTokenStream stream_TILDA = new RewriteRuleTokenStream(adaptor, "token TILDA");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor, "rule number");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:492:9: ( TILDA number -> ^( FUZZY number ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:493:9: TILDA number
            {
                TILDA56 = (Token) match(input, TILDA, FOLLOW_TILDA_in_fuzzy2434);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TILDA.add(TILDA56);

                pushFollow(FOLLOW_number_in_fuzzy2436);
                number57 = number();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_number.add(number57.getTree());
                // AST REWRITE
                // elements: number
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 494:17: -> ^( FUZZY number )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:495:25: ^( FUZZY number )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FUZZY, "FUZZY"), root_1);
                            adaptor.addChild(root_1, stream_number.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fuzzy"

    public static class slop_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "slop"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:498:1: slop : TILDA DECIMAL_INTEGER_LITERAL -> ^( FUZZY DECIMAL_INTEGER_LITERAL ) ;
    public final FTSParser.slop_return slop() throws RecognitionException
    {
        FTSParser.slop_return retval = new FTSParser.slop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TILDA58 = null;
        Token DECIMAL_INTEGER_LITERAL59 = null;

        Object TILDA58_tree = null;
        Object DECIMAL_INTEGER_LITERAL59_tree = null;
        RewriteRuleTokenStream stream_DECIMAL_INTEGER_LITERAL = new RewriteRuleTokenStream(adaptor, "token DECIMAL_INTEGER_LITERAL");
        RewriteRuleTokenStream stream_TILDA = new RewriteRuleTokenStream(adaptor, "token TILDA");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:499:9: ( TILDA DECIMAL_INTEGER_LITERAL -> ^( FUZZY DECIMAL_INTEGER_LITERAL ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:500:9: TILDA DECIMAL_INTEGER_LITERAL
            {
                TILDA58 = (Token) match(input, TILDA, FOLLOW_TILDA_in_slop2517);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TILDA.add(TILDA58);

                DECIMAL_INTEGER_LITERAL59 = (Token) match(input, DECIMAL_INTEGER_LITERAL, FOLLOW_DECIMAL_INTEGER_LITERAL_in_slop2519);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_DECIMAL_INTEGER_LITERAL.add(DECIMAL_INTEGER_LITERAL59);

                // AST REWRITE
                // elements: DECIMAL_INTEGER_LITERAL
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 501:17: -> ^( FUZZY DECIMAL_INTEGER_LITERAL )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:502:25: ^( FUZZY DECIMAL_INTEGER_LITERAL )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FUZZY, "FUZZY"), root_1);
                            adaptor.addChild(root_1, stream_DECIMAL_INTEGER_LITERAL.nextNode());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "slop"

    public static class boost_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "boost"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:505:1: boost : CARAT number -> ^( BOOST number ) ;
    public final FTSParser.boost_return boost() throws RecognitionException
    {
        FTSParser.boost_return retval = new FTSParser.boost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token CARAT60 = null;
        ParserRuleReturnScope number61 = null;

        Object CARAT60_tree = null;
        RewriteRuleTokenStream stream_CARAT = new RewriteRuleTokenStream(adaptor, "token CARAT");
        RewriteRuleSubtreeStream stream_number = new RewriteRuleSubtreeStream(adaptor, "rule number");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:506:9: ( CARAT number -> ^( BOOST number ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:507:9: CARAT number
            {
                CARAT60 = (Token) match(input, CARAT, FOLLOW_CARAT_in_boost2600);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_CARAT.add(CARAT60);

                pushFollow(FOLLOW_number_in_boost2602);
                number61 = number();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_number.add(number61.getTree());
                // AST REWRITE
                // elements: number
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 508:17: -> ^( BOOST number )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:509:25: ^( BOOST number )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(BOOST, "BOOST"), root_1);
                            adaptor.addChild(root_1, stream_number.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boost"

    public static class ftsTermOrPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsTermOrPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:512:1: ftsTermOrPhrase : ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) );
    public final FTSParser.ftsTermOrPhrase_return ftsTermOrPhrase() throws RecognitionException
    {
        FTSParser.ftsTermOrPhrase_return retval = new FTSParser.ftsTermOrPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON63 = null;
        Token FTSPHRASE64 = null;
        Token COLON69 = null;
        Token FTSPHRASE70 = null;
        Token FTSPHRASE74 = null;
        ParserRuleReturnScope fieldReferenceWithPrefix62 = null;
        ParserRuleReturnScope slop65 = null;
        ParserRuleReturnScope ftsWord66 = null;
        ParserRuleReturnScope fuzzy67 = null;
        ParserRuleReturnScope fieldReferenceWithoutPrefix68 = null;
        ParserRuleReturnScope slop71 = null;
        ParserRuleReturnScope ftsWord72 = null;
        ParserRuleReturnScope fuzzy73 = null;
        ParserRuleReturnScope slop75 = null;
        ParserRuleReturnScope ftsWord76 = null;
        ParserRuleReturnScope fuzzy77 = null;

        Object COLON63_tree = null;
        Object FTSPHRASE64_tree = null;
        Object COLON69_tree = null;
        Object FTSPHRASE70_tree = null;
        Object FTSPHRASE74_tree = null;
        RewriteRuleTokenStream stream_FTSPHRASE = new RewriteRuleTokenStream(adaptor, "token FTSPHRASE");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_fieldReferenceWithoutPrefix = new RewriteRuleSubtreeStream(adaptor, "rule fieldReferenceWithoutPrefix");
        RewriteRuleSubtreeStream stream_ftsWord = new RewriteRuleSubtreeStream(adaptor, "rule ftsWord");
        RewriteRuleSubtreeStream stream_fuzzy = new RewriteRuleSubtreeStream(adaptor, "rule fuzzy");
        RewriteRuleSubtreeStream stream_fieldReferenceWithPrefix = new RewriteRuleSubtreeStream(adaptor, "rule fieldReferenceWithPrefix");
        RewriteRuleSubtreeStream stream_slop = new RewriteRuleSubtreeStream(adaptor, "rule slop");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:513:9: ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) )
            int alt30 = 4;
            alt30 = dfa30.predict(input);
            switch (alt30)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:514:9: ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) )
            {
                pushFollow(FOLLOW_fieldReferenceWithPrefix_in_ftsTermOrPhrase2691);
                fieldReferenceWithPrefix62 = fieldReferenceWithPrefix();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_fieldReferenceWithPrefix.add(fieldReferenceWithPrefix62.getTree());
                COLON63 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsTermOrPhrase2693);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_COLON.add(COLON63);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:515:9: ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) )
                int alt24 = 2;
                int LA24_0 = input.LA(1);
                if ((LA24_0 == FTSPHRASE))
                {
                    alt24 = 1;
                }
                else if ((LA24_0 == COMMA || LA24_0 == DATETIME || LA24_0 == DECIMAL_INTEGER_LITERAL || LA24_0 == DOT || LA24_0 == FLOATING_POINT_LITERAL || (LA24_0 >= FTSPRE && LA24_0 <= FTSWORD) || LA24_0 == ID || LA24_0 == NOT || LA24_0 == QUESTION_MARK || LA24_0 == STAR || LA24_0 == TO || LA24_0 == URI))
                {
                    alt24 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
                    throw nvae;
                }

                switch (alt24)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:516:17: FTSPHRASE ( ( slop )=> slop )?
                {
                    FTSPHRASE64 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsTermOrPhrase2721);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_FTSPHRASE.add(FTSPHRASE64);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:516:27: ( ( slop )=> slop )?
                    int alt22 = 2;
                    int LA22_0 = input.LA(1);
                    if ((LA22_0 == TILDA))
                    {
                        int LA22_1 = input.LA(2);
                        if ((LA22_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA22_3 = input.LA(3);
                            if ((synpred9_FTS()))
                            {
                                alt22 = 1;
                            }
                        }
                    }
                    switch (alt22)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:516:28: ( slop )=> slop
                    {
                        pushFollow(FOLLOW_slop_in_ftsTermOrPhrase2729);
                        slop65 = slop();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_slop.add(slop65.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: fieldReferenceWithPrefix, slop, FTSPHRASE
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 517:17: -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:517:20: ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                                adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                adaptor.addChild(root_1, stream_fieldReferenceWithPrefix.nextTree());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:517:64: ( slop )?
                                if (stream_slop.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_slop.nextTree());
                                }
                                stream_slop.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;
                case 2:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:519:17: ftsWord ( ( fuzzy )=> fuzzy )?
                {
                    pushFollow(FOLLOW_ftsWord_in_ftsTermOrPhrase2796);
                    ftsWord66 = ftsWord();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_ftsWord.add(ftsWord66.getTree());
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:519:25: ( ( fuzzy )=> fuzzy )?
                    int alt23 = 2;
                    int LA23_0 = input.LA(1);
                    if ((LA23_0 == TILDA))
                    {
                        int LA23_1 = input.LA(2);
                        if ((LA23_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA23_3 = input.LA(3);
                            if ((synpred10_FTS()))
                            {
                                alt23 = 1;
                            }
                        }
                        else if ((LA23_1 == FLOATING_POINT_LITERAL))
                        {
                            int LA23_4 = input.LA(3);
                            if ((synpred10_FTS()))
                            {
                                alt23 = 1;
                            }
                        }
                    }
                    switch (alt23)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:519:26: ( fuzzy )=> fuzzy
                    {
                        pushFollow(FOLLOW_fuzzy_in_ftsTermOrPhrase2805);
                        fuzzy67 = fuzzy();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_fuzzy.add(fuzzy67.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: fuzzy, ftsWord, fieldReferenceWithPrefix
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 520:17: -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:520:20: ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                                adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                adaptor.addChild(root_1, stream_fieldReferenceWithPrefix.nextTree());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:520:60: ( fuzzy )?
                                if (stream_fuzzy.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                }
                                stream_fuzzy.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;

                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:523:9: ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) )
            {
                pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_ftsTermOrPhrase2874);
                fieldReferenceWithoutPrefix68 = fieldReferenceWithoutPrefix();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_fieldReferenceWithoutPrefix.add(fieldReferenceWithoutPrefix68.getTree());
                COLON69 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsTermOrPhrase2876);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_COLON.add(COLON69);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:524:9: ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) )
                int alt27 = 2;
                int LA27_0 = input.LA(1);
                if ((LA27_0 == FTSPHRASE))
                {
                    alt27 = 1;
                }
                else if ((LA27_0 == COMMA || LA27_0 == DATETIME || LA27_0 == DECIMAL_INTEGER_LITERAL || LA27_0 == DOT || LA27_0 == FLOATING_POINT_LITERAL || (LA27_0 >= FTSPRE && LA27_0 <= FTSWORD) || LA27_0 == ID || LA27_0 == NOT || LA27_0 == QUESTION_MARK || LA27_0 == STAR || LA27_0 == TO || LA27_0 == URI))
                {
                    alt27 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
                    throw nvae;
                }

                switch (alt27)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:525:17: FTSPHRASE ( ( slop )=> slop )?
                {
                    FTSPHRASE70 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsTermOrPhrase2904);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_FTSPHRASE.add(FTSPHRASE70);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:525:27: ( ( slop )=> slop )?
                    int alt25 = 2;
                    int LA25_0 = input.LA(1);
                    if ((LA25_0 == TILDA))
                    {
                        int LA25_1 = input.LA(2);
                        if ((LA25_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA25_3 = input.LA(3);
                            if ((synpred12_FTS()))
                            {
                                alt25 = 1;
                            }
                        }
                    }
                    switch (alt25)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:525:28: ( slop )=> slop
                    {
                        pushFollow(FOLLOW_slop_in_ftsTermOrPhrase2912);
                        slop71 = slop();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_slop.add(slop71.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: slop, FTSPHRASE, fieldReferenceWithoutPrefix
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 526:17: -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:526:20: ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                                adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                adaptor.addChild(root_1, stream_fieldReferenceWithoutPrefix.nextTree());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:526:67: ( slop )?
                                if (stream_slop.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_slop.nextTree());
                                }
                                stream_slop.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;
                case 2:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:528:17: ftsWord ( ( fuzzy )=> fuzzy )?
                {
                    pushFollow(FOLLOW_ftsWord_in_ftsTermOrPhrase2979);
                    ftsWord72 = ftsWord();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_ftsWord.add(ftsWord72.getTree());
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:528:25: ( ( fuzzy )=> fuzzy )?
                    int alt26 = 2;
                    int LA26_0 = input.LA(1);
                    if ((LA26_0 == TILDA))
                    {
                        int LA26_1 = input.LA(2);
                        if ((LA26_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA26_3 = input.LA(3);
                            if ((synpred13_FTS()))
                            {
                                alt26 = 1;
                            }
                        }
                        else if ((LA26_1 == FLOATING_POINT_LITERAL))
                        {
                            int LA26_4 = input.LA(3);
                            if ((synpred13_FTS()))
                            {
                                alt26 = 1;
                            }
                        }
                    }
                    switch (alt26)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:528:26: ( fuzzy )=> fuzzy
                    {
                        pushFollow(FOLLOW_fuzzy_in_ftsTermOrPhrase2988);
                        fuzzy73 = fuzzy();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_fuzzy.add(fuzzy73.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: ftsWord, fuzzy, fieldReferenceWithoutPrefix
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 529:17: -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:529:20: ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                                adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                adaptor.addChild(root_1, stream_fieldReferenceWithoutPrefix.nextTree());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:529:63: ( fuzzy )?
                                if (stream_fuzzy.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                }
                                stream_fuzzy.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;

                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:532:9: FTSPHRASE ( ( slop )=> slop )?
            {
                FTSPHRASE74 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsTermOrPhrase3049);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_FTSPHRASE.add(FTSPHRASE74);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:532:19: ( ( slop )=> slop )?
                int alt28 = 2;
                int LA28_0 = input.LA(1);
                if ((LA28_0 == TILDA))
                {
                    int LA28_1 = input.LA(2);
                    if ((LA28_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA28_3 = input.LA(3);
                        if ((synpred14_FTS()))
                        {
                            alt28 = 1;
                        }
                    }
                }
                switch (alt28)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:532:20: ( slop )=> slop
                {
                    pushFollow(FOLLOW_slop_in_ftsTermOrPhrase3057);
                    slop75 = slop();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_slop.add(slop75.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: FTSPHRASE, slop
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 533:17: -> ^( PHRASE FTSPHRASE ( slop )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:533:20: ^( PHRASE FTSPHRASE ( slop )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                            adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:533:39: ( slop )?
                            if (stream_slop.hasNext())
                            {
                                adaptor.addChild(root_1, stream_slop.nextTree());
                            }
                            stream_slop.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:535:9: ftsWord ( ( fuzzy )=> fuzzy )?
            {
                pushFollow(FOLLOW_ftsWord_in_ftsTermOrPhrase3107);
                ftsWord76 = ftsWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsWord.add(ftsWord76.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:535:17: ( ( fuzzy )=> fuzzy )?
                int alt29 = 2;
                int LA29_0 = input.LA(1);
                if ((LA29_0 == TILDA))
                {
                    int LA29_1 = input.LA(2);
                    if ((LA29_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA29_3 = input.LA(3);
                        if ((synpred15_FTS()))
                        {
                            alt29 = 1;
                        }
                    }
                    else if ((LA29_1 == FLOATING_POINT_LITERAL))
                    {
                        int LA29_4 = input.LA(3);
                        if ((synpred15_FTS()))
                        {
                            alt29 = 1;
                        }
                    }
                }
                switch (alt29)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:535:18: ( fuzzy )=> fuzzy
                {
                    pushFollow(FOLLOW_fuzzy_in_ftsTermOrPhrase3116);
                    fuzzy77 = fuzzy();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fuzzy.add(fuzzy77.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsWord, fuzzy
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 536:17: -> ^( TERM ftsWord ( fuzzy )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:536:20: ^( TERM ftsWord ( fuzzy )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                            adaptor.addChild(root_1, stream_ftsWord.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:536:35: ( fuzzy )?
                            if (stream_fuzzy.hasNext())
                            {
                                adaptor.addChild(root_1, stream_fuzzy.nextTree());
                            }
                            stream_fuzzy.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsTermOrPhrase"

    public static class ftsExactTermOrPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsExactTermOrPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:540:1: ftsExactTermOrPhrase : EQUALS ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord ( fuzzy )? ) ) ;
    public final FTSParser.ftsExactTermOrPhrase_return ftsExactTermOrPhrase() throws RecognitionException
    {
        FTSParser.ftsExactTermOrPhrase_return retval = new FTSParser.ftsExactTermOrPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS78 = null;
        Token COLON80 = null;
        Token FTSPHRASE81 = null;
        Token COLON86 = null;
        Token FTSPHRASE87 = null;
        Token FTSPHRASE91 = null;
        ParserRuleReturnScope fieldReferenceWithPrefix79 = null;
        ParserRuleReturnScope slop82 = null;
        ParserRuleReturnScope ftsWord83 = null;
        ParserRuleReturnScope fuzzy84 = null;
        ParserRuleReturnScope fieldReferenceWithoutPrefix85 = null;
        ParserRuleReturnScope slop88 = null;
        ParserRuleReturnScope ftsWord89 = null;
        ParserRuleReturnScope fuzzy90 = null;
        ParserRuleReturnScope slop92 = null;
        ParserRuleReturnScope ftsWord93 = null;
        ParserRuleReturnScope fuzzy94 = null;

        Object EQUALS78_tree = null;
        Object COLON80_tree = null;
        Object FTSPHRASE81_tree = null;
        Object COLON86_tree = null;
        Object FTSPHRASE87_tree = null;
        Object FTSPHRASE91_tree = null;
        RewriteRuleTokenStream stream_FTSPHRASE = new RewriteRuleTokenStream(adaptor, "token FTSPHRASE");
        RewriteRuleTokenStream stream_EQUALS = new RewriteRuleTokenStream(adaptor, "token EQUALS");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_fieldReferenceWithoutPrefix = new RewriteRuleSubtreeStream(adaptor, "rule fieldReferenceWithoutPrefix");
        RewriteRuleSubtreeStream stream_ftsWord = new RewriteRuleSubtreeStream(adaptor, "rule ftsWord");
        RewriteRuleSubtreeStream stream_fuzzy = new RewriteRuleSubtreeStream(adaptor, "rule fuzzy");
        RewriteRuleSubtreeStream stream_fieldReferenceWithPrefix = new RewriteRuleSubtreeStream(adaptor, "rule fieldReferenceWithPrefix");
        RewriteRuleSubtreeStream stream_slop = new RewriteRuleSubtreeStream(adaptor, "rule slop");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:541:9: ( EQUALS ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord ( fuzzy )? ) ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:542:9: EQUALS ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord ( fuzzy )? ) )
            {
                EQUALS78 = (Token) match(input, EQUALS, FOLLOW_EQUALS_in_ftsExactTermOrPhrase3195);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_EQUALS.add(EQUALS78);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:543:9: ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord ( fuzzy )? ) )
                int alt39 = 4;
                alt39 = dfa39.predict(input);
                switch (alt39)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:544:9: ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) )
                {
                    pushFollow(FOLLOW_fieldReferenceWithPrefix_in_ftsExactTermOrPhrase3223);
                    fieldReferenceWithPrefix79 = fieldReferenceWithPrefix();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fieldReferenceWithPrefix.add(fieldReferenceWithPrefix79.getTree());
                    COLON80 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsExactTermOrPhrase3225);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_COLON.add(COLON80);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:545:9: ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) )
                    int alt33 = 2;
                    int LA33_0 = input.LA(1);
                    if ((LA33_0 == FTSPHRASE))
                    {
                        alt33 = 1;
                    }
                    else if ((LA33_0 == COMMA || LA33_0 == DATETIME || LA33_0 == DECIMAL_INTEGER_LITERAL || LA33_0 == DOT || LA33_0 == FLOATING_POINT_LITERAL || (LA33_0 >= FTSPRE && LA33_0 <= FTSWORD) || LA33_0 == ID || LA33_0 == NOT || LA33_0 == QUESTION_MARK || LA33_0 == STAR || LA33_0 == TO || LA33_0 == URI))
                    {
                        alt33 = 2;
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
                        throw nvae;
                    }

                    switch (alt33)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:546:17: FTSPHRASE ( ( slop )=> slop )?
                    {
                        FTSPHRASE81 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsExactTermOrPhrase3253);
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_FTSPHRASE.add(FTSPHRASE81);

                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:546:27: ( ( slop )=> slop )?
                        int alt31 = 2;
                        int LA31_0 = input.LA(1);
                        if ((LA31_0 == TILDA))
                        {
                            int LA31_1 = input.LA(2);
                            if ((LA31_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA31_3 = input.LA(3);
                                if ((synpred17_FTS()))
                                {
                                    alt31 = 1;
                                }
                            }
                        }
                        switch (alt31)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:546:28: ( slop )=> slop
                        {
                            pushFollow(FOLLOW_slop_in_ftsExactTermOrPhrase3261);
                            slop82 = slop();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_slop.add(slop82.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: slop, fieldReferenceWithPrefix, FTSPHRASE
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 547:17: -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:547:20: ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXACT_PHRASE, "EXACT_PHRASE"), root_1);
                                    adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:547:70: ( slop )?
                                    if (stream_slop.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_slop.nextTree());
                                    }
                                    stream_slop.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;
                    case 2:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:549:17: ftsWord ( ( fuzzy )=> fuzzy )?
                    {
                        pushFollow(FOLLOW_ftsWord_in_ftsExactTermOrPhrase3328);
                        ftsWord83 = ftsWord();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsWord.add(ftsWord83.getTree());
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:549:25: ( ( fuzzy )=> fuzzy )?
                        int alt32 = 2;
                        int LA32_0 = input.LA(1);
                        if ((LA32_0 == TILDA))
                        {
                            int LA32_1 = input.LA(2);
                            if ((LA32_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA32_3 = input.LA(3);
                                if ((synpred18_FTS()))
                                {
                                    alt32 = 1;
                                }
                            }
                            else if ((LA32_1 == FLOATING_POINT_LITERAL))
                            {
                                int LA32_4 = input.LA(3);
                                if ((synpred18_FTS()))
                                {
                                    alt32 = 1;
                                }
                            }
                        }
                        switch (alt32)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:549:26: ( fuzzy )=> fuzzy
                        {
                            pushFollow(FOLLOW_fuzzy_in_ftsExactTermOrPhrase3337);
                            fuzzy84 = fuzzy();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_fuzzy.add(fuzzy84.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: ftsWord, fieldReferenceWithPrefix, fuzzy
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 550:17: -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:550:20: ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXACT_TERM, "EXACT_TERM"), root_1);
                                    adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:550:66: ( fuzzy )?
                                    if (stream_fuzzy.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                    }
                                    stream_fuzzy.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;

                    }

                }
                    break;
                case 2:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:553:9: ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) )
                {
                    pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_ftsExactTermOrPhrase3406);
                    fieldReferenceWithoutPrefix85 = fieldReferenceWithoutPrefix();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fieldReferenceWithoutPrefix.add(fieldReferenceWithoutPrefix85.getTree());
                    COLON86 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsExactTermOrPhrase3408);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_COLON.add(COLON86);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:554:9: ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) )
                    int alt36 = 2;
                    int LA36_0 = input.LA(1);
                    if ((LA36_0 == FTSPHRASE))
                    {
                        alt36 = 1;
                    }
                    else if ((LA36_0 == COMMA || LA36_0 == DATETIME || LA36_0 == DECIMAL_INTEGER_LITERAL || LA36_0 == DOT || LA36_0 == FLOATING_POINT_LITERAL || (LA36_0 >= FTSPRE && LA36_0 <= FTSWORD) || LA36_0 == ID || LA36_0 == NOT || LA36_0 == QUESTION_MARK || LA36_0 == STAR || LA36_0 == TO || LA36_0 == URI))
                    {
                        alt36 = 2;
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
                        throw nvae;
                    }

                    switch (alt36)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:555:17: FTSPHRASE ( ( slop )=> slop )?
                    {
                        FTSPHRASE87 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsExactTermOrPhrase3436);
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_FTSPHRASE.add(FTSPHRASE87);

                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:555:27: ( ( slop )=> slop )?
                        int alt34 = 2;
                        int LA34_0 = input.LA(1);
                        if ((LA34_0 == TILDA))
                        {
                            int LA34_1 = input.LA(2);
                            if ((LA34_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA34_3 = input.LA(3);
                                if ((synpred20_FTS()))
                                {
                                    alt34 = 1;
                                }
                            }
                        }
                        switch (alt34)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:555:28: ( slop )=> slop
                        {
                            pushFollow(FOLLOW_slop_in_ftsExactTermOrPhrase3444);
                            slop88 = slop();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_slop.add(slop88.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: slop, fieldReferenceWithoutPrefix, FTSPHRASE
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 556:17: -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:556:20: ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXACT_PHRASE, "EXACT_PHRASE"), root_1);
                                    adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithoutPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:556:73: ( slop )?
                                    if (stream_slop.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_slop.nextTree());
                                    }
                                    stream_slop.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;
                    case 2:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:558:17: ftsWord ( ( fuzzy )=> fuzzy )?
                    {
                        pushFollow(FOLLOW_ftsWord_in_ftsExactTermOrPhrase3511);
                        ftsWord89 = ftsWord();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsWord.add(ftsWord89.getTree());
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:558:25: ( ( fuzzy )=> fuzzy )?
                        int alt35 = 2;
                        int LA35_0 = input.LA(1);
                        if ((LA35_0 == TILDA))
                        {
                            int LA35_1 = input.LA(2);
                            if ((LA35_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA35_3 = input.LA(3);
                                if ((synpred21_FTS()))
                                {
                                    alt35 = 1;
                                }
                            }
                            else if ((LA35_1 == FLOATING_POINT_LITERAL))
                            {
                                int LA35_4 = input.LA(3);
                                if ((synpred21_FTS()))
                                {
                                    alt35 = 1;
                                }
                            }
                        }
                        switch (alt35)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:558:26: ( fuzzy )=> fuzzy
                        {
                            pushFollow(FOLLOW_fuzzy_in_ftsExactTermOrPhrase3520);
                            fuzzy90 = fuzzy();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_fuzzy.add(fuzzy90.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: fieldReferenceWithoutPrefix, ftsWord, fuzzy
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 559:17: -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:559:20: ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXACT_TERM, "EXACT_TERM"), root_1);
                                    adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithoutPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:559:69: ( fuzzy )?
                                    if (stream_fuzzy.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                    }
                                    stream_fuzzy.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;

                    }

                }
                    break;
                case 3:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:562:9: FTSPHRASE ( ( slop )=> slop )?
                {
                    FTSPHRASE91 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsExactTermOrPhrase3581);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_FTSPHRASE.add(FTSPHRASE91);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:562:19: ( ( slop )=> slop )?
                    int alt37 = 2;
                    int LA37_0 = input.LA(1);
                    if ((LA37_0 == TILDA))
                    {
                        int LA37_1 = input.LA(2);
                        if ((LA37_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA37_3 = input.LA(3);
                            if ((synpred22_FTS()))
                            {
                                alt37 = 1;
                            }
                        }
                    }
                    switch (alt37)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:562:20: ( slop )=> slop
                    {
                        pushFollow(FOLLOW_slop_in_ftsExactTermOrPhrase3589);
                        slop92 = slop();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_slop.add(slop92.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: FTSPHRASE, slop
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 563:17: -> ^( EXACT_PHRASE FTSPHRASE ( slop )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:563:20: ^( EXACT_PHRASE FTSPHRASE ( slop )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXACT_PHRASE, "EXACT_PHRASE"), root_1);
                                adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:563:45: ( slop )?
                                if (stream_slop.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_slop.nextTree());
                                }
                                stream_slop.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;
                case 4:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:565:9: ftsWord ( ( fuzzy )=> fuzzy )?
                {
                    pushFollow(FOLLOW_ftsWord_in_ftsExactTermOrPhrase3639);
                    ftsWord93 = ftsWord();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_ftsWord.add(ftsWord93.getTree());
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:565:17: ( ( fuzzy )=> fuzzy )?
                    int alt38 = 2;
                    int LA38_0 = input.LA(1);
                    if ((LA38_0 == TILDA))
                    {
                        int LA38_1 = input.LA(2);
                        if ((LA38_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA38_3 = input.LA(3);
                            if ((synpred23_FTS()))
                            {
                                alt38 = 1;
                            }
                        }
                        else if ((LA38_1 == FLOATING_POINT_LITERAL))
                        {
                            int LA38_4 = input.LA(3);
                            if ((synpred23_FTS()))
                            {
                                alt38 = 1;
                            }
                        }
                    }
                    switch (alt38)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:565:18: ( fuzzy )=> fuzzy
                    {
                        pushFollow(FOLLOW_fuzzy_in_ftsExactTermOrPhrase3648);
                        fuzzy94 = fuzzy();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_fuzzy.add(fuzzy94.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: ftsWord, fuzzy
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 566:17: -> ^( EXACT_TERM ftsWord ( fuzzy )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:566:20: ^( EXACT_TERM ftsWord ( fuzzy )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(EXACT_TERM, "EXACT_TERM"), root_1);
                                adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:566:41: ( fuzzy )?
                                if (stream_fuzzy.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                }
                                stream_fuzzy.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsExactTermOrPhrase"

    public static class ftsTokenisedTermOrPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsTokenisedTermOrPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:571:1: ftsTokenisedTermOrPhrase : TILDA ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) ) ;
    public final FTSParser.ftsTokenisedTermOrPhrase_return ftsTokenisedTermOrPhrase() throws RecognitionException
    {
        FTSParser.ftsTokenisedTermOrPhrase_return retval = new FTSParser.ftsTokenisedTermOrPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TILDA95 = null;
        Token COLON97 = null;
        Token FTSPHRASE98 = null;
        Token COLON103 = null;
        Token FTSPHRASE104 = null;
        Token FTSPHRASE108 = null;
        ParserRuleReturnScope fieldReferenceWithPrefix96 = null;
        ParserRuleReturnScope slop99 = null;
        ParserRuleReturnScope ftsWord100 = null;
        ParserRuleReturnScope fuzzy101 = null;
        ParserRuleReturnScope fieldReferenceWithoutPrefix102 = null;
        ParserRuleReturnScope slop105 = null;
        ParserRuleReturnScope ftsWord106 = null;
        ParserRuleReturnScope fuzzy107 = null;
        ParserRuleReturnScope slop109 = null;
        ParserRuleReturnScope ftsWord110 = null;
        ParserRuleReturnScope fuzzy111 = null;

        Object TILDA95_tree = null;
        Object COLON97_tree = null;
        Object FTSPHRASE98_tree = null;
        Object COLON103_tree = null;
        Object FTSPHRASE104_tree = null;
        Object FTSPHRASE108_tree = null;
        RewriteRuleTokenStream stream_FTSPHRASE = new RewriteRuleTokenStream(adaptor, "token FTSPHRASE");
        RewriteRuleTokenStream stream_TILDA = new RewriteRuleTokenStream(adaptor, "token TILDA");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_fieldReferenceWithoutPrefix = new RewriteRuleSubtreeStream(adaptor, "rule fieldReferenceWithoutPrefix");
        RewriteRuleSubtreeStream stream_ftsWord = new RewriteRuleSubtreeStream(adaptor, "rule ftsWord");
        RewriteRuleSubtreeStream stream_fuzzy = new RewriteRuleSubtreeStream(adaptor, "rule fuzzy");
        RewriteRuleSubtreeStream stream_fieldReferenceWithPrefix = new RewriteRuleSubtreeStream(adaptor, "rule fieldReferenceWithPrefix");
        RewriteRuleSubtreeStream stream_slop = new RewriteRuleSubtreeStream(adaptor, "rule slop");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:572:9: ( TILDA ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:573:9: TILDA ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) )
            {
                TILDA95 = (Token) match(input, TILDA, FOLLOW_TILDA_in_ftsTokenisedTermOrPhrase3729);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TILDA.add(TILDA95);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:574:9: ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) )
                int alt48 = 4;
                alt48 = dfa48.predict(input);
                switch (alt48)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:575:9: ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) )
                {
                    pushFollow(FOLLOW_fieldReferenceWithPrefix_in_ftsTokenisedTermOrPhrase3757);
                    fieldReferenceWithPrefix96 = fieldReferenceWithPrefix();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fieldReferenceWithPrefix.add(fieldReferenceWithPrefix96.getTree());
                    COLON97 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsTokenisedTermOrPhrase3759);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_COLON.add(COLON97);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:576:9: ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) )
                    int alt42 = 2;
                    int LA42_0 = input.LA(1);
                    if ((LA42_0 == FTSPHRASE))
                    {
                        alt42 = 1;
                    }
                    else if ((LA42_0 == COMMA || LA42_0 == DATETIME || LA42_0 == DECIMAL_INTEGER_LITERAL || LA42_0 == DOT || LA42_0 == FLOATING_POINT_LITERAL || (LA42_0 >= FTSPRE && LA42_0 <= FTSWORD) || LA42_0 == ID || LA42_0 == NOT || LA42_0 == QUESTION_MARK || LA42_0 == STAR || LA42_0 == TO || LA42_0 == URI))
                    {
                        alt42 = 2;
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
                        throw nvae;
                    }

                    switch (alt42)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:577:17: FTSPHRASE ( ( slop )=> slop )?
                    {
                        FTSPHRASE98 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsTokenisedTermOrPhrase3787);
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_FTSPHRASE.add(FTSPHRASE98);

                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:577:27: ( ( slop )=> slop )?
                        int alt40 = 2;
                        int LA40_0 = input.LA(1);
                        if ((LA40_0 == TILDA))
                        {
                            int LA40_1 = input.LA(2);
                            if ((LA40_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA40_3 = input.LA(3);
                                if ((synpred25_FTS()))
                                {
                                    alt40 = 1;
                                }
                            }
                        }
                        switch (alt40)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:577:28: ( slop )=> slop
                        {
                            pushFollow(FOLLOW_slop_in_ftsTokenisedTermOrPhrase3795);
                            slop99 = slop();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_slop.add(slop99.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: FTSPHRASE, fieldReferenceWithPrefix, slop
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 578:17: -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:578:20: ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                                    adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:578:64: ( slop )?
                                    if (stream_slop.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_slop.nextTree());
                                    }
                                    stream_slop.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;
                    case 2:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:580:17: ftsWord ( ( fuzzy )=> fuzzy )?
                    {
                        pushFollow(FOLLOW_ftsWord_in_ftsTokenisedTermOrPhrase3862);
                        ftsWord100 = ftsWord();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsWord.add(ftsWord100.getTree());
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:580:25: ( ( fuzzy )=> fuzzy )?
                        int alt41 = 2;
                        int LA41_0 = input.LA(1);
                        if ((LA41_0 == TILDA))
                        {
                            int LA41_1 = input.LA(2);
                            if ((LA41_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA41_3 = input.LA(3);
                                if ((synpred26_FTS()))
                                {
                                    alt41 = 1;
                                }
                            }
                            else if ((LA41_1 == FLOATING_POINT_LITERAL))
                            {
                                int LA41_4 = input.LA(3);
                                if ((synpred26_FTS()))
                                {
                                    alt41 = 1;
                                }
                            }
                        }
                        switch (alt41)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:580:26: ( fuzzy )=> fuzzy
                        {
                            pushFollow(FOLLOW_fuzzy_in_ftsTokenisedTermOrPhrase3871);
                            fuzzy101 = fuzzy();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_fuzzy.add(fuzzy101.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: fieldReferenceWithPrefix, fuzzy, ftsWord
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 581:17: -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:581:20: ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                                    adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:581:60: ( fuzzy )?
                                    if (stream_fuzzy.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                    }
                                    stream_fuzzy.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;

                    }

                }
                    break;
                case 2:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:584:9: ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) )
                {
                    pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_ftsTokenisedTermOrPhrase3940);
                    fieldReferenceWithoutPrefix102 = fieldReferenceWithoutPrefix();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fieldReferenceWithoutPrefix.add(fieldReferenceWithoutPrefix102.getTree());
                    COLON103 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsTokenisedTermOrPhrase3942);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_COLON.add(COLON103);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:585:9: ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) )
                    int alt45 = 2;
                    int LA45_0 = input.LA(1);
                    if ((LA45_0 == FTSPHRASE))
                    {
                        alt45 = 1;
                    }
                    else if ((LA45_0 == COMMA || LA45_0 == DATETIME || LA45_0 == DECIMAL_INTEGER_LITERAL || LA45_0 == DOT || LA45_0 == FLOATING_POINT_LITERAL || (LA45_0 >= FTSPRE && LA45_0 <= FTSWORD) || LA45_0 == ID || LA45_0 == NOT || LA45_0 == QUESTION_MARK || LA45_0 == STAR || LA45_0 == TO || LA45_0 == URI))
                    {
                        alt45 = 2;
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
                        throw nvae;
                    }

                    switch (alt45)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:586:17: FTSPHRASE ( ( slop )=> slop )?
                    {
                        FTSPHRASE104 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsTokenisedTermOrPhrase3970);
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_FTSPHRASE.add(FTSPHRASE104);

                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:586:27: ( ( slop )=> slop )?
                        int alt43 = 2;
                        int LA43_0 = input.LA(1);
                        if ((LA43_0 == TILDA))
                        {
                            int LA43_1 = input.LA(2);
                            if ((LA43_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA43_3 = input.LA(3);
                                if ((synpred28_FTS()))
                                {
                                    alt43 = 1;
                                }
                            }
                        }
                        switch (alt43)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:586:28: ( slop )=> slop
                        {
                            pushFollow(FOLLOW_slop_in_ftsTokenisedTermOrPhrase3978);
                            slop105 = slop();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_slop.add(slop105.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: slop, FTSPHRASE, fieldReferenceWithoutPrefix
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 587:17: -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:587:20: ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                                    adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithoutPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:587:67: ( slop )?
                                    if (stream_slop.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_slop.nextTree());
                                    }
                                    stream_slop.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;
                    case 2:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:589:17: ftsWord ( ( fuzzy )=> fuzzy )?
                    {
                        pushFollow(FOLLOW_ftsWord_in_ftsTokenisedTermOrPhrase4045);
                        ftsWord106 = ftsWord();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsWord.add(ftsWord106.getTree());
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:589:25: ( ( fuzzy )=> fuzzy )?
                        int alt44 = 2;
                        int LA44_0 = input.LA(1);
                        if ((LA44_0 == TILDA))
                        {
                            int LA44_1 = input.LA(2);
                            if ((LA44_1 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA44_3 = input.LA(3);
                                if ((synpred29_FTS()))
                                {
                                    alt44 = 1;
                                }
                            }
                            else if ((LA44_1 == FLOATING_POINT_LITERAL))
                            {
                                int LA44_4 = input.LA(3);
                                if ((synpred29_FTS()))
                                {
                                    alt44 = 1;
                                }
                            }
                        }
                        switch (alt44)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:589:26: ( fuzzy )=> fuzzy
                        {
                            pushFollow(FOLLOW_fuzzy_in_ftsTokenisedTermOrPhrase4054);
                            fuzzy107 = fuzzy();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_fuzzy.add(fuzzy107.getTree());
                        }
                            break;

                        }

                        // AST REWRITE
                        // elements: fuzzy, fieldReferenceWithoutPrefix, ftsWord
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                            root_0 = (Object) adaptor.nil();
                            // 590:17: -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? )
                            {
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:590:20: ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? )
                                {
                                    Object root_1 = (Object) adaptor.nil();
                                    root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                                    adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                    adaptor.addChild(root_1, stream_fieldReferenceWithoutPrefix.nextTree());
                                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:590:63: ( fuzzy )?
                                    if (stream_fuzzy.hasNext())
                                    {
                                        adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                    }
                                    stream_fuzzy.reset();

                                    adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;
                        }

                    }
                        break;

                    }

                }
                    break;
                case 3:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:593:9: FTSPHRASE ( ( slop )=> slop )?
                {
                    FTSPHRASE108 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsTokenisedTermOrPhrase4115);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_FTSPHRASE.add(FTSPHRASE108);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:593:19: ( ( slop )=> slop )?
                    int alt46 = 2;
                    int LA46_0 = input.LA(1);
                    if ((LA46_0 == TILDA))
                    {
                        int LA46_1 = input.LA(2);
                        if ((LA46_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA46_3 = input.LA(3);
                            if ((synpred30_FTS()))
                            {
                                alt46 = 1;
                            }
                        }
                    }
                    switch (alt46)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:593:20: ( slop )=> slop
                    {
                        pushFollow(FOLLOW_slop_in_ftsTokenisedTermOrPhrase4123);
                        slop109 = slop();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_slop.add(slop109.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: FTSPHRASE, slop
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 594:17: -> ^( PHRASE FTSPHRASE ( slop )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:594:20: ^( PHRASE FTSPHRASE ( slop )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PHRASE, "PHRASE"), root_1);
                                adaptor.addChild(root_1, stream_FTSPHRASE.nextNode());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:594:39: ( slop )?
                                if (stream_slop.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_slop.nextTree());
                                }
                                stream_slop.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;
                case 4:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:596:9: ftsWord ( ( fuzzy )=> fuzzy )?
                {
                    pushFollow(FOLLOW_ftsWord_in_ftsTokenisedTermOrPhrase4173);
                    ftsWord110 = ftsWord();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_ftsWord.add(ftsWord110.getTree());
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:596:17: ( ( fuzzy )=> fuzzy )?
                    int alt47 = 2;
                    int LA47_0 = input.LA(1);
                    if ((LA47_0 == TILDA))
                    {
                        int LA47_1 = input.LA(2);
                        if ((LA47_1 == DECIMAL_INTEGER_LITERAL))
                        {
                            int LA47_3 = input.LA(3);
                            if ((synpred31_FTS()))
                            {
                                alt47 = 1;
                            }
                        }
                        else if ((LA47_1 == FLOATING_POINT_LITERAL))
                        {
                            int LA47_4 = input.LA(3);
                            if ((synpred31_FTS()))
                            {
                                alt47 = 1;
                            }
                        }
                    }
                    switch (alt47)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:596:18: ( fuzzy )=> fuzzy
                    {
                        pushFollow(FOLLOW_fuzzy_in_ftsTokenisedTermOrPhrase4182);
                        fuzzy111 = fuzzy();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_fuzzy.add(fuzzy111.getTree());
                    }
                        break;

                    }

                    // AST REWRITE
                    // elements: ftsWord, fuzzy
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                        root_0 = (Object) adaptor.nil();
                        // 597:17: -> ^( TERM ftsWord ( fuzzy )? )
                        {
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:597:20: ^( TERM ftsWord ( fuzzy )? )
                            {
                                Object root_1 = (Object) adaptor.nil();
                                root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(TERM, "TERM"), root_1);
                                adaptor.addChild(root_1, stream_ftsWord.nextTree());
                                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:597:35: ( fuzzy )?
                                if (stream_fuzzy.hasNext())
                                {
                                    adaptor.addChild(root_1, stream_fuzzy.nextTree());
                                }
                                stream_fuzzy.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsTokenisedTermOrPhrase"

    public static class cmisTerm_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "cmisTerm"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:602:1: cmisTerm : ftsWord -> ftsWord ;
    public final FTSParser.cmisTerm_return cmisTerm() throws RecognitionException
    {
        FTSParser.cmisTerm_return retval = new FTSParser.cmisTerm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsWord112 = null;

        RewriteRuleSubtreeStream stream_ftsWord = new RewriteRuleSubtreeStream(adaptor, "rule ftsWord");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:603:9: ( ftsWord -> ftsWord )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:604:9: ftsWord
            {
                pushFollow(FOLLOW_ftsWord_in_cmisTerm4255);
                ftsWord112 = ftsWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsWord.add(ftsWord112.getTree());
                // AST REWRITE
                // elements: ftsWord
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 605:17: -> ftsWord
                    {
                        adaptor.addChild(root_0, stream_ftsWord.nextTree());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmisTerm"

    public static class cmisPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "cmisPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:609:1: cmisPhrase : FTSPHRASE -> FTSPHRASE ;
    public final FTSParser.cmisPhrase_return cmisPhrase() throws RecognitionException
    {
        FTSParser.cmisPhrase_return retval = new FTSParser.cmisPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FTSPHRASE113 = null;

        Object FTSPHRASE113_tree = null;
        RewriteRuleTokenStream stream_FTSPHRASE = new RewriteRuleTokenStream(adaptor, "token FTSPHRASE");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:610:9: ( FTSPHRASE -> FTSPHRASE )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:611:9: FTSPHRASE
            {
                FTSPHRASE113 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_cmisPhrase4309);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_FTSPHRASE.add(FTSPHRASE113);

                // AST REWRITE
                // elements: FTSPHRASE
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 612:17: -> FTSPHRASE
                    {
                        adaptor.addChild(root_0, stream_FTSPHRASE.nextNode());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cmisPhrase"

    public static class ftsRange_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsRange"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:616:1: ftsRange : ( fieldReference COLON )? ftsFieldGroupRange -> ftsFieldGroupRange ( fieldReference )? ;
    public final FTSParser.ftsRange_return ftsRange() throws RecognitionException
    {
        FTSParser.ftsRange_return retval = new FTSParser.ftsRange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON115 = null;
        ParserRuleReturnScope fieldReference114 = null;
        ParserRuleReturnScope ftsFieldGroupRange116 = null;

        Object COLON115_tree = null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_ftsFieldGroupRange = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupRange");
        RewriteRuleSubtreeStream stream_fieldReference = new RewriteRuleSubtreeStream(adaptor, "rule fieldReference");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:617:9: ( ( fieldReference COLON )? ftsFieldGroupRange -> ftsFieldGroupRange ( fieldReference )? )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:618:9: ( fieldReference COLON )? ftsFieldGroupRange
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:618:9: ( fieldReference COLON )?
                int alt49 = 2;
                switch (input.LA(1))
                {
                case AND:
                case AT:
                case NOT:
                case OR:
                case TO:
                {
                    alt49 = 1;
                }
                    break;
                case ID:
                {
                    int LA49_2 = input.LA(2);
                    if ((LA49_2 == COLON || LA49_2 == DOT))
                    {
                        alt49 = 1;
                    }
                }
                    break;
                case URI:
                {
                    switch (input.LA(2))
                    {
                    case ID:
                    {
                        int LA49_5 = input.LA(3);
                        if ((LA49_5 == DOT))
                        {
                            int LA49_10 = input.LA(4);
                            if ((LA49_10 == ID))
                            {
                                int LA49_11 = input.LA(5);
                                if ((LA49_11 == COLON))
                                {
                                    alt49 = 1;
                                }
                            }
                        }
                        else if ((LA49_5 == COLON))
                        {
                            alt49 = 1;
                        }
                    }
                        break;
                    case TO:
                    {
                        int LA49_6 = input.LA(3);
                        if ((LA49_6 == COLON))
                        {
                            alt49 = 1;
                        }
                    }
                        break;
                    case OR:
                    {
                        int LA49_7 = input.LA(3);
                        if ((LA49_7 == COLON))
                        {
                            alt49 = 1;
                        }
                    }
                        break;
                    case AND:
                    {
                        int LA49_8 = input.LA(3);
                        if ((LA49_8 == COLON))
                        {
                            alt49 = 1;
                        }
                    }
                        break;
                    case NOT:
                    {
                        int LA49_9 = input.LA(3);
                        if ((LA49_9 == COLON))
                        {
                            alt49 = 1;
                        }
                    }
                        break;
                    }
                }
                    break;
                }
                switch (alt49)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:618:10: fieldReference COLON
                {
                    pushFollow(FOLLOW_fieldReference_in_ftsRange4364);
                    fieldReference114 = fieldReference();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fieldReference.add(fieldReference114.getTree());
                    COLON115 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsRange4366);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_COLON.add(COLON115);

                }
                    break;

                }

                pushFollow(FOLLOW_ftsFieldGroupRange_in_ftsRange4370);
                ftsFieldGroupRange116 = ftsFieldGroupRange();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupRange.add(ftsFieldGroupRange116.getTree());
                // AST REWRITE
                // elements: fieldReference, ftsFieldGroupRange
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 619:17: -> ftsFieldGroupRange ( fieldReference )?
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupRange.nextTree());
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:619:39: ( fieldReference )?
                        if (stream_fieldReference.hasNext())
                        {
                            adaptor.addChild(root_0, stream_fieldReference.nextTree());
                        }
                        stream_fieldReference.reset();

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsRange"

    public static class ftsFieldGroup_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroup"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:622:1: ftsFieldGroup : fieldReference COLON LPAREN ftsFieldGroupDisjunction RPAREN -> ^( FIELD_GROUP fieldReference ftsFieldGroupDisjunction ) ;
    public final FTSParser.ftsFieldGroup_return ftsFieldGroup() throws RecognitionException
    {
        FTSParser.ftsFieldGroup_return retval = new FTSParser.ftsFieldGroup_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON118 = null;
        Token LPAREN119 = null;
        Token RPAREN121 = null;
        ParserRuleReturnScope fieldReference117 = null;
        ParserRuleReturnScope ftsFieldGroupDisjunction120 = null;

        Object COLON118_tree = null;
        Object LPAREN119_tree = null;
        Object RPAREN121_tree = null;
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_ftsFieldGroupDisjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupDisjunction");
        RewriteRuleSubtreeStream stream_fieldReference = new RewriteRuleSubtreeStream(adaptor, "rule fieldReference");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:623:9: ( fieldReference COLON LPAREN ftsFieldGroupDisjunction RPAREN -> ^( FIELD_GROUP fieldReference ftsFieldGroupDisjunction ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:624:9: fieldReference COLON LPAREN ftsFieldGroupDisjunction RPAREN
            {
                pushFollow(FOLLOW_fieldReference_in_ftsFieldGroup4426);
                fieldReference117 = fieldReference();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_fieldReference.add(fieldReference117.getTree());
                COLON118 = (Token) match(input, COLON, FOLLOW_COLON_in_ftsFieldGroup4428);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_COLON.add(COLON118);

                LPAREN119 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_ftsFieldGroup4430);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_LPAREN.add(LPAREN119);

                pushFollow(FOLLOW_ftsFieldGroupDisjunction_in_ftsFieldGroup4432);
                ftsFieldGroupDisjunction120 = ftsFieldGroupDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupDisjunction.add(ftsFieldGroupDisjunction120.getTree());
                RPAREN121 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_ftsFieldGroup4434);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_RPAREN.add(RPAREN121);

                // AST REWRITE
                // elements: fieldReference, ftsFieldGroupDisjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 625:17: -> ^( FIELD_GROUP fieldReference ftsFieldGroupDisjunction )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:626:25: ^( FIELD_GROUP fieldReference ftsFieldGroupDisjunction )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_GROUP, "FIELD_GROUP"), root_1);
                            adaptor.addChild(root_1, stream_fieldReference.nextTree());
                            adaptor.addChild(root_1, stream_ftsFieldGroupDisjunction.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroup"

    public static class ftsFieldGroupDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:629:1: ftsFieldGroupDisjunction : ({...}? ftsFieldGroupExplicitDisjunction |{...}? ftsFieldGroupImplicitDisjunction );
    public final FTSParser.ftsFieldGroupDisjunction_return ftsFieldGroupDisjunction() throws RecognitionException
    {
        FTSParser.ftsFieldGroupDisjunction_return retval = new FTSParser.ftsFieldGroupDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsFieldGroupExplicitDisjunction122 = null;
        ParserRuleReturnScope ftsFieldGroupImplicitDisjunction123 = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:630:9: ({...}? ftsFieldGroupExplicitDisjunction |{...}? ftsFieldGroupImplicitDisjunction )
            int alt50 = 2;
            switch (input.LA(1))
            {
            case AMP:
            case AND:
            {
                alt50 = 1;
            }
                break;
            case NOT:
            {
                int LA50_3 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 3, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case ID:
            {
                int LA50_4 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 4, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSWORD:
            {
                int LA50_5 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 5, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSPRE:
            {
                int LA50_6 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 6, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSWILD:
            {
                int LA50_7 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 7, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case EXCLAMATION:
            {
                int LA50_8 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 8, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case TO:
            {
                int LA50_9 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 9, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case DECIMAL_INTEGER_LITERAL:
            {
                int LA50_10 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 10, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FLOATING_POINT_LITERAL:
            {
                int LA50_11 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 11, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case DATETIME:
            {
                int LA50_12 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 12, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case STAR:
            {
                int LA50_13 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 13, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case URI:
            {
                int LA50_14 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 14, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case COMMA:
            case DOT:
            {
                int LA50_15 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 15, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case QUESTION_MARK:
            {
                int LA50_16 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 16, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case EQUALS:
            {
                int LA50_17 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 17, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case FTSPHRASE:
            {
                int LA50_18 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 18, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case TILDA:
            {
                int LA50_19 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 19, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case LSQUARE:
            {
                int LA50_20 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 20, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case LT:
            {
                int LA50_21 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 21, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case LPAREN:
            {
                int LA50_22 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 22, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case PLUS:
            {
                int LA50_23 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 23, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case BAR:
            {
                int LA50_24 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 24, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case MINUS:
            {
                int LA50_25 = input.LA(2);
                if (((defaultFieldConjunction() == true)))
                {
                    alt50 = 1;
                }
                else if (((defaultFieldConjunction() == false)))
                {
                    alt50 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 50, 25, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case OR:
            {
                alt50 = 2;
            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
                throw nvae;
            }
            switch (alt50)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:631:9: {...}? ftsFieldGroupExplicitDisjunction
            {
                root_0 = (Object) adaptor.nil();

                if (!((defaultFieldConjunction() == true)))
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "ftsFieldGroupDisjunction", "defaultFieldConjunction() == true");
                }
                pushFollow(FOLLOW_ftsFieldGroupExplicitDisjunction_in_ftsFieldGroupDisjunction4519);
                ftsFieldGroupExplicitDisjunction122 = ftsFieldGroupExplicitDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsFieldGroupExplicitDisjunction122.getTree());

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:632:11: {...}? ftsFieldGroupImplicitDisjunction
            {
                root_0 = (Object) adaptor.nil();

                if (!((defaultFieldConjunction() == false)))
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "ftsFieldGroupDisjunction", "defaultFieldConjunction() == false");
                }
                pushFollow(FOLLOW_ftsFieldGroupImplicitDisjunction_in_ftsFieldGroupDisjunction4533);
                ftsFieldGroupImplicitDisjunction123 = ftsFieldGroupImplicitDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsFieldGroupImplicitDisjunction123.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupDisjunction"

    public static class ftsFieldGroupExplicitDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupExplicitDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:635:1: ftsFieldGroupExplicitDisjunction : ftsFieldGroupImplicitConjunction ( or ftsFieldGroupImplicitConjunction )* -> ^( FIELD_DISJUNCTION ( ftsFieldGroupImplicitConjunction )+ ) ;
    public final FTSParser.ftsFieldGroupExplicitDisjunction_return ftsFieldGroupExplicitDisjunction() throws RecognitionException
    {
        FTSParser.ftsFieldGroupExplicitDisjunction_return retval = new FTSParser.ftsFieldGroupExplicitDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsFieldGroupImplicitConjunction124 = null;
        ParserRuleReturnScope or125 = null;
        ParserRuleReturnScope ftsFieldGroupImplicitConjunction126 = null;

        RewriteRuleSubtreeStream stream_ftsFieldGroupImplicitConjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupImplicitConjunction");
        RewriteRuleSubtreeStream stream_or = new RewriteRuleSubtreeStream(adaptor, "rule or");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:636:9: ( ftsFieldGroupImplicitConjunction ( or ftsFieldGroupImplicitConjunction )* -> ^( FIELD_DISJUNCTION ( ftsFieldGroupImplicitConjunction )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:637:9: ftsFieldGroupImplicitConjunction ( or ftsFieldGroupImplicitConjunction )*
            {
                pushFollow(FOLLOW_ftsFieldGroupImplicitConjunction_in_ftsFieldGroupExplicitDisjunction4566);
                ftsFieldGroupImplicitConjunction124 = ftsFieldGroupImplicitConjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupImplicitConjunction.add(ftsFieldGroupImplicitConjunction124.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:637:42: ( or ftsFieldGroupImplicitConjunction )*
                loop51: while (true)
                {
                    int alt51 = 2;
                    int LA51_0 = input.LA(1);
                    if ((LA51_0 == BAR || LA51_0 == OR))
                    {
                        alt51 = 1;
                    }

                    switch (alt51)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:637:43: or ftsFieldGroupImplicitConjunction
                    {
                        pushFollow(FOLLOW_or_in_ftsFieldGroupExplicitDisjunction4569);
                        or125 = or();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_or.add(or125.getTree());
                        pushFollow(FOLLOW_ftsFieldGroupImplicitConjunction_in_ftsFieldGroupExplicitDisjunction4571);
                        ftsFieldGroupImplicitConjunction126 = ftsFieldGroupImplicitConjunction();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsFieldGroupImplicitConjunction.add(ftsFieldGroupImplicitConjunction126.getTree());
                    }
                        break;

                    default:
                        break loop51;
                    }
                }

                // AST REWRITE
                // elements: ftsFieldGroupImplicitConjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 638:17: -> ^( FIELD_DISJUNCTION ( ftsFieldGroupImplicitConjunction )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:639:25: ^( FIELD_DISJUNCTION ( ftsFieldGroupImplicitConjunction )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_DISJUNCTION, "FIELD_DISJUNCTION"), root_1);
                            if (!(stream_ftsFieldGroupImplicitConjunction.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsFieldGroupImplicitConjunction.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsFieldGroupImplicitConjunction.nextTree());
                            }
                            stream_ftsFieldGroupImplicitConjunction.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupExplicitDisjunction"

    public static class ftsFieldGroupImplicitDisjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupImplicitDisjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:642:1: ftsFieldGroupImplicitDisjunction : ( ( or )? ftsFieldGroupExplicitConjunction )+ -> ^( FIELD_DISJUNCTION ( ftsFieldGroupExplicitConjunction )+ ) ;
    public final FTSParser.ftsFieldGroupImplicitDisjunction_return ftsFieldGroupImplicitDisjunction() throws RecognitionException
    {
        FTSParser.ftsFieldGroupImplicitDisjunction_return retval = new FTSParser.ftsFieldGroupImplicitDisjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope or127 = null;
        ParserRuleReturnScope ftsFieldGroupExplicitConjunction128 = null;

        RewriteRuleSubtreeStream stream_or = new RewriteRuleSubtreeStream(adaptor, "rule or");
        RewriteRuleSubtreeStream stream_ftsFieldGroupExplicitConjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupExplicitConjunction");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:643:9: ( ( ( or )? ftsFieldGroupExplicitConjunction )+ -> ^( FIELD_DISJUNCTION ( ftsFieldGroupExplicitConjunction )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:644:9: ( ( or )? ftsFieldGroupExplicitConjunction )+
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:644:9: ( ( or )? ftsFieldGroupExplicitConjunction )+
                int cnt53 = 0;
                loop53: while (true)
                {
                    int alt53 = 2;
                    int LA53_0 = input.LA(1);
                    if ((LA53_0 == BAR || LA53_0 == COMMA || LA53_0 == DATETIME || LA53_0 == DECIMAL_INTEGER_LITERAL || LA53_0 == DOT || LA53_0 == EQUALS || LA53_0 == EXCLAMATION || LA53_0 == FLOATING_POINT_LITERAL || (LA53_0 >= FTSPHRASE && LA53_0 <= FTSWORD) || LA53_0 == ID || (LA53_0 >= LPAREN && LA53_0 <= LT) || LA53_0 == MINUS || LA53_0 == NOT || LA53_0 == OR || LA53_0 == PLUS || LA53_0 == QUESTION_MARK || LA53_0 == STAR || (LA53_0 >= TILDA && LA53_0 <= TO) || LA53_0 == URI))
                    {
                        alt53 = 1;
                    }

                    switch (alt53)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:644:10: ( or )? ftsFieldGroupExplicitConjunction
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:644:10: ( or )?
                        int alt52 = 2;
                        int LA52_0 = input.LA(1);
                        if ((LA52_0 == OR))
                        {
                            alt52 = 1;
                        }
                        else if ((LA52_0 == BAR))
                        {
                            int LA52_2 = input.LA(2);
                            if ((LA52_2 == BAR))
                            {
                                alt52 = 1;
                            }
                        }
                        switch (alt52)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:644:10: or
                        {
                            pushFollow(FOLLOW_or_in_ftsFieldGroupImplicitDisjunction4656);
                            or127 = or();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_or.add(or127.getTree());
                        }
                            break;

                        }

                        pushFollow(FOLLOW_ftsFieldGroupExplicitConjunction_in_ftsFieldGroupImplicitDisjunction4659);
                        ftsFieldGroupExplicitConjunction128 = ftsFieldGroupExplicitConjunction();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsFieldGroupExplicitConjunction.add(ftsFieldGroupExplicitConjunction128.getTree());
                    }
                        break;

                    default:
                        if (cnt53 >= 1)
                            break loop53;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(53, input);
                        throw eee;
                    }
                    cnt53++;
                }

                // AST REWRITE
                // elements: ftsFieldGroupExplicitConjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 645:17: -> ^( FIELD_DISJUNCTION ( ftsFieldGroupExplicitConjunction )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:646:25: ^( FIELD_DISJUNCTION ( ftsFieldGroupExplicitConjunction )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_DISJUNCTION, "FIELD_DISJUNCTION"), root_1);
                            if (!(stream_ftsFieldGroupExplicitConjunction.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsFieldGroupExplicitConjunction.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsFieldGroupExplicitConjunction.nextTree());
                            }
                            stream_ftsFieldGroupExplicitConjunction.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupImplicitDisjunction"

    public static class ftsFieldGroupExplicitConjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupExplicitConjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:653:1: ftsFieldGroupExplicitConjunction : ftsFieldGroupPrefixed ( and ftsFieldGroupPrefixed )* -> ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ ) ;
    public final FTSParser.ftsFieldGroupExplicitConjunction_return ftsFieldGroupExplicitConjunction() throws RecognitionException
    {
        FTSParser.ftsFieldGroupExplicitConjunction_return retval = new FTSParser.ftsFieldGroupExplicitConjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsFieldGroupPrefixed129 = null;
        ParserRuleReturnScope and130 = null;
        ParserRuleReturnScope ftsFieldGroupPrefixed131 = null;

        RewriteRuleSubtreeStream stream_ftsFieldGroupPrefixed = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupPrefixed");
        RewriteRuleSubtreeStream stream_and = new RewriteRuleSubtreeStream(adaptor, "rule and");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:654:9: ( ftsFieldGroupPrefixed ( and ftsFieldGroupPrefixed )* -> ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:655:9: ftsFieldGroupPrefixed ( and ftsFieldGroupPrefixed )*
            {
                pushFollow(FOLLOW_ftsFieldGroupPrefixed_in_ftsFieldGroupExplicitConjunction4746);
                ftsFieldGroupPrefixed129 = ftsFieldGroupPrefixed();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupPrefixed.add(ftsFieldGroupPrefixed129.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:655:31: ( and ftsFieldGroupPrefixed )*
                loop54: while (true)
                {
                    int alt54 = 2;
                    int LA54_0 = input.LA(1);
                    if (((LA54_0 >= AMP && LA54_0 <= AND)))
                    {
                        alt54 = 1;
                    }

                    switch (alt54)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:655:32: and ftsFieldGroupPrefixed
                    {
                        pushFollow(FOLLOW_and_in_ftsFieldGroupExplicitConjunction4749);
                        and130 = and();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_and.add(and130.getTree());
                        pushFollow(FOLLOW_ftsFieldGroupPrefixed_in_ftsFieldGroupExplicitConjunction4751);
                        ftsFieldGroupPrefixed131 = ftsFieldGroupPrefixed();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsFieldGroupPrefixed.add(ftsFieldGroupPrefixed131.getTree());
                    }
                        break;

                    default:
                        break loop54;
                    }
                }

                // AST REWRITE
                // elements: ftsFieldGroupPrefixed
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 656:17: -> ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:657:25: ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_CONJUNCTION, "FIELD_CONJUNCTION"), root_1);
                            if (!(stream_ftsFieldGroupPrefixed.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsFieldGroupPrefixed.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsFieldGroupPrefixed.nextTree());
                            }
                            stream_ftsFieldGroupPrefixed.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupExplicitConjunction"

    public static class ftsFieldGroupImplicitConjunction_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupImplicitConjunction"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:660:1: ftsFieldGroupImplicitConjunction : ( ( and )? ftsFieldGroupPrefixed )+ -> ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ ) ;
    public final FTSParser.ftsFieldGroupImplicitConjunction_return ftsFieldGroupImplicitConjunction() throws RecognitionException
    {
        FTSParser.ftsFieldGroupImplicitConjunction_return retval = new FTSParser.ftsFieldGroupImplicitConjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope and132 = null;
        ParserRuleReturnScope ftsFieldGroupPrefixed133 = null;

        RewriteRuleSubtreeStream stream_ftsFieldGroupPrefixed = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupPrefixed");
        RewriteRuleSubtreeStream stream_and = new RewriteRuleSubtreeStream(adaptor, "rule and");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:661:9: ( ( ( and )? ftsFieldGroupPrefixed )+ -> ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:662:9: ( ( and )? ftsFieldGroupPrefixed )+
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:662:9: ( ( and )? ftsFieldGroupPrefixed )+
                int cnt56 = 0;
                loop56: while (true)
                {
                    int alt56 = 2;
                    int LA56_0 = input.LA(1);
                    if ((LA56_0 == BAR))
                    {
                        int LA56_2 = input.LA(2);
                        if ((LA56_2 == COMMA || LA56_2 == DATETIME || LA56_2 == DECIMAL_INTEGER_LITERAL || LA56_2 == DOT || LA56_2 == EQUALS || LA56_2 == FLOATING_POINT_LITERAL || (LA56_2 >= FTSPHRASE && LA56_2 <= FTSWORD) || LA56_2 == ID || (LA56_2 >= LPAREN && LA56_2 <= LT) || LA56_2 == NOT || LA56_2 == QUESTION_MARK || LA56_2 == STAR || (LA56_2 >= TILDA && LA56_2 <= TO) || LA56_2 == URI))
                        {
                            alt56 = 1;
                        }

                    }
                    else if (((LA56_0 >= AMP && LA56_0 <= AND) || LA56_0 == COMMA || LA56_0 == DATETIME || LA56_0 == DECIMAL_INTEGER_LITERAL || LA56_0 == DOT || LA56_0 == EQUALS || LA56_0 == EXCLAMATION || LA56_0 == FLOATING_POINT_LITERAL || (LA56_0 >= FTSPHRASE && LA56_0 <= FTSWORD) || LA56_0 == ID || (LA56_0 >= LPAREN && LA56_0 <= LT) || LA56_0 == MINUS || LA56_0 == NOT || LA56_0 == PLUS || LA56_0 == QUESTION_MARK || LA56_0 == STAR || (LA56_0 >= TILDA && LA56_0 <= TO) || LA56_0 == URI))
                    {
                        alt56 = 1;
                    }

                    switch (alt56)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:662:10: ( and )? ftsFieldGroupPrefixed
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:662:10: ( and )?
                        int alt55 = 2;
                        int LA55_0 = input.LA(1);
                        if (((LA55_0 >= AMP && LA55_0 <= AND)))
                        {
                            alt55 = 1;
                        }
                        switch (alt55)
                        {
                        case 1:
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:662:10: and
                        {
                            pushFollow(FOLLOW_and_in_ftsFieldGroupImplicitConjunction4836);
                            and132 = and();
                            state._fsp--;
                            if (state.failed)
                                return retval;
                            if (state.backtracking == 0)
                                stream_and.add(and132.getTree());
                        }
                            break;

                        }

                        pushFollow(FOLLOW_ftsFieldGroupPrefixed_in_ftsFieldGroupImplicitConjunction4839);
                        ftsFieldGroupPrefixed133 = ftsFieldGroupPrefixed();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsFieldGroupPrefixed.add(ftsFieldGroupPrefixed133.getTree());
                    }
                        break;

                    default:
                        if (cnt56 >= 1)
                            break loop56;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(56, input);
                        throw eee;
                    }
                    cnt56++;
                }

                // AST REWRITE
                // elements: ftsFieldGroupPrefixed
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 663:17: -> ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:664:25: ^( FIELD_CONJUNCTION ( ftsFieldGroupPrefixed )+ )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_CONJUNCTION, "FIELD_CONJUNCTION"), root_1);
                            if (!(stream_ftsFieldGroupPrefixed.hasNext()))
                            {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_ftsFieldGroupPrefixed.hasNext())
                            {
                                adaptor.addChild(root_1, stream_ftsFieldGroupPrefixed.nextTree());
                            }
                            stream_ftsFieldGroupPrefixed.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupImplicitConjunction"

    public static class ftsFieldGroupPrefixed_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupPrefixed"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:667:1: ftsFieldGroupPrefixed : ( ( not )=> not ftsFieldGroupTest ( boost )? -> ^( FIELD_NEGATION ftsFieldGroupTest ( boost )? ) | ftsFieldGroupTest ( boost )? -> ^( FIELD_DEFAULT ftsFieldGroupTest ( boost )? ) | PLUS ftsFieldGroupTest ( boost )? -> ^( FIELD_MANDATORY ftsFieldGroupTest ( boost )? ) | BAR ftsFieldGroupTest ( boost )? -> ^( FIELD_OPTIONAL ftsFieldGroupTest ( boost )? ) | MINUS ftsFieldGroupTest ( boost )? -> ^( FIELD_EXCLUDE ftsFieldGroupTest ( boost )? ) );
    public final FTSParser.ftsFieldGroupPrefixed_return ftsFieldGroupPrefixed() throws RecognitionException
    {
        FTSParser.ftsFieldGroupPrefixed_return retval = new FTSParser.ftsFieldGroupPrefixed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token PLUS139 = null;
        Token BAR142 = null;
        Token MINUS145 = null;
        ParserRuleReturnScope not134 = null;
        ParserRuleReturnScope ftsFieldGroupTest135 = null;
        ParserRuleReturnScope boost136 = null;
        ParserRuleReturnScope ftsFieldGroupTest137 = null;
        ParserRuleReturnScope boost138 = null;
        ParserRuleReturnScope ftsFieldGroupTest140 = null;
        ParserRuleReturnScope boost141 = null;
        ParserRuleReturnScope ftsFieldGroupTest143 = null;
        ParserRuleReturnScope boost144 = null;
        ParserRuleReturnScope ftsFieldGroupTest146 = null;
        ParserRuleReturnScope boost147 = null;

        Object PLUS139_tree = null;
        Object BAR142_tree = null;
        Object MINUS145_tree = null;
        RewriteRuleTokenStream stream_BAR = new RewriteRuleTokenStream(adaptor, "token BAR");
        RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
        RewriteRuleSubtreeStream stream_not = new RewriteRuleSubtreeStream(adaptor, "rule not");
        RewriteRuleSubtreeStream stream_ftsFieldGroupTest = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupTest");
        RewriteRuleSubtreeStream stream_boost = new RewriteRuleSubtreeStream(adaptor, "rule boost");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:668:9: ( ( not )=> not ftsFieldGroupTest ( boost )? -> ^( FIELD_NEGATION ftsFieldGroupTest ( boost )? ) | ftsFieldGroupTest ( boost )? -> ^( FIELD_DEFAULT ftsFieldGroupTest ( boost )? ) | PLUS ftsFieldGroupTest ( boost )? -> ^( FIELD_MANDATORY ftsFieldGroupTest ( boost )? ) | BAR ftsFieldGroupTest ( boost )? -> ^( FIELD_OPTIONAL ftsFieldGroupTest ( boost )? ) | MINUS ftsFieldGroupTest ( boost )? -> ^( FIELD_EXCLUDE ftsFieldGroupTest ( boost )? ) )
            int alt62 = 5;
            int LA62_0 = input.LA(1);
            if ((LA62_0 == NOT))
            {
                int LA62_1 = input.LA(2);
                if ((synpred32_FTS()))
                {
                    alt62 = 1;
                }
                else if ((true))
                {
                    alt62 = 2;
                }

            }
            else if ((LA62_0 == COMMA || LA62_0 == DATETIME || LA62_0 == DECIMAL_INTEGER_LITERAL || LA62_0 == DOT || LA62_0 == EQUALS || LA62_0 == FLOATING_POINT_LITERAL || (LA62_0 >= FTSPHRASE && LA62_0 <= FTSWORD) || LA62_0 == ID || (LA62_0 >= LPAREN && LA62_0 <= LT) || LA62_0 == QUESTION_MARK || LA62_0 == STAR || (LA62_0 >= TILDA && LA62_0 <= TO) || LA62_0 == URI))
            {
                alt62 = 2;
            }
            else if ((LA62_0 == EXCLAMATION) && (synpred32_FTS()))
            {
                alt62 = 1;
            }
            else if ((LA62_0 == PLUS))
            {
                alt62 = 3;
            }
            else if ((LA62_0 == BAR))
            {
                alt62 = 4;
            }
            else if ((LA62_0 == MINUS))
            {
                alt62 = 5;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
                throw nvae;
            }

            switch (alt62)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:669:9: ( not )=> not ftsFieldGroupTest ( boost )?
            {
                pushFollow(FOLLOW_not_in_ftsFieldGroupPrefixed4929);
                not134 = not();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_not.add(not134.getTree());
                pushFollow(FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed4931);
                ftsFieldGroupTest135 = ftsFieldGroupTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTest.add(ftsFieldGroupTest135.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:669:40: ( boost )?
                int alt57 = 2;
                int LA57_0 = input.LA(1);
                if ((LA57_0 == CARAT))
                {
                    alt57 = 1;
                }
                switch (alt57)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:669:40: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsFieldGroupPrefixed4933);
                    boost136 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost136.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupTest, boost
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 670:17: -> ^( FIELD_NEGATION ftsFieldGroupTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:671:25: ^( FIELD_NEGATION ftsFieldGroupTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_NEGATION, "FIELD_NEGATION"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:671:60: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:672:11: ftsFieldGroupTest ( boost )?
            {
                pushFollow(FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed4997);
                ftsFieldGroupTest137 = ftsFieldGroupTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTest.add(ftsFieldGroupTest137.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:672:29: ( boost )?
                int alt58 = 2;
                int LA58_0 = input.LA(1);
                if ((LA58_0 == CARAT))
                {
                    alt58 = 1;
                }
                switch (alt58)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:672:29: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsFieldGroupPrefixed4999);
                    boost138 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost138.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: boost, ftsFieldGroupTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 673:17: -> ^( FIELD_DEFAULT ftsFieldGroupTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:674:25: ^( FIELD_DEFAULT ftsFieldGroupTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_DEFAULT, "FIELD_DEFAULT"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:674:59: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:675:11: PLUS ftsFieldGroupTest ( boost )?
            {
                PLUS139 = (Token) match(input, PLUS, FOLLOW_PLUS_in_ftsFieldGroupPrefixed5063);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_PLUS.add(PLUS139);

                pushFollow(FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed5065);
                ftsFieldGroupTest140 = ftsFieldGroupTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTest.add(ftsFieldGroupTest140.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:675:34: ( boost )?
                int alt59 = 2;
                int LA59_0 = input.LA(1);
                if ((LA59_0 == CARAT))
                {
                    alt59 = 1;
                }
                switch (alt59)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:675:34: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsFieldGroupPrefixed5067);
                    boost141 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost141.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: boost, ftsFieldGroupTest
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 676:17: -> ^( FIELD_MANDATORY ftsFieldGroupTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:677:25: ^( FIELD_MANDATORY ftsFieldGroupTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_MANDATORY, "FIELD_MANDATORY"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:677:61: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:678:11: BAR ftsFieldGroupTest ( boost )?
            {
                BAR142 = (Token) match(input, BAR, FOLLOW_BAR_in_ftsFieldGroupPrefixed5131);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_BAR.add(BAR142);

                pushFollow(FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed5133);
                ftsFieldGroupTest143 = ftsFieldGroupTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTest.add(ftsFieldGroupTest143.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:678:33: ( boost )?
                int alt60 = 2;
                int LA60_0 = input.LA(1);
                if ((LA60_0 == CARAT))
                {
                    alt60 = 1;
                }
                switch (alt60)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:678:33: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsFieldGroupPrefixed5135);
                    boost144 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost144.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupTest, boost
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 679:17: -> ^( FIELD_OPTIONAL ftsFieldGroupTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:680:25: ^( FIELD_OPTIONAL ftsFieldGroupTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_OPTIONAL, "FIELD_OPTIONAL"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:680:60: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:681:11: MINUS ftsFieldGroupTest ( boost )?
            {
                MINUS145 = (Token) match(input, MINUS, FOLLOW_MINUS_in_ftsFieldGroupPrefixed5199);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_MINUS.add(MINUS145);

                pushFollow(FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed5201);
                ftsFieldGroupTest146 = ftsFieldGroupTest();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTest.add(ftsFieldGroupTest146.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:681:35: ( boost )?
                int alt61 = 2;
                int LA61_0 = input.LA(1);
                if ((LA61_0 == CARAT))
                {
                    alt61 = 1;
                }
                switch (alt61)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:681:35: boost
                {
                    pushFollow(FOLLOW_boost_in_ftsFieldGroupPrefixed5203);
                    boost147 = boost();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_boost.add(boost147.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupTest, boost
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 682:17: -> ^( FIELD_EXCLUDE ftsFieldGroupTest ( boost )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:683:25: ^( FIELD_EXCLUDE ftsFieldGroupTest ( boost )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_EXCLUDE, "FIELD_EXCLUDE"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTest.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:683:59: ( boost )?
                            if (stream_boost.hasNext())
                            {
                                adaptor.addChild(root_1, stream_boost.nextTree());
                            }
                            stream_boost.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupPrefixed"

    public static class ftsFieldGroupTest_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupTest"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:686:1: ftsFieldGroupTest : ( ( ftsFieldGroupProximity )=> ftsFieldGroupProximity -> ^( FG_PROXIMITY ftsFieldGroupProximity ) | ( ftsFieldGroupTerm )=> ftsFieldGroupTerm ( ( fuzzy )=> fuzzy )? -> ^( FG_TERM ftsFieldGroupTerm ( fuzzy )? ) | ( ftsFieldGroupExactTerm )=> ftsFieldGroupExactTerm ( ( fuzzy )=> fuzzy )? -> ^( FG_EXACT_TERM ftsFieldGroupExactTerm ( fuzzy )? ) | ( ftsFieldGroupPhrase )=> ftsFieldGroupPhrase ( ( slop )=> slop )? -> ^( FG_PHRASE ftsFieldGroupPhrase ( slop )? ) | ( ftsFieldGroupExactPhrase )=> ftsFieldGroupExactPhrase ( ( slop )=> slop )? -> ^( FG_EXACT_PHRASE ftsFieldGroupExactPhrase ( slop )? ) | ( ftsFieldGroupTokenisedPhrase )=> ftsFieldGroupTokenisedPhrase ( ( slop )=> slop )? -> ^( FG_PHRASE ftsFieldGroupTokenisedPhrase ( slop )? ) | ( ftsFieldGroupSynonym )=> ftsFieldGroupSynonym ( ( fuzzy )=> fuzzy )? -> ^( FG_SYNONYM ftsFieldGroupSynonym ( fuzzy )? ) | (
    // ftsFieldGroupRange )=> ftsFieldGroupRange -> ^( FG_RANGE ftsFieldGroupRange ) | LPAREN ftsFieldGroupDisjunction RPAREN -> ftsFieldGroupDisjunction );
    public final FTSParser.ftsFieldGroupTest_return ftsFieldGroupTest() throws RecognitionException
    {
        FTSParser.ftsFieldGroupTest_return retval = new FTSParser.ftsFieldGroupTest_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LPAREN162 = null;
        Token RPAREN164 = null;
        ParserRuleReturnScope ftsFieldGroupProximity148 = null;
        ParserRuleReturnScope ftsFieldGroupTerm149 = null;
        ParserRuleReturnScope fuzzy150 = null;
        ParserRuleReturnScope ftsFieldGroupExactTerm151 = null;
        ParserRuleReturnScope fuzzy152 = null;
        ParserRuleReturnScope ftsFieldGroupPhrase153 = null;
        ParserRuleReturnScope slop154 = null;
        ParserRuleReturnScope ftsFieldGroupExactPhrase155 = null;
        ParserRuleReturnScope slop156 = null;
        ParserRuleReturnScope ftsFieldGroupTokenisedPhrase157 = null;
        ParserRuleReturnScope slop158 = null;
        ParserRuleReturnScope ftsFieldGroupSynonym159 = null;
        ParserRuleReturnScope fuzzy160 = null;
        ParserRuleReturnScope ftsFieldGroupRange161 = null;
        ParserRuleReturnScope ftsFieldGroupDisjunction163 = null;

        Object LPAREN162_tree = null;
        Object RPAREN164_tree = null;
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleSubtreeStream stream_ftsFieldGroupSynonym = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupSynonym");
        RewriteRuleSubtreeStream stream_ftsFieldGroupRange = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupRange");
        RewriteRuleSubtreeStream stream_ftsFieldGroupProximity = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupProximity");
        RewriteRuleSubtreeStream stream_ftsFieldGroupDisjunction = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupDisjunction");
        RewriteRuleSubtreeStream stream_ftsFieldGroupExactTerm = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupExactTerm");
        RewriteRuleSubtreeStream stream_ftsFieldGroupExactPhrase = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupExactPhrase");
        RewriteRuleSubtreeStream stream_ftsFieldGroupTokenisedPhrase = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupTokenisedPhrase");
        RewriteRuleSubtreeStream stream_fuzzy = new RewriteRuleSubtreeStream(adaptor, "rule fuzzy");
        RewriteRuleSubtreeStream stream_ftsFieldGroupPhrase = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupPhrase");
        RewriteRuleSubtreeStream stream_ftsFieldGroupTerm = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupTerm");
        RewriteRuleSubtreeStream stream_slop = new RewriteRuleSubtreeStream(adaptor, "rule slop");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:687:9: ( ( ftsFieldGroupProximity )=> ftsFieldGroupProximity -> ^( FG_PROXIMITY ftsFieldGroupProximity ) | ( ftsFieldGroupTerm )=> ftsFieldGroupTerm ( ( fuzzy )=> fuzzy )? -> ^( FG_TERM ftsFieldGroupTerm ( fuzzy )? ) | ( ftsFieldGroupExactTerm )=> ftsFieldGroupExactTerm ( ( fuzzy )=> fuzzy )? -> ^( FG_EXACT_TERM ftsFieldGroupExactTerm ( fuzzy )? ) | ( ftsFieldGroupPhrase )=> ftsFieldGroupPhrase ( ( slop )=> slop )? -> ^( FG_PHRASE ftsFieldGroupPhrase ( slop )? ) | ( ftsFieldGroupExactPhrase )=> ftsFieldGroupExactPhrase ( ( slop )=> slop )? -> ^( FG_EXACT_PHRASE ftsFieldGroupExactPhrase ( slop )? ) | ( ftsFieldGroupTokenisedPhrase )=> ftsFieldGroupTokenisedPhrase ( ( slop )=> slop )? -> ^( FG_PHRASE ftsFieldGroupTokenisedPhrase ( slop )? ) | ( ftsFieldGroupSynonym )=> ftsFieldGroupSynonym ( ( fuzzy )=> fuzzy )? -> ^( FG_SYNONYM ftsFieldGroupSynonym ( fuzzy )? ) | ( ftsFieldGroupRange )=>
            // ftsFieldGroupRange -> ^( FG_RANGE ftsFieldGroupRange ) | LPAREN ftsFieldGroupDisjunction RPAREN -> ftsFieldGroupDisjunction )
            int alt69 = 9;
            alt69 = dfa69.predict(input);
            switch (alt69)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:688:9: ( ftsFieldGroupProximity )=> ftsFieldGroupProximity
            {
                pushFollow(FOLLOW_ftsFieldGroupProximity_in_ftsFieldGroupTest5294);
                ftsFieldGroupProximity148 = ftsFieldGroupProximity();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupProximity.add(ftsFieldGroupProximity148.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupProximity
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 689:17: -> ^( FG_PROXIMITY ftsFieldGroupProximity )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:690:25: ^( FG_PROXIMITY ftsFieldGroupProximity )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_PROXIMITY, "FG_PROXIMITY"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupProximity.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:11: ( ftsFieldGroupTerm )=> ftsFieldGroupTerm ( ( fuzzy )=> fuzzy )?
            {
                pushFollow(FOLLOW_ftsFieldGroupTerm_in_ftsFieldGroupTest5360);
                ftsFieldGroupTerm149 = ftsFieldGroupTerm();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTerm.add(ftsFieldGroupTerm149.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:52: ( ( fuzzy )=> fuzzy )?
                int alt63 = 2;
                int LA63_0 = input.LA(1);
                if ((LA63_0 == TILDA))
                {
                    int LA63_1 = input.LA(2);
                    if ((LA63_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA63_3 = input.LA(3);
                        if ((synpred35_FTS()))
                        {
                            alt63 = 1;
                        }
                    }
                    else if ((LA63_1 == FLOATING_POINT_LITERAL))
                    {
                        int LA63_4 = input.LA(3);
                        if ((synpred35_FTS()))
                        {
                            alt63 = 1;
                        }
                    }
                }
                switch (alt63)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:54: ( fuzzy )=> fuzzy
                {
                    pushFollow(FOLLOW_fuzzy_in_ftsFieldGroupTest5370);
                    fuzzy150 = fuzzy();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fuzzy.add(fuzzy150.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupTerm, fuzzy
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 692:17: -> ^( FG_TERM ftsFieldGroupTerm ( fuzzy )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:693:25: ^( FG_TERM ftsFieldGroupTerm ( fuzzy )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_TERM, "FG_TERM"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTerm.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:693:53: ( fuzzy )?
                            if (stream_fuzzy.hasNext())
                            {
                                adaptor.addChild(root_1, stream_fuzzy.nextTree());
                            }
                            stream_fuzzy.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:11: ( ftsFieldGroupExactTerm )=> ftsFieldGroupExactTerm ( ( fuzzy )=> fuzzy )?
            {
                pushFollow(FOLLOW_ftsFieldGroupExactTerm_in_ftsFieldGroupTest5441);
                ftsFieldGroupExactTerm151 = ftsFieldGroupExactTerm();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupExactTerm.add(ftsFieldGroupExactTerm151.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:62: ( ( fuzzy )=> fuzzy )?
                int alt64 = 2;
                int LA64_0 = input.LA(1);
                if ((LA64_0 == TILDA))
                {
                    int LA64_1 = input.LA(2);
                    if ((LA64_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA64_3 = input.LA(3);
                        if ((synpred37_FTS()))
                        {
                            alt64 = 1;
                        }
                    }
                    else if ((LA64_1 == FLOATING_POINT_LITERAL))
                    {
                        int LA64_4 = input.LA(3);
                        if ((synpred37_FTS()))
                        {
                            alt64 = 1;
                        }
                    }
                }
                switch (alt64)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:64: ( fuzzy )=> fuzzy
                {
                    pushFollow(FOLLOW_fuzzy_in_ftsFieldGroupTest5451);
                    fuzzy152 = fuzzy();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fuzzy.add(fuzzy152.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupExactTerm, fuzzy
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 695:17: -> ^( FG_EXACT_TERM ftsFieldGroupExactTerm ( fuzzy )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:696:25: ^( FG_EXACT_TERM ftsFieldGroupExactTerm ( fuzzy )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_EXACT_TERM, "FG_EXACT_TERM"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupExactTerm.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:696:64: ( fuzzy )?
                            if (stream_fuzzy.hasNext())
                            {
                                adaptor.addChild(root_1, stream_fuzzy.nextTree());
                            }
                            stream_fuzzy.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:11: ( ftsFieldGroupPhrase )=> ftsFieldGroupPhrase ( ( slop )=> slop )?
            {
                pushFollow(FOLLOW_ftsFieldGroupPhrase_in_ftsFieldGroupTest5522);
                ftsFieldGroupPhrase153 = ftsFieldGroupPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupPhrase.add(ftsFieldGroupPhrase153.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:56: ( ( slop )=> slop )?
                int alt65 = 2;
                int LA65_0 = input.LA(1);
                if ((LA65_0 == TILDA))
                {
                    int LA65_1 = input.LA(2);
                    if ((LA65_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA65_3 = input.LA(3);
                        if ((synpred39_FTS()))
                        {
                            alt65 = 1;
                        }
                    }
                }
                switch (alt65)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:58: ( slop )=> slop
                {
                    pushFollow(FOLLOW_slop_in_ftsFieldGroupTest5532);
                    slop154 = slop();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_slop.add(slop154.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: slop, ftsFieldGroupPhrase
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 698:17: -> ^( FG_PHRASE ftsFieldGroupPhrase ( slop )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:699:25: ^( FG_PHRASE ftsFieldGroupPhrase ( slop )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_PHRASE, "FG_PHRASE"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupPhrase.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:699:57: ( slop )?
                            if (stream_slop.hasNext())
                            {
                                adaptor.addChild(root_1, stream_slop.nextTree());
                            }
                            stream_slop.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:11: ( ftsFieldGroupExactPhrase )=> ftsFieldGroupExactPhrase ( ( slop )=> slop )?
            {
                pushFollow(FOLLOW_ftsFieldGroupExactPhrase_in_ftsFieldGroupTest5603);
                ftsFieldGroupExactPhrase155 = ftsFieldGroupExactPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupExactPhrase.add(ftsFieldGroupExactPhrase155.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:66: ( ( slop )=> slop )?
                int alt66 = 2;
                int LA66_0 = input.LA(1);
                if ((LA66_0 == TILDA))
                {
                    int LA66_1 = input.LA(2);
                    if ((LA66_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA66_3 = input.LA(3);
                        if ((synpred41_FTS()))
                        {
                            alt66 = 1;
                        }
                    }
                }
                switch (alt66)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:68: ( slop )=> slop
                {
                    pushFollow(FOLLOW_slop_in_ftsFieldGroupTest5613);
                    slop156 = slop();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_slop.add(slop156.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupExactPhrase, slop
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 701:17: -> ^( FG_EXACT_PHRASE ftsFieldGroupExactPhrase ( slop )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:702:25: ^( FG_EXACT_PHRASE ftsFieldGroupExactPhrase ( slop )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_EXACT_PHRASE, "FG_EXACT_PHRASE"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupExactPhrase.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:702:68: ( slop )?
                            if (stream_slop.hasNext())
                            {
                                adaptor.addChild(root_1, stream_slop.nextTree());
                            }
                            stream_slop.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:11: ( ftsFieldGroupTokenisedPhrase )=> ftsFieldGroupTokenisedPhrase ( ( slop )=> slop )?
            {
                pushFollow(FOLLOW_ftsFieldGroupTokenisedPhrase_in_ftsFieldGroupTest5684);
                ftsFieldGroupTokenisedPhrase157 = ftsFieldGroupTokenisedPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTokenisedPhrase.add(ftsFieldGroupTokenisedPhrase157.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:74: ( ( slop )=> slop )?
                int alt67 = 2;
                int LA67_0 = input.LA(1);
                if ((LA67_0 == TILDA))
                {
                    int LA67_1 = input.LA(2);
                    if ((LA67_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA67_3 = input.LA(3);
                        if ((synpred43_FTS()))
                        {
                            alt67 = 1;
                        }
                    }
                }
                switch (alt67)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:76: ( slop )=> slop
                {
                    pushFollow(FOLLOW_slop_in_ftsFieldGroupTest5694);
                    slop158 = slop();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_slop.add(slop158.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupTokenisedPhrase, slop
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 704:17: -> ^( FG_PHRASE ftsFieldGroupTokenisedPhrase ( slop )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:705:25: ^( FG_PHRASE ftsFieldGroupTokenisedPhrase ( slop )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_PHRASE, "FG_PHRASE"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupTokenisedPhrase.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:705:66: ( slop )?
                            if (stream_slop.hasNext())
                            {
                                adaptor.addChild(root_1, stream_slop.nextTree());
                            }
                            stream_slop.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 7:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:11: ( ftsFieldGroupSynonym )=> ftsFieldGroupSynonym ( ( fuzzy )=> fuzzy )?
            {
                pushFollow(FOLLOW_ftsFieldGroupSynonym_in_ftsFieldGroupTest5765);
                ftsFieldGroupSynonym159 = ftsFieldGroupSynonym();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupSynonym.add(ftsFieldGroupSynonym159.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:58: ( ( fuzzy )=> fuzzy )?
                int alt68 = 2;
                int LA68_0 = input.LA(1);
                if ((LA68_0 == TILDA))
                {
                    int LA68_1 = input.LA(2);
                    if ((LA68_1 == DECIMAL_INTEGER_LITERAL))
                    {
                        int LA68_3 = input.LA(3);
                        if ((synpred45_FTS()))
                        {
                            alt68 = 1;
                        }
                    }
                    else if ((LA68_1 == FLOATING_POINT_LITERAL))
                    {
                        int LA68_4 = input.LA(3);
                        if ((synpred45_FTS()))
                        {
                            alt68 = 1;
                        }
                    }
                }
                switch (alt68)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:60: ( fuzzy )=> fuzzy
                {
                    pushFollow(FOLLOW_fuzzy_in_ftsFieldGroupTest5775);
                    fuzzy160 = fuzzy();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_fuzzy.add(fuzzy160.getTree());
                }
                    break;

                }

                // AST REWRITE
                // elements: ftsFieldGroupSynonym, fuzzy
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 707:17: -> ^( FG_SYNONYM ftsFieldGroupSynonym ( fuzzy )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:708:25: ^( FG_SYNONYM ftsFieldGroupSynonym ( fuzzy )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_SYNONYM, "FG_SYNONYM"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupSynonym.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:708:59: ( fuzzy )?
                            if (stream_fuzzy.hasNext())
                            {
                                adaptor.addChild(root_1, stream_fuzzy.nextTree());
                            }
                            stream_fuzzy.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 8:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:709:11: ( ftsFieldGroupRange )=> ftsFieldGroupRange
            {
                pushFollow(FOLLOW_ftsFieldGroupRange_in_ftsFieldGroupTest5846);
                ftsFieldGroupRange161 = ftsFieldGroupRange();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupRange.add(ftsFieldGroupRange161.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupRange
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 710:17: -> ^( FG_RANGE ftsFieldGroupRange )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:711:25: ^( FG_RANGE ftsFieldGroupRange )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FG_RANGE, "FG_RANGE"), root_1);
                            adaptor.addChild(root_1, stream_ftsFieldGroupRange.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 9:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:712:11: LPAREN ftsFieldGroupDisjunction RPAREN
            {
                LPAREN162 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_ftsFieldGroupTest5906);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_LPAREN.add(LPAREN162);

                pushFollow(FOLLOW_ftsFieldGroupDisjunction_in_ftsFieldGroupTest5908);
                ftsFieldGroupDisjunction163 = ftsFieldGroupDisjunction();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupDisjunction.add(ftsFieldGroupDisjunction163.getTree());
                RPAREN164 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_ftsFieldGroupTest5910);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_RPAREN.add(RPAREN164);

                // AST REWRITE
                // elements: ftsFieldGroupDisjunction
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 713:17: -> ftsFieldGroupDisjunction
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupDisjunction.nextTree());
                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupTest"

    public static class ftsFieldGroupTerm_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupTerm"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:716:1: ftsFieldGroupTerm : ftsWord ;
    public final FTSParser.ftsFieldGroupTerm_return ftsFieldGroupTerm() throws RecognitionException
    {
        FTSParser.ftsFieldGroupTerm_return retval = new FTSParser.ftsFieldGroupTerm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsWord165 = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:717:9: ( ftsWord )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:718:9: ftsWord
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWord_in_ftsFieldGroupTerm5963);
                ftsWord165 = ftsWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWord165.getTree());

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupTerm"

    public static class ftsFieldGroupExactTerm_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupExactTerm"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:721:1: ftsFieldGroupExactTerm : EQUALS ftsFieldGroupTerm -> ftsFieldGroupTerm ;
    public final FTSParser.ftsFieldGroupExactTerm_return ftsFieldGroupExactTerm() throws RecognitionException
    {
        FTSParser.ftsFieldGroupExactTerm_return retval = new FTSParser.ftsFieldGroupExactTerm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS166 = null;
        ParserRuleReturnScope ftsFieldGroupTerm167 = null;

        Object EQUALS166_tree = null;
        RewriteRuleTokenStream stream_EQUALS = new RewriteRuleTokenStream(adaptor, "token EQUALS");
        RewriteRuleSubtreeStream stream_ftsFieldGroupTerm = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupTerm");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:722:9: ( EQUALS ftsFieldGroupTerm -> ftsFieldGroupTerm )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:723:9: EQUALS ftsFieldGroupTerm
            {
                EQUALS166 = (Token) match(input, EQUALS, FOLLOW_EQUALS_in_ftsFieldGroupExactTerm5996);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_EQUALS.add(EQUALS166);

                pushFollow(FOLLOW_ftsFieldGroupTerm_in_ftsFieldGroupExactTerm5998);
                ftsFieldGroupTerm167 = ftsFieldGroupTerm();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTerm.add(ftsFieldGroupTerm167.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupTerm
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 724:17: -> ftsFieldGroupTerm
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupTerm.nextTree());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupExactTerm"

    public static class ftsFieldGroupPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:727:1: ftsFieldGroupPhrase : FTSPHRASE ;
    public final FTSParser.ftsFieldGroupPhrase_return ftsFieldGroupPhrase() throws RecognitionException
    {
        FTSParser.ftsFieldGroupPhrase_return retval = new FTSParser.ftsFieldGroupPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token FTSPHRASE168 = null;

        Object FTSPHRASE168_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:728:9: ( FTSPHRASE )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:729:9: FTSPHRASE
            {
                root_0 = (Object) adaptor.nil();

                FTSPHRASE168 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsFieldGroupPhrase6051);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSPHRASE168_tree = (Object) adaptor.create(FTSPHRASE168);
                    adaptor.addChild(root_0, FTSPHRASE168_tree);
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupPhrase"

    public static class ftsFieldGroupExactPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupExactPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:732:1: ftsFieldGroupExactPhrase : EQUALS ftsFieldGroupExactPhrase -> ftsFieldGroupExactPhrase ;
    public final FTSParser.ftsFieldGroupExactPhrase_return ftsFieldGroupExactPhrase() throws RecognitionException
    {
        FTSParser.ftsFieldGroupExactPhrase_return retval = new FTSParser.ftsFieldGroupExactPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token EQUALS169 = null;
        ParserRuleReturnScope ftsFieldGroupExactPhrase170 = null;

        Object EQUALS169_tree = null;
        RewriteRuleTokenStream stream_EQUALS = new RewriteRuleTokenStream(adaptor, "token EQUALS");
        RewriteRuleSubtreeStream stream_ftsFieldGroupExactPhrase = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupExactPhrase");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:733:9: ( EQUALS ftsFieldGroupExactPhrase -> ftsFieldGroupExactPhrase )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:734:9: EQUALS ftsFieldGroupExactPhrase
            {
                EQUALS169 = (Token) match(input, EQUALS, FOLLOW_EQUALS_in_ftsFieldGroupExactPhrase6092);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_EQUALS.add(EQUALS169);

                pushFollow(FOLLOW_ftsFieldGroupExactPhrase_in_ftsFieldGroupExactPhrase6094);
                ftsFieldGroupExactPhrase170 = ftsFieldGroupExactPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupExactPhrase.add(ftsFieldGroupExactPhrase170.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupExactPhrase
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 735:17: -> ftsFieldGroupExactPhrase
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupExactPhrase.nextTree());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupExactPhrase"

    public static class ftsFieldGroupTokenisedPhrase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupTokenisedPhrase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:738:1: ftsFieldGroupTokenisedPhrase : TILDA ftsFieldGroupExactPhrase -> ftsFieldGroupExactPhrase ;
    public final FTSParser.ftsFieldGroupTokenisedPhrase_return ftsFieldGroupTokenisedPhrase() throws RecognitionException
    {
        FTSParser.ftsFieldGroupTokenisedPhrase_return retval = new FTSParser.ftsFieldGroupTokenisedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TILDA171 = null;
        ParserRuleReturnScope ftsFieldGroupExactPhrase172 = null;

        Object TILDA171_tree = null;
        RewriteRuleTokenStream stream_TILDA = new RewriteRuleTokenStream(adaptor, "token TILDA");
        RewriteRuleSubtreeStream stream_ftsFieldGroupExactPhrase = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupExactPhrase");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:739:9: ( TILDA ftsFieldGroupExactPhrase -> ftsFieldGroupExactPhrase )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:740:9: TILDA ftsFieldGroupExactPhrase
            {
                TILDA171 = (Token) match(input, TILDA, FOLLOW_TILDA_in_ftsFieldGroupTokenisedPhrase6155);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TILDA.add(TILDA171);

                pushFollow(FOLLOW_ftsFieldGroupExactPhrase_in_ftsFieldGroupTokenisedPhrase6157);
                ftsFieldGroupExactPhrase172 = ftsFieldGroupExactPhrase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupExactPhrase.add(ftsFieldGroupExactPhrase172.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupExactPhrase
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 741:17: -> ftsFieldGroupExactPhrase
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupExactPhrase.nextTree());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupTokenisedPhrase"

    public static class ftsFieldGroupSynonym_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupSynonym"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:744:1: ftsFieldGroupSynonym : TILDA ftsFieldGroupTerm -> ftsFieldGroupTerm ;
    public final FTSParser.ftsFieldGroupSynonym_return ftsFieldGroupSynonym() throws RecognitionException
    {
        FTSParser.ftsFieldGroupSynonym_return retval = new FTSParser.ftsFieldGroupSynonym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token TILDA173 = null;
        ParserRuleReturnScope ftsFieldGroupTerm174 = null;

        Object TILDA173_tree = null;
        RewriteRuleTokenStream stream_TILDA = new RewriteRuleTokenStream(adaptor, "token TILDA");
        RewriteRuleSubtreeStream stream_ftsFieldGroupTerm = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupTerm");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:745:9: ( TILDA ftsFieldGroupTerm -> ftsFieldGroupTerm )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:746:9: TILDA ftsFieldGroupTerm
            {
                TILDA173 = (Token) match(input, TILDA, FOLLOW_TILDA_in_ftsFieldGroupSynonym6210);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TILDA.add(TILDA173);

                pushFollow(FOLLOW_ftsFieldGroupTerm_in_ftsFieldGroupSynonym6212);
                ftsFieldGroupTerm174 = ftsFieldGroupTerm();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupTerm.add(ftsFieldGroupTerm174.getTree());
                // AST REWRITE
                // elements: ftsFieldGroupTerm
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 747:17: -> ftsFieldGroupTerm
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupTerm.nextTree());
                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupSynonym"

    public static class ftsFieldGroupProximity_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupProximity"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:750:1: ftsFieldGroupProximity : ftsFieldGroupProximityTerm ( ( proximityGroup )=> proximityGroup ftsFieldGroupProximityTerm )+ -> ftsFieldGroupProximityTerm ( proximityGroup ftsFieldGroupProximityTerm )+ ;
    public final FTSParser.ftsFieldGroupProximity_return ftsFieldGroupProximity() throws RecognitionException
    {
        FTSParser.ftsFieldGroupProximity_return retval = new FTSParser.ftsFieldGroupProximity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope ftsFieldGroupProximityTerm175 = null;
        ParserRuleReturnScope proximityGroup176 = null;
        ParserRuleReturnScope ftsFieldGroupProximityTerm177 = null;

        RewriteRuleSubtreeStream stream_proximityGroup = new RewriteRuleSubtreeStream(adaptor, "rule proximityGroup");
        RewriteRuleSubtreeStream stream_ftsFieldGroupProximityTerm = new RewriteRuleSubtreeStream(adaptor, "rule ftsFieldGroupProximityTerm");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:751:9: ( ftsFieldGroupProximityTerm ( ( proximityGroup )=> proximityGroup ftsFieldGroupProximityTerm )+ -> ftsFieldGroupProximityTerm ( proximityGroup ftsFieldGroupProximityTerm )+ )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:752:9: ftsFieldGroupProximityTerm ( ( proximityGroup )=> proximityGroup ftsFieldGroupProximityTerm )+
            {
                pushFollow(FOLLOW_ftsFieldGroupProximityTerm_in_ftsFieldGroupProximity6265);
                ftsFieldGroupProximityTerm175 = ftsFieldGroupProximityTerm();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsFieldGroupProximityTerm.add(ftsFieldGroupProximityTerm175.getTree());
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:752:36: ( ( proximityGroup )=> proximityGroup ftsFieldGroupProximityTerm )+
                int cnt70 = 0;
                loop70: while (true)
                {
                    int alt70 = 2;
                    int LA70_0 = input.LA(1);
                    if ((LA70_0 == STAR))
                    {
                        switch (input.LA(2))
                        {
                        case STAR:
                        {
                            int LA70_3 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case NOT:
                        {
                            int LA70_4 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case ID:
                        {
                            int LA70_5 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case FTSWORD:
                        {
                            int LA70_6 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case FTSPRE:
                        {
                            int LA70_7 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case FTSWILD:
                        {
                            int LA70_8 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case TO:
                        {
                            int LA70_9 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case DECIMAL_INTEGER_LITERAL:
                        {
                            int LA70_10 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case FLOATING_POINT_LITERAL:
                        {
                            int LA70_11 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case DATETIME:
                        {
                            int LA70_12 = input.LA(3);
                            if ((synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        case URI:
                        {
                            switch (input.LA(3))
                            {
                            case ID:
                            {
                                int LA70_16 = input.LA(4);
                                if ((synpred47_FTS()))
                                {
                                    alt70 = 1;
                                }

                            }
                                break;
                            case TO:
                            {
                                int LA70_17 = input.LA(4);
                                if ((synpred47_FTS()))
                                {
                                    alt70 = 1;
                                }

                            }
                                break;
                            case OR:
                            {
                                int LA70_18 = input.LA(4);
                                if ((synpred47_FTS()))
                                {
                                    alt70 = 1;
                                }

                            }
                                break;
                            case AND:
                            {
                                int LA70_19 = input.LA(4);
                                if ((synpred47_FTS()))
                                {
                                    alt70 = 1;
                                }

                            }
                                break;
                            case NOT:
                            {
                                int LA70_20 = input.LA(4);
                                if ((synpred47_FTS()))
                                {
                                    alt70 = 1;
                                }

                            }
                                break;
                            }
                        }
                            break;
                        case LPAREN:
                        {
                            int LA70_14 = input.LA(3);
                            if ((LA70_14 == DECIMAL_INTEGER_LITERAL))
                            {
                                int LA70_21 = input.LA(4);
                                if ((LA70_21 == RPAREN))
                                {
                                    switch (input.LA(5))
                                    {
                                    case NOT:
                                    {
                                        int LA70_24 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case ID:
                                    {
                                        int LA70_25 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case FTSWORD:
                                    {
                                        int LA70_26 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case FTSPRE:
                                    {
                                        int LA70_27 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case FTSWILD:
                                    {
                                        int LA70_28 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case TO:
                                    {
                                        int LA70_29 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case DECIMAL_INTEGER_LITERAL:
                                    {
                                        int LA70_30 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case FLOATING_POINT_LITERAL:
                                    {
                                        int LA70_31 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case DATETIME:
                                    {
                                        int LA70_32 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case STAR:
                                    {
                                        int LA70_33 = input.LA(6);
                                        if ((synpred47_FTS()))
                                        {
                                            alt70 = 1;
                                        }

                                    }
                                        break;
                                    case URI:
                                    {
                                        switch (input.LA(6))
                                        {
                                        case ID:
                                        {
                                            int LA70_16 = input.LA(7);
                                            if ((synpred47_FTS()))
                                            {
                                                alt70 = 1;
                                            }

                                        }
                                            break;
                                        case TO:
                                        {
                                            int LA70_17 = input.LA(7);
                                            if ((synpred47_FTS()))
                                            {
                                                alt70 = 1;
                                            }

                                        }
                                            break;
                                        case OR:
                                        {
                                            int LA70_18 = input.LA(7);
                                            if ((synpred47_FTS()))
                                            {
                                                alt70 = 1;
                                            }

                                        }
                                            break;
                                        case AND:
                                        {
                                            int LA70_19 = input.LA(7);
                                            if ((synpred47_FTS()))
                                            {
                                                alt70 = 1;
                                            }

                                        }
                                            break;
                                        case NOT:
                                        {
                                            int LA70_20 = input.LA(7);
                                            if ((synpred47_FTS()))
                                            {
                                                alt70 = 1;
                                            }

                                        }
                                            break;
                                        }
                                    }
                                        break;
                                    }
                                }

                            }
                            else if ((LA70_14 == RPAREN) && (synpred47_FTS()))
                            {
                                alt70 = 1;
                            }

                        }
                            break;
                        }
                    }

                    switch (alt70)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:752:38: ( proximityGroup )=> proximityGroup ftsFieldGroupProximityTerm
                    {
                        pushFollow(FOLLOW_proximityGroup_in_ftsFieldGroupProximity6275);
                        proximityGroup176 = proximityGroup();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_proximityGroup.add(proximityGroup176.getTree());
                        pushFollow(FOLLOW_ftsFieldGroupProximityTerm_in_ftsFieldGroupProximity6277);
                        ftsFieldGroupProximityTerm177 = ftsFieldGroupProximityTerm();
                        state._fsp--;
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_ftsFieldGroupProximityTerm.add(ftsFieldGroupProximityTerm177.getTree());
                    }
                        break;

                    default:
                        if (cnt70 >= 1)
                            break loop70;
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(70, input);
                        throw eee;
                    }
                    cnt70++;
                }

                // AST REWRITE
                // elements: proximityGroup, ftsFieldGroupProximityTerm, ftsFieldGroupProximityTerm
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 753:17: -> ftsFieldGroupProximityTerm ( proximityGroup ftsFieldGroupProximityTerm )+
                    {
                        adaptor.addChild(root_0, stream_ftsFieldGroupProximityTerm.nextTree());
                        if (!(stream_proximityGroup.hasNext() || stream_ftsFieldGroupProximityTerm.hasNext()))
                        {
                            throw new RewriteEarlyExitException();
                        }
                        while (stream_proximityGroup.hasNext() || stream_ftsFieldGroupProximityTerm.hasNext())
                        {
                            adaptor.addChild(root_0, stream_proximityGroup.nextTree());
                            adaptor.addChild(root_0, stream_ftsFieldGroupProximityTerm.nextTree());
                        }
                        stream_proximityGroup.reset();
                        stream_ftsFieldGroupProximityTerm.reset();

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupProximity"

    public static class ftsFieldGroupProximityTerm_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupProximityTerm"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:756:1: ftsFieldGroupProximityTerm : ( ID | FTSWORD | FTSPRE | FTSWILD | NOT | TO | DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL | DATETIME | STAR | URI identifier );
    public final FTSParser.ftsFieldGroupProximityTerm_return ftsFieldGroupProximityTerm() throws RecognitionException
    {
        FTSParser.ftsFieldGroupProximityTerm_return retval = new FTSParser.ftsFieldGroupProximityTerm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID178 = null;
        Token FTSWORD179 = null;
        Token FTSPRE180 = null;
        Token FTSWILD181 = null;
        Token NOT182 = null;
        Token TO183 = null;
        Token DECIMAL_INTEGER_LITERAL184 = null;
        Token FLOATING_POINT_LITERAL185 = null;
        Token DATETIME186 = null;
        Token STAR187 = null;
        Token URI188 = null;
        ParserRuleReturnScope identifier189 = null;

        Object ID178_tree = null;
        Object FTSWORD179_tree = null;
        Object FTSPRE180_tree = null;
        Object FTSWILD181_tree = null;
        Object NOT182_tree = null;
        Object TO183_tree = null;
        Object DECIMAL_INTEGER_LITERAL184_tree = null;
        Object FLOATING_POINT_LITERAL185_tree = null;
        Object DATETIME186_tree = null;
        Object STAR187_tree = null;
        Object URI188_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:757:9: ( ID | FTSWORD | FTSPRE | FTSWILD | NOT | TO | DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL | DATETIME | STAR | URI identifier )
            int alt71 = 11;
            switch (input.LA(1))
            {
            case ID:
            {
                alt71 = 1;
            }
                break;
            case FTSWORD:
            {
                alt71 = 2;
            }
                break;
            case FTSPRE:
            {
                alt71 = 3;
            }
                break;
            case FTSWILD:
            {
                alt71 = 4;
            }
                break;
            case NOT:
            {
                alt71 = 5;
            }
                break;
            case TO:
            {
                alt71 = 6;
            }
                break;
            case DECIMAL_INTEGER_LITERAL:
            {
                alt71 = 7;
            }
                break;
            case FLOATING_POINT_LITERAL:
            {
                alt71 = 8;
            }
                break;
            case DATETIME:
            {
                alt71 = 9;
            }
                break;
            case STAR:
            {
                alt71 = 10;
            }
                break;
            case URI:
            {
                alt71 = 11;
            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
                throw nvae;
            }
            switch (alt71)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:758:11: ID
            {
                root_0 = (Object) adaptor.nil();

                ID178 = (Token) match(input, ID, FOLLOW_ID_in_ftsFieldGroupProximityTerm6341);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    ID178_tree = (Object) adaptor.create(ID178);
                    adaptor.addChild(root_0, ID178_tree);
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:759:11: FTSWORD
            {
                root_0 = (Object) adaptor.nil();

                FTSWORD179 = (Token) match(input, FTSWORD, FOLLOW_FTSWORD_in_ftsFieldGroupProximityTerm6353);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSWORD179_tree = (Object) adaptor.create(FTSWORD179);
                    adaptor.addChild(root_0, FTSWORD179_tree);
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:760:11: FTSPRE
            {
                root_0 = (Object) adaptor.nil();

                FTSPRE180 = (Token) match(input, FTSPRE, FOLLOW_FTSPRE_in_ftsFieldGroupProximityTerm6365);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSPRE180_tree = (Object) adaptor.create(FTSPRE180);
                    adaptor.addChild(root_0, FTSPRE180_tree);
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:761:11: FTSWILD
            {
                root_0 = (Object) adaptor.nil();

                FTSWILD181 = (Token) match(input, FTSWILD, FOLLOW_FTSWILD_in_ftsFieldGroupProximityTerm6377);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSWILD181_tree = (Object) adaptor.create(FTSWILD181);
                    adaptor.addChild(root_0, FTSWILD181_tree);
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:762:11: NOT
            {
                root_0 = (Object) adaptor.nil();

                NOT182 = (Token) match(input, NOT, FOLLOW_NOT_in_ftsFieldGroupProximityTerm6389);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    NOT182_tree = (Object) adaptor.create(NOT182);
                    adaptor.addChild(root_0, NOT182_tree);
                }

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:763:11: TO
            {
                root_0 = (Object) adaptor.nil();

                TO183 = (Token) match(input, TO, FOLLOW_TO_in_ftsFieldGroupProximityTerm6401);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    TO183_tree = (Object) adaptor.create(TO183);
                    adaptor.addChild(root_0, TO183_tree);
                }

            }
                break;
            case 7:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:764:11: DECIMAL_INTEGER_LITERAL
            {
                root_0 = (Object) adaptor.nil();

                DECIMAL_INTEGER_LITERAL184 = (Token) match(input, DECIMAL_INTEGER_LITERAL, FOLLOW_DECIMAL_INTEGER_LITERAL_in_ftsFieldGroupProximityTerm6413);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    DECIMAL_INTEGER_LITERAL184_tree = (Object) adaptor.create(DECIMAL_INTEGER_LITERAL184);
                    adaptor.addChild(root_0, DECIMAL_INTEGER_LITERAL184_tree);
                }

            }
                break;
            case 8:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:765:11: FLOATING_POINT_LITERAL
            {
                root_0 = (Object) adaptor.nil();

                FLOATING_POINT_LITERAL185 = (Token) match(input, FLOATING_POINT_LITERAL, FOLLOW_FLOATING_POINT_LITERAL_in_ftsFieldGroupProximityTerm6425);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FLOATING_POINT_LITERAL185_tree = (Object) adaptor.create(FLOATING_POINT_LITERAL185);
                    adaptor.addChild(root_0, FLOATING_POINT_LITERAL185_tree);
                }

            }
                break;
            case 9:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:766:11: DATETIME
            {
                root_0 = (Object) adaptor.nil();

                DATETIME186 = (Token) match(input, DATETIME, FOLLOW_DATETIME_in_ftsFieldGroupProximityTerm6437);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    DATETIME186_tree = (Object) adaptor.create(DATETIME186);
                    adaptor.addChild(root_0, DATETIME186_tree);
                }

            }
                break;
            case 10:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:767:11: STAR
            {
                root_0 = (Object) adaptor.nil();

                STAR187 = (Token) match(input, STAR, FOLLOW_STAR_in_ftsFieldGroupProximityTerm6449);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    STAR187_tree = (Object) adaptor.create(STAR187);
                    adaptor.addChild(root_0, STAR187_tree);
                }

            }
                break;
            case 11:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:768:11: URI identifier
            {
                root_0 = (Object) adaptor.nil();

                URI188 = (Token) match(input, URI, FOLLOW_URI_in_ftsFieldGroupProximityTerm6461);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    URI188_tree = (Object) adaptor.create(URI188);
                    adaptor.addChild(root_0, URI188_tree);
                }

                pushFollow(FOLLOW_identifier_in_ftsFieldGroupProximityTerm6463);
                identifier189 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, identifier189.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupProximityTerm"

    public static class proximityGroup_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "proximityGroup"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:771:1: proximityGroup : STAR ( LPAREN ( DECIMAL_INTEGER_LITERAL )? RPAREN )? -> ^( PROXIMITY ( DECIMAL_INTEGER_LITERAL )? ) ;
    public final FTSParser.proximityGroup_return proximityGroup() throws RecognitionException
    {
        FTSParser.proximityGroup_return retval = new FTSParser.proximityGroup_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token STAR190 = null;
        Token LPAREN191 = null;
        Token DECIMAL_INTEGER_LITERAL192 = null;
        Token RPAREN193 = null;

        Object STAR190_tree = null;
        Object LPAREN191_tree = null;
        Object DECIMAL_INTEGER_LITERAL192_tree = null;
        Object RPAREN193_tree = null;
        RewriteRuleTokenStream stream_DECIMAL_INTEGER_LITERAL = new RewriteRuleTokenStream(adaptor, "token DECIMAL_INTEGER_LITERAL");
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor, "token STAR");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:772:9: ( STAR ( LPAREN ( DECIMAL_INTEGER_LITERAL )? RPAREN )? -> ^( PROXIMITY ( DECIMAL_INTEGER_LITERAL )? ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:773:9: STAR ( LPAREN ( DECIMAL_INTEGER_LITERAL )? RPAREN )?
            {
                STAR190 = (Token) match(input, STAR, FOLLOW_STAR_in_proximityGroup6496);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_STAR.add(STAR190);

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:773:14: ( LPAREN ( DECIMAL_INTEGER_LITERAL )? RPAREN )?
                int alt73 = 2;
                int LA73_0 = input.LA(1);
                if ((LA73_0 == LPAREN))
                {
                    alt73 = 1;
                }
                switch (alt73)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:773:15: LPAREN ( DECIMAL_INTEGER_LITERAL )? RPAREN
                {
                    LPAREN191 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_proximityGroup6499);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_LPAREN.add(LPAREN191);

                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:773:22: ( DECIMAL_INTEGER_LITERAL )?
                    int alt72 = 2;
                    int LA72_0 = input.LA(1);
                    if ((LA72_0 == DECIMAL_INTEGER_LITERAL))
                    {
                        alt72 = 1;
                    }
                    switch (alt72)
                    {
                    case 1:
                    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:773:22: DECIMAL_INTEGER_LITERAL
                    {
                        DECIMAL_INTEGER_LITERAL192 = (Token) match(input, DECIMAL_INTEGER_LITERAL, FOLLOW_DECIMAL_INTEGER_LITERAL_in_proximityGroup6501);
                        if (state.failed)
                            return retval;
                        if (state.backtracking == 0)
                            stream_DECIMAL_INTEGER_LITERAL.add(DECIMAL_INTEGER_LITERAL192);

                    }
                        break;

                    }

                    RPAREN193 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_proximityGroup6504);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_RPAREN.add(RPAREN193);

                }
                    break;

                }

                // AST REWRITE
                // elements: DECIMAL_INTEGER_LITERAL
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 774:17: -> ^( PROXIMITY ( DECIMAL_INTEGER_LITERAL )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:775:25: ^( PROXIMITY ( DECIMAL_INTEGER_LITERAL )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PROXIMITY, "PROXIMITY"), root_1);
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:775:37: ( DECIMAL_INTEGER_LITERAL )?
                            if (stream_DECIMAL_INTEGER_LITERAL.hasNext())
                            {
                                adaptor.addChild(root_1, stream_DECIMAL_INTEGER_LITERAL.nextNode());
                            }
                            stream_DECIMAL_INTEGER_LITERAL.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "proximityGroup"

    public static class ftsFieldGroupRange_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsFieldGroupRange"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:778:1: ftsFieldGroupRange : ( ftsRangeWord DOTDOT ftsRangeWord -> INCLUSIVE ftsRangeWord ftsRangeWord INCLUSIVE | range_left ftsRangeWord TO ftsRangeWord range_right -> range_left ftsRangeWord ftsRangeWord range_right );
    public final FTSParser.ftsFieldGroupRange_return ftsFieldGroupRange() throws RecognitionException
    {
        FTSParser.ftsFieldGroupRange_return retval = new FTSParser.ftsFieldGroupRange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token DOTDOT195 = null;
        Token TO199 = null;
        ParserRuleReturnScope ftsRangeWord194 = null;
        ParserRuleReturnScope ftsRangeWord196 = null;
        ParserRuleReturnScope range_left197 = null;
        ParserRuleReturnScope ftsRangeWord198 = null;
        ParserRuleReturnScope ftsRangeWord200 = null;
        ParserRuleReturnScope range_right201 = null;

        Object DOTDOT195_tree = null;
        Object TO199_tree = null;
        RewriteRuleTokenStream stream_DOTDOT = new RewriteRuleTokenStream(adaptor, "token DOTDOT");
        RewriteRuleTokenStream stream_TO = new RewriteRuleTokenStream(adaptor, "token TO");
        RewriteRuleSubtreeStream stream_range_left = new RewriteRuleSubtreeStream(adaptor, "rule range_left");
        RewriteRuleSubtreeStream stream_ftsRangeWord = new RewriteRuleSubtreeStream(adaptor, "rule ftsRangeWord");
        RewriteRuleSubtreeStream stream_range_right = new RewriteRuleSubtreeStream(adaptor, "rule range_right");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:779:9: ( ftsRangeWord DOTDOT ftsRangeWord -> INCLUSIVE ftsRangeWord ftsRangeWord INCLUSIVE | range_left ftsRangeWord TO ftsRangeWord range_right -> range_left ftsRangeWord ftsRangeWord range_right )
            int alt74 = 2;
            int LA74_0 = input.LA(1);
            if ((LA74_0 == DATETIME || LA74_0 == DECIMAL_INTEGER_LITERAL || LA74_0 == FLOATING_POINT_LITERAL || (LA74_0 >= FTSPHRASE && LA74_0 <= FTSWORD) || LA74_0 == ID || LA74_0 == STAR || LA74_0 == URI))
            {
                alt74 = 1;
            }
            else if (((LA74_0 >= LSQUARE && LA74_0 <= LT)))
            {
                alt74 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
                throw nvae;
            }

            switch (alt74)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:780:9: ftsRangeWord DOTDOT ftsRangeWord
            {
                pushFollow(FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6588);
                ftsRangeWord194 = ftsRangeWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsRangeWord.add(ftsRangeWord194.getTree());
                DOTDOT195 = (Token) match(input, DOTDOT, FOLLOW_DOTDOT_in_ftsFieldGroupRange6590);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_DOTDOT.add(DOTDOT195);

                pushFollow(FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6592);
                ftsRangeWord196 = ftsRangeWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsRangeWord.add(ftsRangeWord196.getTree());
                // AST REWRITE
                // elements: ftsRangeWord, ftsRangeWord
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 781:17: -> INCLUSIVE ftsRangeWord ftsRangeWord INCLUSIVE
                    {
                        adaptor.addChild(root_0, (Object) adaptor.create(INCLUSIVE, "INCLUSIVE"));
                        adaptor.addChild(root_0, stream_ftsRangeWord.nextTree());
                        adaptor.addChild(root_0, stream_ftsRangeWord.nextTree());
                        adaptor.addChild(root_0, (Object) adaptor.create(INCLUSIVE, "INCLUSIVE"));
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:782:11: range_left ftsRangeWord TO ftsRangeWord range_right
            {
                pushFollow(FOLLOW_range_left_in_ftsFieldGroupRange6630);
                range_left197 = range_left();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_range_left.add(range_left197.getTree());
                pushFollow(FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6632);
                ftsRangeWord198 = ftsRangeWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsRangeWord.add(ftsRangeWord198.getTree());
                TO199 = (Token) match(input, TO, FOLLOW_TO_in_ftsFieldGroupRange6634);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TO.add(TO199);

                pushFollow(FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6636);
                ftsRangeWord200 = ftsRangeWord();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ftsRangeWord.add(ftsRangeWord200.getTree());
                pushFollow(FOLLOW_range_right_in_ftsFieldGroupRange6638);
                range_right201 = range_right();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_range_right.add(range_right201.getTree());
                // AST REWRITE
                // elements: range_left, ftsRangeWord, ftsRangeWord, range_right
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 783:17: -> range_left ftsRangeWord ftsRangeWord range_right
                    {
                        adaptor.addChild(root_0, stream_range_left.nextTree());
                        adaptor.addChild(root_0, stream_ftsRangeWord.nextTree());
                        adaptor.addChild(root_0, stream_ftsRangeWord.nextTree());
                        adaptor.addChild(root_0, stream_range_right.nextTree());
                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsFieldGroupRange"

    public static class range_left_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "range_left"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:786:1: range_left : ( LSQUARE -> INCLUSIVE | LT -> EXCLUSIVE );
    public final FTSParser.range_left_return range_left() throws RecognitionException
    {
        FTSParser.range_left_return retval = new FTSParser.range_left_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token LSQUARE202 = null;
        Token LT203 = null;

        Object LSQUARE202_tree = null;
        Object LT203_tree = null;
        RewriteRuleTokenStream stream_LSQUARE = new RewriteRuleTokenStream(adaptor, "token LSQUARE");
        RewriteRuleTokenStream stream_LT = new RewriteRuleTokenStream(adaptor, "token LT");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:787:9: ( LSQUARE -> INCLUSIVE | LT -> EXCLUSIVE )
            int alt75 = 2;
            int LA75_0 = input.LA(1);
            if ((LA75_0 == LSQUARE))
            {
                alt75 = 1;
            }
            else if ((LA75_0 == LT))
            {
                alt75 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
                throw nvae;
            }

            switch (alt75)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:788:9: LSQUARE
            {
                LSQUARE202 = (Token) match(input, LSQUARE, FOLLOW_LSQUARE_in_range_left6697);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_LSQUARE.add(LSQUARE202);

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 789:17: -> INCLUSIVE
                    {
                        adaptor.addChild(root_0, (Object) adaptor.create(INCLUSIVE, "INCLUSIVE"));
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:790:11: LT
            {
                LT203 = (Token) match(input, LT, FOLLOW_LT_in_range_left6729);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_LT.add(LT203);

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 791:17: -> EXCLUSIVE
                    {
                        adaptor.addChild(root_0, (Object) adaptor.create(EXCLUSIVE, "EXCLUSIVE"));
                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "range_left"

    public static class range_right_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "range_right"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:794:1: range_right : ( RSQUARE -> INCLUSIVE | GT -> EXCLUSIVE );
    public final FTSParser.range_right_return range_right() throws RecognitionException
    {
        FTSParser.range_right_return retval = new FTSParser.range_right_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token RSQUARE204 = null;
        Token GT205 = null;

        Object RSQUARE204_tree = null;
        Object GT205_tree = null;
        RewriteRuleTokenStream stream_RSQUARE = new RewriteRuleTokenStream(adaptor, "token RSQUARE");
        RewriteRuleTokenStream stream_GT = new RewriteRuleTokenStream(adaptor, "token GT");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:795:9: ( RSQUARE -> INCLUSIVE | GT -> EXCLUSIVE )
            int alt76 = 2;
            int LA76_0 = input.LA(1);
            if ((LA76_0 == RSQUARE))
            {
                alt76 = 1;
            }
            else if ((LA76_0 == GT))
            {
                alt76 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
                throw nvae;
            }

            switch (alt76)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:796:9: RSQUARE
            {
                RSQUARE204 = (Token) match(input, RSQUARE, FOLLOW_RSQUARE_in_range_right6782);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_RSQUARE.add(RSQUARE204);

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 797:17: -> INCLUSIVE
                    {
                        adaptor.addChild(root_0, (Object) adaptor.create(INCLUSIVE, "INCLUSIVE"));
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:798:11: GT
            {
                GT205 = (Token) match(input, GT, FOLLOW_GT_in_range_right6814);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_GT.add(GT205);

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 799:17: -> EXCLUSIVE
                    {
                        adaptor.addChild(root_0, (Object) adaptor.create(EXCLUSIVE, "EXCLUSIVE"));
                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "range_right"

    public static class fieldReference_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "fieldReference"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:802:1: fieldReference : ( fieldReferenceWithPrefix | fieldReferenceWithoutPrefix );
    public final FTSParser.fieldReference_return fieldReference() throws RecognitionException
    {
        FTSParser.fieldReference_return retval = new FTSParser.fieldReference_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ParserRuleReturnScope fieldReferenceWithPrefix206 = null;
        ParserRuleReturnScope fieldReferenceWithoutPrefix207 = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:803:9: ( fieldReferenceWithPrefix | fieldReferenceWithoutPrefix )
            int alt77 = 2;
            switch (input.LA(1))
            {
            case AT:
            {
                switch (input.LA(2))
                {
                case ID:
                {
                    int LA77_2 = input.LA(3);
                    if ((LA77_2 == DOT))
                    {
                        int LA77_8 = input.LA(4);
                        if ((LA77_8 == ID))
                        {
                            int LA77_10 = input.LA(5);
                            if ((LA77_10 == COLON))
                            {
                                switch (input.LA(6))
                                {
                                case DATETIME:
                                case DECIMAL_INTEGER_LITERAL:
                                case FLOATING_POINT_LITERAL:
                                case FTSPHRASE:
                                case FTSPRE:
                                case FTSWILD:
                                case FTSWORD:
                                case LPAREN:
                                case LSQUARE:
                                case LT:
                                case STAR:
                                case URI:
                                {
                                    alt77 = 2;
                                }
                                    break;
                                case ID:
                                {
                                    int LA77_11 = input.LA(7);
                                    if ((LA77_11 == COLON || LA77_11 == DOT))
                                    {
                                        alt77 = 1;
                                    }
                                    else if ((LA77_11 == DOTDOT))
                                    {
                                        alt77 = 2;
                                    }

                                    else
                                    {
                                        if (state.backtracking > 0)
                                        {
                                            state.failed = true;
                                            return retval;
                                        }
                                        int nvaeMark = input.mark();
                                        try
                                        {
                                            for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++)
                                            {
                                                input.consume();
                                            }
                                            NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                            throw nvae;
                                        }
                                        finally
                                        {
                                            input.rewind(nvaeMark);
                                        }
                                    }

                                }
                                    break;
                                case AND:
                                case NOT:
                                case OR:
                                case TO:
                                {
                                    alt77 = 1;
                                }
                                    break;
                                default:
                                    if (state.backtracking > 0)
                                    {
                                        state.failed = true;
                                        return retval;
                                    }
                                    int nvaeMark = input.mark();
                                    try
                                    {
                                        for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++)
                                        {
                                            input.consume();
                                        }
                                        NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                        throw nvae;
                                    }
                                    finally
                                    {
                                        input.rewind(nvaeMark);
                                    }
                                }
                            }

                            else
                            {
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 10, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }

                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 8, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                    else if ((LA77_2 == COLON))
                    {
                        switch (input.LA(4))
                        {
                        case DATETIME:
                        case DECIMAL_INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case FTSPHRASE:
                        case FTSPRE:
                        case FTSWILD:
                        case FTSWORD:
                        case LPAREN:
                        case LSQUARE:
                        case LT:
                        case STAR:
                        case URI:
                        {
                            alt77 = 2;
                        }
                            break;
                        case ID:
                        {
                            int LA77_11 = input.LA(5);
                            if ((LA77_11 == COLON || LA77_11 == DOT))
                            {
                                alt77 = 1;
                            }
                            else if ((LA77_11 == DOTDOT))
                            {
                                alt77 = 2;
                            }

                            else
                            {
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }

                        }
                            break;
                        case AND:
                        case NOT:
                        case OR:
                        case TO:
                        {
                            alt77 = 1;
                        }
                            break;
                        default:
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 2, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                    break;
                case TO:
                {
                    int LA77_3 = input.LA(3);
                    if ((LA77_3 == COLON))
                    {
                        switch (input.LA(4))
                        {
                        case DATETIME:
                        case DECIMAL_INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case FTSPHRASE:
                        case FTSPRE:
                        case FTSWILD:
                        case FTSWORD:
                        case LPAREN:
                        case LSQUARE:
                        case LT:
                        case STAR:
                        case URI:
                        {
                            alt77 = 2;
                        }
                            break;
                        case ID:
                        {
                            int LA77_11 = input.LA(5);
                            if ((LA77_11 == COLON || LA77_11 == DOT))
                            {
                                alt77 = 1;
                            }
                            else if ((LA77_11 == DOTDOT))
                            {
                                alt77 = 2;
                            }

                            else
                            {
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }

                        }
                            break;
                        case AND:
                        case NOT:
                        case OR:
                        case TO:
                        {
                            alt77 = 1;
                        }
                            break;
                        default:
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 3, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                    break;
                case OR:
                {
                    int LA77_4 = input.LA(3);
                    if ((LA77_4 == COLON))
                    {
                        switch (input.LA(4))
                        {
                        case DATETIME:
                        case DECIMAL_INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case FTSPHRASE:
                        case FTSPRE:
                        case FTSWILD:
                        case FTSWORD:
                        case LPAREN:
                        case LSQUARE:
                        case LT:
                        case STAR:
                        case URI:
                        {
                            alt77 = 2;
                        }
                            break;
                        case ID:
                        {
                            int LA77_11 = input.LA(5);
                            if ((LA77_11 == COLON || LA77_11 == DOT))
                            {
                                alt77 = 1;
                            }
                            else if ((LA77_11 == DOTDOT))
                            {
                                alt77 = 2;
                            }

                            else
                            {
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }

                        }
                            break;
                        case AND:
                        case NOT:
                        case OR:
                        case TO:
                        {
                            alt77 = 1;
                        }
                            break;
                        default:
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 4, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                    break;
                case AND:
                {
                    int LA77_5 = input.LA(3);
                    if ((LA77_5 == COLON))
                    {
                        switch (input.LA(4))
                        {
                        case DATETIME:
                        case DECIMAL_INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case FTSPHRASE:
                        case FTSPRE:
                        case FTSWILD:
                        case FTSWORD:
                        case LPAREN:
                        case LSQUARE:
                        case LT:
                        case STAR:
                        case URI:
                        {
                            alt77 = 2;
                        }
                            break;
                        case ID:
                        {
                            int LA77_11 = input.LA(5);
                            if ((LA77_11 == COLON || LA77_11 == DOT))
                            {
                                alt77 = 1;
                            }
                            else if ((LA77_11 == DOTDOT))
                            {
                                alt77 = 2;
                            }

                            else
                            {
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }

                        }
                            break;
                        case AND:
                        case NOT:
                        case OR:
                        case TO:
                        {
                            alt77 = 1;
                        }
                            break;
                        default:
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 5, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                    break;
                case NOT:
                {
                    int LA77_6 = input.LA(3);
                    if ((LA77_6 == COLON))
                    {
                        switch (input.LA(4))
                        {
                        case DATETIME:
                        case DECIMAL_INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case FTSPHRASE:
                        case FTSPRE:
                        case FTSWILD:
                        case FTSWORD:
                        case LPAREN:
                        case LSQUARE:
                        case LT:
                        case STAR:
                        case URI:
                        {
                            alt77 = 2;
                        }
                            break;
                        case ID:
                        {
                            int LA77_11 = input.LA(5);
                            if ((LA77_11 == COLON || LA77_11 == DOT))
                            {
                                alt77 = 1;
                            }
                            else if ((LA77_11 == DOTDOT))
                            {
                                alt77 = 2;
                            }

                            else
                            {
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }

                        }
                            break;
                        case AND:
                        case NOT:
                        case OR:
                        case TO:
                        {
                            alt77 = 1;
                        }
                            break;
                        default:
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 6, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                    break;
                case URI:
                {
                    alt77 = 2;
                }
                    break;
                default:
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 77, 1, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }
            }
                break;
            case ID:
            {
                int LA77_2 = input.LA(2);
                if ((LA77_2 == DOT))
                {
                    int LA77_8 = input.LA(3);
                    if ((LA77_8 == ID))
                    {
                        int LA77_10 = input.LA(4);
                        if ((LA77_10 == COLON))
                        {
                            switch (input.LA(5))
                            {
                            case DATETIME:
                            case DECIMAL_INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case FTSPHRASE:
                            case FTSPRE:
                            case FTSWILD:
                            case FTSWORD:
                            case LPAREN:
                            case LSQUARE:
                            case LT:
                            case STAR:
                            case URI:
                            {
                                alt77 = 2;
                            }
                                break;
                            case ID:
                            {
                                int LA77_11 = input.LA(6);
                                if ((LA77_11 == COLON || LA77_11 == DOT))
                                {
                                    alt77 = 1;
                                }
                                else if ((LA77_11 == DOTDOT))
                                {
                                    alt77 = 2;
                                }

                                else
                                {
                                    if (state.backtracking > 0)
                                    {
                                        state.failed = true;
                                        return retval;
                                    }
                                    int nvaeMark = input.mark();
                                    try
                                    {
                                        for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++)
                                        {
                                            input.consume();
                                        }
                                        NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                        throw nvae;
                                    }
                                    finally
                                    {
                                        input.rewind(nvaeMark);
                                    }
                                }

                            }
                                break;
                            case AND:
                            case NOT:
                            case OR:
                            case TO:
                            {
                                alt77 = 1;
                            }
                                break;
                            default:
                                if (state.backtracking > 0)
                                {
                                    state.failed = true;
                                    return retval;
                                }
                                int nvaeMark = input.mark();
                                try
                                {
                                    for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++)
                                    {
                                        input.consume();
                                    }
                                    NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                                    throw nvae;
                                }
                                finally
                                {
                                    input.rewind(nvaeMark);
                                }
                            }
                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 10, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 8, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                else if ((LA77_2 == COLON))
                {
                    switch (input.LA(3))
                    {
                    case DATETIME:
                    case DECIMAL_INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case FTSPHRASE:
                    case FTSPRE:
                    case FTSWILD:
                    case FTSWORD:
                    case LPAREN:
                    case LSQUARE:
                    case LT:
                    case STAR:
                    case URI:
                    {
                        alt77 = 2;
                    }
                        break;
                    case ID:
                    {
                        int LA77_11 = input.LA(4);
                        if ((LA77_11 == COLON || LA77_11 == DOT))
                        {
                            alt77 = 1;
                        }
                        else if ((LA77_11 == DOTDOT))
                        {
                            alt77 = 2;
                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                        break;
                    case AND:
                    case NOT:
                    case OR:
                    case TO:
                    {
                        alt77 = 1;
                    }
                        break;
                    default:
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 77, 2, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case TO:
            {
                int LA77_3 = input.LA(2);
                if ((LA77_3 == COLON))
                {
                    switch (input.LA(3))
                    {
                    case DATETIME:
                    case DECIMAL_INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case FTSPHRASE:
                    case FTSPRE:
                    case FTSWILD:
                    case FTSWORD:
                    case LPAREN:
                    case LSQUARE:
                    case LT:
                    case STAR:
                    case URI:
                    {
                        alt77 = 2;
                    }
                        break;
                    case ID:
                    {
                        int LA77_11 = input.LA(4);
                        if ((LA77_11 == COLON || LA77_11 == DOT))
                        {
                            alt77 = 1;
                        }
                        else if ((LA77_11 == DOTDOT))
                        {
                            alt77 = 2;
                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                        break;
                    case AND:
                    case NOT:
                    case OR:
                    case TO:
                    {
                        alt77 = 1;
                    }
                        break;
                    default:
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 77, 3, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case OR:
            {
                int LA77_4 = input.LA(2);
                if ((LA77_4 == COLON))
                {
                    switch (input.LA(3))
                    {
                    case DATETIME:
                    case DECIMAL_INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case FTSPHRASE:
                    case FTSPRE:
                    case FTSWILD:
                    case FTSWORD:
                    case LPAREN:
                    case LSQUARE:
                    case LT:
                    case STAR:
                    case URI:
                    {
                        alt77 = 2;
                    }
                        break;
                    case ID:
                    {
                        int LA77_11 = input.LA(4);
                        if ((LA77_11 == COLON || LA77_11 == DOT))
                        {
                            alt77 = 1;
                        }
                        else if ((LA77_11 == DOTDOT))
                        {
                            alt77 = 2;
                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                        break;
                    case AND:
                    case NOT:
                    case OR:
                    case TO:
                    {
                        alt77 = 1;
                    }
                        break;
                    default:
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 77, 4, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case AND:
            {
                int LA77_5 = input.LA(2);
                if ((LA77_5 == COLON))
                {
                    switch (input.LA(3))
                    {
                    case DATETIME:
                    case DECIMAL_INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case FTSPHRASE:
                    case FTSPRE:
                    case FTSWILD:
                    case FTSWORD:
                    case LPAREN:
                    case LSQUARE:
                    case LT:
                    case STAR:
                    case URI:
                    {
                        alt77 = 2;
                    }
                        break;
                    case ID:
                    {
                        int LA77_11 = input.LA(4);
                        if ((LA77_11 == COLON || LA77_11 == DOT))
                        {
                            alt77 = 1;
                        }
                        else if ((LA77_11 == DOTDOT))
                        {
                            alt77 = 2;
                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                        break;
                    case AND:
                    case NOT:
                    case OR:
                    case TO:
                    {
                        alt77 = 1;
                    }
                        break;
                    default:
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 77, 5, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case NOT:
            {
                int LA77_6 = input.LA(2);
                if ((LA77_6 == COLON))
                {
                    switch (input.LA(3))
                    {
                    case DATETIME:
                    case DECIMAL_INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case FTSPHRASE:
                    case FTSPRE:
                    case FTSWILD:
                    case FTSWORD:
                    case LPAREN:
                    case LSQUARE:
                    case LT:
                    case STAR:
                    case URI:
                    {
                        alt77 = 2;
                    }
                        break;
                    case ID:
                    {
                        int LA77_11 = input.LA(4);
                        if ((LA77_11 == COLON || LA77_11 == DOT))
                        {
                            alt77 = 1;
                        }
                        else if ((LA77_11 == DOTDOT))
                        {
                            alt77 = 2;
                        }

                        else
                        {
                            if (state.backtracking > 0)
                            {
                                state.failed = true;
                                return retval;
                            }
                            int nvaeMark = input.mark();
                            try
                            {
                                for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++)
                                {
                                    input.consume();
                                }
                                NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
                                throw nvae;
                            }
                            finally
                            {
                                input.rewind(nvaeMark);
                            }
                        }

                    }
                        break;
                    case AND:
                    case NOT:
                    case OR:
                    case TO:
                    {
                        alt77 = 1;
                    }
                        break;
                    default:
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 77, 6, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case URI:
            {
                alt77 = 2;
            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
                throw nvae;
            }
            switch (alt77)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:804:9: fieldReferenceWithPrefix
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_fieldReferenceWithPrefix_in_fieldReference6867);
                fieldReferenceWithPrefix206 = fieldReferenceWithPrefix();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, fieldReferenceWithPrefix206.getTree());

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:805:11: fieldReferenceWithoutPrefix
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_fieldReference6879);
                fieldReferenceWithoutPrefix207 = fieldReferenceWithoutPrefix();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, fieldReferenceWithoutPrefix207.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fieldReference"

    public static class fieldReferenceWithoutPrefix_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "fieldReferenceWithoutPrefix"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:807:1: fieldReferenceWithoutPrefix : ( AT )? ( uri )? identifier -> ^( FIELD_REF identifier ( uri )? ) ;
    public final FTSParser.fieldReferenceWithoutPrefix_return fieldReferenceWithoutPrefix() throws RecognitionException
    {
        FTSParser.fieldReferenceWithoutPrefix_return retval = new FTSParser.fieldReferenceWithoutPrefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT208 = null;
        ParserRuleReturnScope uri209 = null;
        ParserRuleReturnScope identifier210 = null;

        Object AT208_tree = null;
        RewriteRuleTokenStream stream_AT = new RewriteRuleTokenStream(adaptor, "token AT");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");
        RewriteRuleSubtreeStream stream_uri = new RewriteRuleSubtreeStream(adaptor, "rule uri");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:808:9: ( ( AT )? ( uri )? identifier -> ^( FIELD_REF identifier ( uri )? ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:809:9: ( AT )? ( uri )? identifier
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:809:9: ( AT )?
                int alt78 = 2;
                int LA78_0 = input.LA(1);
                if ((LA78_0 == AT))
                {
                    alt78 = 1;
                }
                switch (alt78)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:809:9: AT
                {
                    AT208 = (Token) match(input, AT, FOLLOW_AT_in_fieldReferenceWithoutPrefix6903);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_AT.add(AT208);

                }
                    break;

                }

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:810:9: ( uri )?
                int alt79 = 2;
                int LA79_0 = input.LA(1);
                if ((LA79_0 == URI))
                {
                    alt79 = 1;
                }
                switch (alt79)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:810:9: uri
                {
                    pushFollow(FOLLOW_uri_in_fieldReferenceWithoutPrefix6914);
                    uri209 = uri();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_uri.add(uri209.getTree());
                }
                    break;

                }

                pushFollow(FOLLOW_identifier_in_fieldReferenceWithoutPrefix6925);
                identifier210 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_identifier.add(identifier210.getTree());
                // AST REWRITE
                // elements: uri, identifier
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 812:17: -> ^( FIELD_REF identifier ( uri )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:813:25: ^( FIELD_REF identifier ( uri )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_REF, "FIELD_REF"), root_1);
                            adaptor.addChild(root_1, stream_identifier.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:813:48: ( uri )?
                            if (stream_uri.hasNext())
                            {
                                adaptor.addChild(root_1, stream_uri.nextTree());
                            }
                            stream_uri.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fieldReferenceWithoutPrefix"

    public static class fieldReferenceWithPrefix_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "fieldReferenceWithPrefix"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:816:1: fieldReferenceWithPrefix : ( AT )? prefix identifier -> ^( FIELD_REF identifier prefix ) ;
    public final FTSParser.fieldReferenceWithPrefix_return fieldReferenceWithPrefix() throws RecognitionException
    {
        FTSParser.fieldReferenceWithPrefix_return retval = new FTSParser.fieldReferenceWithPrefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT211 = null;
        ParserRuleReturnScope prefix212 = null;
        ParserRuleReturnScope identifier213 = null;

        Object AT211_tree = null;
        RewriteRuleTokenStream stream_AT = new RewriteRuleTokenStream(adaptor, "token AT");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");
        RewriteRuleSubtreeStream stream_prefix = new RewriteRuleSubtreeStream(adaptor, "rule prefix");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:817:9: ( ( AT )? prefix identifier -> ^( FIELD_REF identifier prefix ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:818:9: ( AT )? prefix identifier
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:818:9: ( AT )?
                int alt80 = 2;
                int LA80_0 = input.LA(1);
                if ((LA80_0 == AT))
                {
                    alt80 = 1;
                }
                switch (alt80)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:818:9: AT
                {
                    AT211 = (Token) match(input, AT, FOLLOW_AT_in_fieldReferenceWithPrefix7009);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_AT.add(AT211);

                }
                    break;

                }

                pushFollow(FOLLOW_prefix_in_fieldReferenceWithPrefix7020);
                prefix212 = prefix();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_prefix.add(prefix212.getTree());
                pushFollow(FOLLOW_identifier_in_fieldReferenceWithPrefix7022);
                identifier213 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_identifier.add(identifier213.getTree());
                // AST REWRITE
                // elements: identifier, prefix
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 820:17: -> ^( FIELD_REF identifier prefix )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:821:25: ^( FIELD_REF identifier prefix )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_REF, "FIELD_REF"), root_1);
                            adaptor.addChild(root_1, stream_identifier.nextTree());
                            adaptor.addChild(root_1, stream_prefix.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fieldReferenceWithPrefix"

    public static class tempReference_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "tempReference"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:824:1: tempReference : ( AT )? ( prefix | uri )? identifier -> ^( FIELD_REF identifier ( prefix )? ( uri )? ) ;
    public final FTSParser.tempReference_return tempReference() throws RecognitionException
    {
        FTSParser.tempReference_return retval = new FTSParser.tempReference_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AT214 = null;
        ParserRuleReturnScope prefix215 = null;
        ParserRuleReturnScope uri216 = null;
        ParserRuleReturnScope identifier217 = null;

        Object AT214_tree = null;
        RewriteRuleTokenStream stream_AT = new RewriteRuleTokenStream(adaptor, "token AT");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");
        RewriteRuleSubtreeStream stream_prefix = new RewriteRuleSubtreeStream(adaptor, "rule prefix");
        RewriteRuleSubtreeStream stream_uri = new RewriteRuleSubtreeStream(adaptor, "rule uri");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:825:9: ( ( AT )? ( prefix | uri )? identifier -> ^( FIELD_REF identifier ( prefix )? ( uri )? ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:826:9: ( AT )? ( prefix | uri )? identifier
            {
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:826:9: ( AT )?
                int alt81 = 2;
                int LA81_0 = input.LA(1);
                if ((LA81_0 == AT))
                {
                    alt81 = 1;
                }
                switch (alt81)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:826:9: AT
                {
                    AT214 = (Token) match(input, AT, FOLLOW_AT_in_tempReference7105);
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_AT.add(AT214);

                }
                    break;

                }

                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:827:9: ( prefix | uri )?
                int alt82 = 3;
                switch (input.LA(1))
                {
                case ID:
                {
                    int LA82_1 = input.LA(2);
                    if ((LA82_1 == DOT))
                    {
                        int LA82_7 = input.LA(3);
                        if ((LA82_7 == ID))
                        {
                            int LA82_10 = input.LA(4);
                            if ((LA82_10 == COLON))
                            {
                                alt82 = 1;
                            }
                        }
                    }
                    else if ((LA82_1 == COLON))
                    {
                        alt82 = 1;
                    }
                }
                    break;
                case TO:
                {
                    int LA82_2 = input.LA(2);
                    if ((LA82_2 == COLON))
                    {
                        alt82 = 1;
                    }
                }
                    break;
                case OR:
                {
                    int LA82_3 = input.LA(2);
                    if ((LA82_3 == COLON))
                    {
                        alt82 = 1;
                    }
                }
                    break;
                case AND:
                {
                    int LA82_4 = input.LA(2);
                    if ((LA82_4 == COLON))
                    {
                        alt82 = 1;
                    }
                }
                    break;
                case NOT:
                {
                    int LA82_5 = input.LA(2);
                    if ((LA82_5 == COLON))
                    {
                        alt82 = 1;
                    }
                }
                    break;
                case URI:
                {
                    alt82 = 2;
                }
                    break;
                }
                switch (alt82)
                {
                case 1:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:828:17: prefix
                {
                    pushFollow(FOLLOW_prefix_in_tempReference7134);
                    prefix215 = prefix();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_prefix.add(prefix215.getTree());
                }
                    break;
                case 2:
                // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:829:19: uri
                {
                    pushFollow(FOLLOW_uri_in_tempReference7154);
                    uri216 = uri();
                    state._fsp--;
                    if (state.failed)
                        return retval;
                    if (state.backtracking == 0)
                        stream_uri.add(uri216.getTree());
                }
                    break;

                }

                pushFollow(FOLLOW_identifier_in_tempReference7175);
                identifier217 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_identifier.add(identifier217.getTree());
                // AST REWRITE
                // elements: prefix, uri, identifier
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 832:17: -> ^( FIELD_REF identifier ( prefix )? ( uri )? )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:833:25: ^( FIELD_REF identifier ( prefix )? ( uri )? )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(FIELD_REF, "FIELD_REF"), root_1);
                            adaptor.addChild(root_1, stream_identifier.nextTree());
                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:833:48: ( prefix )?
                            if (stream_prefix.hasNext())
                            {
                                adaptor.addChild(root_1, stream_prefix.nextTree());
                            }
                            stream_prefix.reset();

                            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:833:56: ( uri )?
                            if (stream_uri.hasNext())
                            {
                                adaptor.addChild(root_1, stream_uri.nextTree());
                            }
                            stream_uri.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "tempReference"

    public static class prefix_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "prefix"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:836:1: prefix : identifier COLON -> ^( PREFIX identifier ) ;
    public final FTSParser.prefix_return prefix() throws RecognitionException
    {
        FTSParser.prefix_return retval = new FTSParser.prefix_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token COLON219 = null;
        ParserRuleReturnScope identifier218 = null;

        Object COLON219_tree = null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:837:9: ( identifier COLON -> ^( PREFIX identifier ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:838:9: identifier COLON
            {
                pushFollow(FOLLOW_identifier_in_prefix7262);
                identifier218 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_identifier.add(identifier218.getTree());
                COLON219 = (Token) match(input, COLON, FOLLOW_COLON_in_prefix7264);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_COLON.add(COLON219);

                // AST REWRITE
                // elements: identifier
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 839:17: -> ^( PREFIX identifier )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:840:25: ^( PREFIX identifier )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(PREFIX, "PREFIX"), root_1);
                            adaptor.addChild(root_1, stream_identifier.nextTree());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"

    public static class uri_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "uri"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:843:1: uri : URI -> ^( NAME_SPACE URI ) ;
    public final FTSParser.uri_return uri() throws RecognitionException
    {
        FTSParser.uri_return retval = new FTSParser.uri_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token URI220 = null;

        Object URI220_tree = null;
        RewriteRuleTokenStream stream_URI = new RewriteRuleTokenStream(adaptor, "token URI");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:844:9: ( URI -> ^( NAME_SPACE URI ) )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:845:9: URI
            {
                URI220 = (Token) match(input, URI, FOLLOW_URI_in_uri7345);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_URI.add(URI220);

                // AST REWRITE
                // elements: URI
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 846:17: -> ^( NAME_SPACE URI )
                    {
                        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:847:25: ^( NAME_SPACE URI )
                        {
                            Object root_1 = (Object) adaptor.nil();
                            root_1 = (Object) adaptor.becomeRoot((Object) adaptor.create(NAME_SPACE, "NAME_SPACE"), root_1);
                            adaptor.addChild(root_1, stream_URI.nextNode());
                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "uri"

    public static class identifier_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "identifier"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:850:1: identifier : ( ( ID DOT ID )=>id1= ID DOT id2= ID ->| ID -> ID | TO -> TO | OR -> OR | AND -> AND | NOT -> NOT );
    public final FTSParser.identifier_return identifier() throws RecognitionException
    {
        FTSParser.identifier_return retval = new FTSParser.identifier_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token id1 = null;
        Token id2 = null;
        Token DOT221 = null;
        Token ID222 = null;
        Token TO223 = null;
        Token OR224 = null;
        Token AND225 = null;
        Token NOT226 = null;

        Object id1_tree = null;
        Object id2_tree = null;
        Object DOT221_tree = null;
        Object ID222_tree = null;
        Object TO223_tree = null;
        Object OR224_tree = null;
        Object AND225_tree = null;
        Object NOT226_tree = null;
        RewriteRuleTokenStream stream_NOT = new RewriteRuleTokenStream(adaptor, "token NOT");
        RewriteRuleTokenStream stream_OR = new RewriteRuleTokenStream(adaptor, "token OR");
        RewriteRuleTokenStream stream_AND = new RewriteRuleTokenStream(adaptor, "token AND");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
        RewriteRuleTokenStream stream_ID = new RewriteRuleTokenStream(adaptor, "token ID");
        RewriteRuleTokenStream stream_TO = new RewriteRuleTokenStream(adaptor, "token TO");

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:851:9: ( ( ID DOT ID )=>id1= ID DOT id2= ID ->| ID -> ID | TO -> TO | OR -> OR | AND -> AND | NOT -> NOT )
            int alt83 = 6;
            switch (input.LA(1))
            {
            case ID:
            {
                int LA83_1 = input.LA(2);
                if ((LA83_1 == DOT))
                {
                    int LA83_6 = input.LA(3);
                    if ((LA83_6 == ID))
                    {
                        int LA83_8 = input.LA(4);
                        if ((synpred48_FTS()))
                        {
                            alt83 = 1;
                        }
                        else if ((true))
                        {
                            alt83 = 2;
                        }

                    }
                    else if ((LA83_6 == EOF || (LA83_6 >= AMP && LA83_6 <= BAR) || LA83_6 == CARAT || LA83_6 == COMMA || LA83_6 == DATETIME || LA83_6 == DECIMAL_INTEGER_LITERAL || LA83_6 == DOT || LA83_6 == EQUALS || LA83_6 == EXCLAMATION || LA83_6 == FLOATING_POINT_LITERAL || (LA83_6 >= FTSPHRASE && LA83_6 <= FTSWORD) || (LA83_6 >= LPAREN && LA83_6 <= LT) || LA83_6 == MINUS || LA83_6 == NOT || (LA83_6 >= OR && LA83_6 <= PERCENT) || LA83_6 == PLUS || LA83_6 == QUESTION_MARK || LA83_6 == RPAREN || LA83_6 == STAR || (LA83_6 >= TILDA && LA83_6 <= TO) || LA83_6 == URI))
                    {
                        alt83 = 2;
                    }

                    else
                    {
                        if (state.backtracking > 0)
                        {
                            state.failed = true;
                            return retval;
                        }
                        int nvaeMark = input.mark();
                        try
                        {
                            for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++)
                            {
                                input.consume();
                            }
                            NoViableAltException nvae = new NoViableAltException("", 83, 6, input);
                            throw nvae;
                        }
                        finally
                        {
                            input.rewind(nvaeMark);
                        }
                    }

                }
                else if ((LA83_1 == EOF || (LA83_1 >= AMP && LA83_1 <= BAR) || (LA83_1 >= CARAT && LA83_1 <= COMMA) || LA83_1 == DATETIME || LA83_1 == DECIMAL_INTEGER_LITERAL || LA83_1 == DOTDOT || LA83_1 == EQUALS || LA83_1 == EXCLAMATION || LA83_1 == FLOATING_POINT_LITERAL || (LA83_1 >= FTSPHRASE && LA83_1 <= FTSWORD) || LA83_1 == GT || LA83_1 == ID || (LA83_1 >= LPAREN && LA83_1 <= LT) || LA83_1 == MINUS || LA83_1 == NOT || (LA83_1 >= OR && LA83_1 <= PERCENT) || LA83_1 == PLUS || LA83_1 == QUESTION_MARK || (LA83_1 >= RPAREN && LA83_1 <= RSQUARE) || LA83_1 == STAR || (LA83_1 >= TILDA && LA83_1 <= TO) || LA83_1 == URI))
                {
                    alt83 = 2;
                }

                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    int nvaeMark = input.mark();
                    try
                    {
                        input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 83, 1, input);
                        throw nvae;
                    }
                    finally
                    {
                        input.rewind(nvaeMark);
                    }
                }

            }
                break;
            case TO:
            {
                alt83 = 3;
            }
                break;
            case OR:
            {
                alt83 = 4;
            }
                break;
            case AND:
            {
                alt83 = 5;
            }
                break;
            case NOT:
            {
                alt83 = 6;
            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
                throw nvae;
            }
            switch (alt83)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:852:9: ( ID DOT ID )=>id1= ID DOT id2= ID
            {
                id1 = (Token) match(input, ID, FOLLOW_ID_in_identifier7447);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ID.add(id1);

                DOT221 = (Token) match(input, DOT, FOLLOW_DOT_in_identifier7449);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_DOT.add(DOT221);

                id2 = (Token) match(input, ID, FOLLOW_ID_in_identifier7453);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ID.add(id2);

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 854:17: ->
                    {
                        adaptor.addChild(root_0, new CommonTree(new CommonToken(FTSLexer.ID, (id1 != null ? id1.getText() : null) + (DOT221 != null ? DOT221.getText() : null) + (id2 != null ? id2.getText() : null))));
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:856:12: ID
            {
                ID222 = (Token) match(input, ID, FOLLOW_ID_in_identifier7502);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_ID.add(ID222);

                // AST REWRITE
                // elements: ID
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 857:17: -> ID
                    {
                        adaptor.addChild(root_0, stream_ID.nextNode());
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:860:12: TO
            {
                TO223 = (Token) match(input, TO, FOLLOW_TO_in_identifier7569);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_TO.add(TO223);

                // AST REWRITE
                // elements: TO
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 861:17: -> TO
                    {
                        adaptor.addChild(root_0, stream_TO.nextNode());
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:862:12: OR
            {
                OR224 = (Token) match(input, OR, FOLLOW_OR_in_identifier7607);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_OR.add(OR224);

                // AST REWRITE
                // elements: OR
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 863:17: -> OR
                    {
                        adaptor.addChild(root_0, stream_OR.nextNode());
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:864:12: AND
            {
                AND225 = (Token) match(input, AND, FOLLOW_AND_in_identifier7645);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_AND.add(AND225);

                // AST REWRITE
                // elements: AND
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 865:17: -> AND
                    {
                        adaptor.addChild(root_0, stream_AND.nextNode());
                    }

                    retval.tree = root_0;
                }

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:866:12: NOT
            {
                NOT226 = (Token) match(input, NOT, FOLLOW_NOT_in_identifier7684);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    stream_NOT.add(NOT226);

                // AST REWRITE
                // elements: NOT
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0)
                {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.getTree() : null);

                    root_0 = (Object) adaptor.nil();
                    // 867:17: -> NOT
                    {
                        adaptor.addChild(root_0, stream_NOT.nextNode());
                    }

                    retval.tree = root_0;
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class ftsWord_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsWord"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:870:1: ftsWord : ( ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase DOT | COMMA ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
    // ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase
    // ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) | ( DOT | COMMA ) ftsWordBase | ftsWordBase );
    public final FTSParser.ftsWord_return ftsWord() throws RecognitionException
    {
        FTSParser.ftsWord_return retval = new FTSParser.ftsWord_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set227 = null;
        Token set229 = null;
        Token set231 = null;
        Token set233 = null;
        Token set235 = null;
        Token set238 = null;
        Token set240 = null;
        Token set242 = null;
        Token set244 = null;
        Token set246 = null;
        Token set248 = null;
        Token set250 = null;
        Token set252 = null;
        Token set254 = null;
        Token set256 = null;
        Token set258 = null;
        Token set260 = null;
        Token set262 = null;
        Token set263 = null;
        Token set265 = null;
        Token set267 = null;
        Token set269 = null;
        Token set272 = null;
        Token set274 = null;
        Token set276 = null;
        Token set278 = null;
        Token set280 = null;
        Token set282 = null;
        Token set284 = null;
        Token set286 = null;
        Token set288 = null;
        Token set290 = null;
        Token set291 = null;
        Token set293 = null;
        Token set295 = null;
        Token set298 = null;
        Token set300 = null;
        Token set302 = null;
        Token set304 = null;
        Token set306 = null;
        Token set308 = null;
        Token set310 = null;
        Token set311 = null;
        Token set313 = null;
        Token set316 = null;
        Token set318 = null;
        Token set320 = null;
        Token set322 = null;
        Token set323 = null;
        ParserRuleReturnScope ftsWordBase228 = null;
        ParserRuleReturnScope ftsWordBase230 = null;
        ParserRuleReturnScope ftsWordBase232 = null;
        ParserRuleReturnScope ftsWordBase234 = null;
        ParserRuleReturnScope ftsWordBase236 = null;
        ParserRuleReturnScope ftsWordBase237 = null;
        ParserRuleReturnScope ftsWordBase239 = null;
        ParserRuleReturnScope ftsWordBase241 = null;
        ParserRuleReturnScope ftsWordBase243 = null;
        ParserRuleReturnScope ftsWordBase245 = null;
        ParserRuleReturnScope ftsWordBase247 = null;
        ParserRuleReturnScope ftsWordBase249 = null;
        ParserRuleReturnScope ftsWordBase251 = null;
        ParserRuleReturnScope ftsWordBase253 = null;
        ParserRuleReturnScope ftsWordBase255 = null;
        ParserRuleReturnScope ftsWordBase257 = null;
        ParserRuleReturnScope ftsWordBase259 = null;
        ParserRuleReturnScope ftsWordBase261 = null;
        ParserRuleReturnScope ftsWordBase264 = null;
        ParserRuleReturnScope ftsWordBase266 = null;
        ParserRuleReturnScope ftsWordBase268 = null;
        ParserRuleReturnScope ftsWordBase270 = null;
        ParserRuleReturnScope ftsWordBase271 = null;
        ParserRuleReturnScope ftsWordBase273 = null;
        ParserRuleReturnScope ftsWordBase275 = null;
        ParserRuleReturnScope ftsWordBase277 = null;
        ParserRuleReturnScope ftsWordBase279 = null;
        ParserRuleReturnScope ftsWordBase281 = null;
        ParserRuleReturnScope ftsWordBase283 = null;
        ParserRuleReturnScope ftsWordBase285 = null;
        ParserRuleReturnScope ftsWordBase287 = null;
        ParserRuleReturnScope ftsWordBase289 = null;
        ParserRuleReturnScope ftsWordBase292 = null;
        ParserRuleReturnScope ftsWordBase294 = null;
        ParserRuleReturnScope ftsWordBase296 = null;
        ParserRuleReturnScope ftsWordBase297 = null;
        ParserRuleReturnScope ftsWordBase299 = null;
        ParserRuleReturnScope ftsWordBase301 = null;
        ParserRuleReturnScope ftsWordBase303 = null;
        ParserRuleReturnScope ftsWordBase305 = null;
        ParserRuleReturnScope ftsWordBase307 = null;
        ParserRuleReturnScope ftsWordBase309 = null;
        ParserRuleReturnScope ftsWordBase312 = null;
        ParserRuleReturnScope ftsWordBase314 = null;
        ParserRuleReturnScope ftsWordBase315 = null;
        ParserRuleReturnScope ftsWordBase317 = null;
        ParserRuleReturnScope ftsWordBase319 = null;
        ParserRuleReturnScope ftsWordBase321 = null;
        ParserRuleReturnScope ftsWordBase324 = null;
        ParserRuleReturnScope ftsWordBase325 = null;

        Object set227_tree = null;
        Object set229_tree = null;
        Object set231_tree = null;
        Object set233_tree = null;
        Object set235_tree = null;
        Object set238_tree = null;
        Object set240_tree = null;
        Object set242_tree = null;
        Object set244_tree = null;
        Object set246_tree = null;
        Object set248_tree = null;
        Object set250_tree = null;
        Object set252_tree = null;
        Object set254_tree = null;
        Object set256_tree = null;
        Object set258_tree = null;
        Object set260_tree = null;
        Object set262_tree = null;
        Object set263_tree = null;
        Object set265_tree = null;
        Object set267_tree = null;
        Object set269_tree = null;
        Object set272_tree = null;
        Object set274_tree = null;
        Object set276_tree = null;
        Object set278_tree = null;
        Object set280_tree = null;
        Object set282_tree = null;
        Object set284_tree = null;
        Object set286_tree = null;
        Object set288_tree = null;
        Object set290_tree = null;
        Object set291_tree = null;
        Object set293_tree = null;
        Object set295_tree = null;
        Object set298_tree = null;
        Object set300_tree = null;
        Object set302_tree = null;
        Object set304_tree = null;
        Object set306_tree = null;
        Object set308_tree = null;
        Object set310_tree = null;
        Object set311_tree = null;
        Object set313_tree = null;
        Object set316_tree = null;
        Object set318_tree = null;
        Object set320_tree = null;
        Object set322_tree = null;
        Object set323_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:871:9: ( ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase DOT | COMMA ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            // ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA )
            // ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) | ( DOT | COMMA ) ftsWordBase | ftsWordBase
            // )
            int alt84 = 18;
            alt84 = dfa84.predict(input);
            switch (alt84)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:872:12: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                set227 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set227));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7808);
                ftsWordBase228 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase228.getTree());

                set229 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set229));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7816);
                ftsWordBase230 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase230.getTree());

                set231 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set231));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7824);
                ftsWordBase232 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase232.getTree());

                set233 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set233));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7832);
                ftsWordBase234 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase234.getTree());

                set235 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set235));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7840);
                ftsWordBase236 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase236.getTree());

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:874:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase DOT | COMMA ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7900);
                ftsWordBase237 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase237.getTree());

                set238 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set238));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7908);
                ftsWordBase239 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase239.getTree());

                set240 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set240));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7916);
                ftsWordBase241 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase241.getTree());

                set242 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set242));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7924);
                ftsWordBase243 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase243.getTree());

                set244 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set244));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord7932);
                ftsWordBase245 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase245.getTree());

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:876:12: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                set246 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set246));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8005);
                ftsWordBase247 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase247.getTree());

                set248 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set248));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8013);
                ftsWordBase249 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase249.getTree());

                set250 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set250));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8021);
                ftsWordBase251 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase251.getTree());

                set252 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set252));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8029);
                ftsWordBase253 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase253.getTree());

                set254 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set254));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:878:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8095);
                ftsWordBase255 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase255.getTree());

                set256 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set256));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8103);
                ftsWordBase257 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase257.getTree());

                set258 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set258));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8111);
                ftsWordBase259 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase259.getTree());

                set260 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set260));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8119);
                ftsWordBase261 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase261.getTree());

                set262 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set262));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:880:12: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                set263 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set263));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8192);
                ftsWordBase264 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase264.getTree());

                set265 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set265));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8200);
                ftsWordBase266 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase266.getTree());

                set267 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set267));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8208);
                ftsWordBase268 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase268.getTree());

                set269 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set269));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8216);
                ftsWordBase270 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase270.getTree());

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:882:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8270);
                ftsWordBase271 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase271.getTree());

                set272 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set272));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8278);
                ftsWordBase273 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase273.getTree());

                set274 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set274));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8286);
                ftsWordBase275 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase275.getTree());

                set276 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set276));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8294);
                ftsWordBase277 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase277.getTree());

            }
                break;
            case 7:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:884:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                set278 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set278));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8358);
                ftsWordBase279 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase279.getTree());

                set280 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set280));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8366);
                ftsWordBase281 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase281.getTree());

                set282 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set282));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8374);
                ftsWordBase283 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase283.getTree());

                set284 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set284));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 8:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:886:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8432);
                ftsWordBase285 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase285.getTree());

                set286 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set286));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8440);
                ftsWordBase287 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase287.getTree());

                set288 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set288));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8448);
                ftsWordBase289 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase289.getTree());

                set290 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set290));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 9:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:888:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                set291 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set291));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8512);
                ftsWordBase292 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase292.getTree());

                set293 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set293));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8520);
                ftsWordBase294 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase294.getTree());

                set295 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set295));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8528);
                ftsWordBase296 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase296.getTree());

            }
                break;
            case 10:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:890:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8574);
                ftsWordBase297 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase297.getTree());

                set298 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set298));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8582);
                ftsWordBase299 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase299.getTree());

                set300 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set300));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8590);
                ftsWordBase301 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase301.getTree());

            }
                break;
            case 11:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:892:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                set302 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set302));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8647);
                ftsWordBase303 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase303.getTree());

                set304 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set304));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8655);
                ftsWordBase305 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase305.getTree());

                set306 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set306));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 12:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:894:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8706);
                ftsWordBase307 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase307.getTree());

                set308 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set308));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8714);
                ftsWordBase309 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase309.getTree());

                set310 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set310));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 13:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:896:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                set311 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set311));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8771);
                ftsWordBase312 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase312.getTree());

                set313 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set313));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8779);
                ftsWordBase314 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase314.getTree());

            }
                break;
            case 14:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:898:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8817);
                ftsWordBase315 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase315.getTree());

                set316 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set316));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8825);
                ftsWordBase317 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase317.getTree());

            }
                break;
            case 15:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:900:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                set318 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set318));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8873);
                ftsWordBase319 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase319.getTree());

                set320 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set320));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 16:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:902:11: ( ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA )
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8915);
                ftsWordBase321 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase321.getTree());

                set322 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set322));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }
                break;
            case 17:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:904:11: ( DOT | COMMA ) ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                set323 = input.LT(1);
                if (input.LA(1) == COMMA || input.LA(1) == DOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set323));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8939);
                ftsWordBase324 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase324.getTree());

            }
                break;
            case 18:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:905:11: ftsWordBase
            {
                root_0 = (Object) adaptor.nil();

                pushFollow(FOLLOW_ftsWordBase_in_ftsWord8952);
                ftsWordBase325 = ftsWordBase();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, ftsWordBase325.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsWord"

    public static class ftsWordBase_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsWordBase"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:909:1: ftsWordBase : ( ID | FTSWORD | FTSPRE | FTSWILD | NOT | TO | DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL | STAR | QUESTION_MARK | DATETIME | URI identifier );
    public final FTSParser.ftsWordBase_return ftsWordBase() throws RecognitionException
    {
        FTSParser.ftsWordBase_return retval = new FTSParser.ftsWordBase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID326 = null;
        Token FTSWORD327 = null;
        Token FTSPRE328 = null;
        Token FTSWILD329 = null;
        Token NOT330 = null;
        Token TO331 = null;
        Token DECIMAL_INTEGER_LITERAL332 = null;
        Token FLOATING_POINT_LITERAL333 = null;
        Token STAR334 = null;
        Token QUESTION_MARK335 = null;
        Token DATETIME336 = null;
        Token URI337 = null;
        ParserRuleReturnScope identifier338 = null;

        Object ID326_tree = null;
        Object FTSWORD327_tree = null;
        Object FTSPRE328_tree = null;
        Object FTSWILD329_tree = null;
        Object NOT330_tree = null;
        Object TO331_tree = null;
        Object DECIMAL_INTEGER_LITERAL332_tree = null;
        Object FLOATING_POINT_LITERAL333_tree = null;
        Object STAR334_tree = null;
        Object QUESTION_MARK335_tree = null;
        Object DATETIME336_tree = null;
        Object URI337_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:910:9: ( ID | FTSWORD | FTSPRE | FTSWILD | NOT | TO | DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL | STAR | QUESTION_MARK | DATETIME | URI identifier )
            int alt85 = 12;
            switch (input.LA(1))
            {
            case ID:
            {
                alt85 = 1;
            }
                break;
            case FTSWORD:
            {
                alt85 = 2;
            }
                break;
            case FTSPRE:
            {
                alt85 = 3;
            }
                break;
            case FTSWILD:
            {
                alt85 = 4;
            }
                break;
            case NOT:
            {
                alt85 = 5;
            }
                break;
            case TO:
            {
                alt85 = 6;
            }
                break;
            case DECIMAL_INTEGER_LITERAL:
            {
                alt85 = 7;
            }
                break;
            case FLOATING_POINT_LITERAL:
            {
                alt85 = 8;
            }
                break;
            case STAR:
            {
                alt85 = 9;
            }
                break;
            case QUESTION_MARK:
            {
                alt85 = 10;
            }
                break;
            case DATETIME:
            {
                alt85 = 11;
            }
                break;
            case URI:
            {
                alt85 = 12;
            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
                throw nvae;
            }
            switch (alt85)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:911:11: ID
            {
                root_0 = (Object) adaptor.nil();

                ID326 = (Token) match(input, ID, FOLLOW_ID_in_ftsWordBase8997);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    ID326_tree = (Object) adaptor.create(ID326);
                    adaptor.addChild(root_0, ID326_tree);
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:912:11: FTSWORD
            {
                root_0 = (Object) adaptor.nil();

                FTSWORD327 = (Token) match(input, FTSWORD, FOLLOW_FTSWORD_in_ftsWordBase9009);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSWORD327_tree = (Object) adaptor.create(FTSWORD327);
                    adaptor.addChild(root_0, FTSWORD327_tree);
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:913:11: FTSPRE
            {
                root_0 = (Object) adaptor.nil();

                FTSPRE328 = (Token) match(input, FTSPRE, FOLLOW_FTSPRE_in_ftsWordBase9021);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSPRE328_tree = (Object) adaptor.create(FTSPRE328);
                    adaptor.addChild(root_0, FTSPRE328_tree);
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:914:11: FTSWILD
            {
                root_0 = (Object) adaptor.nil();

                FTSWILD329 = (Token) match(input, FTSWILD, FOLLOW_FTSWILD_in_ftsWordBase9034);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSWILD329_tree = (Object) adaptor.create(FTSWILD329);
                    adaptor.addChild(root_0, FTSWILD329_tree);
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:915:11: NOT
            {
                root_0 = (Object) adaptor.nil();

                NOT330 = (Token) match(input, NOT, FOLLOW_NOT_in_ftsWordBase9047);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    NOT330_tree = (Object) adaptor.create(NOT330);
                    adaptor.addChild(root_0, NOT330_tree);
                }

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:916:11: TO
            {
                root_0 = (Object) adaptor.nil();

                TO331 = (Token) match(input, TO, FOLLOW_TO_in_ftsWordBase9059);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    TO331_tree = (Object) adaptor.create(TO331);
                    adaptor.addChild(root_0, TO331_tree);
                }

            }
                break;
            case 7:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:917:11: DECIMAL_INTEGER_LITERAL
            {
                root_0 = (Object) adaptor.nil();

                DECIMAL_INTEGER_LITERAL332 = (Token) match(input, DECIMAL_INTEGER_LITERAL, FOLLOW_DECIMAL_INTEGER_LITERAL_in_ftsWordBase9071);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    DECIMAL_INTEGER_LITERAL332_tree = (Object) adaptor.create(DECIMAL_INTEGER_LITERAL332);
                    adaptor.addChild(root_0, DECIMAL_INTEGER_LITERAL332_tree);
                }

            }
                break;
            case 8:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:918:11: FLOATING_POINT_LITERAL
            {
                root_0 = (Object) adaptor.nil();

                FLOATING_POINT_LITERAL333 = (Token) match(input, FLOATING_POINT_LITERAL, FOLLOW_FLOATING_POINT_LITERAL_in_ftsWordBase9083);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FLOATING_POINT_LITERAL333_tree = (Object) adaptor.create(FLOATING_POINT_LITERAL333);
                    adaptor.addChild(root_0, FLOATING_POINT_LITERAL333_tree);
                }

            }
                break;
            case 9:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:919:11: STAR
            {
                root_0 = (Object) adaptor.nil();

                STAR334 = (Token) match(input, STAR, FOLLOW_STAR_in_ftsWordBase9095);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    STAR334_tree = (Object) adaptor.create(STAR334);
                    adaptor.addChild(root_0, STAR334_tree);
                }

            }
                break;
            case 10:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:920:11: QUESTION_MARK
            {
                root_0 = (Object) adaptor.nil();

                QUESTION_MARK335 = (Token) match(input, QUESTION_MARK, FOLLOW_QUESTION_MARK_in_ftsWordBase9107);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    QUESTION_MARK335_tree = (Object) adaptor.create(QUESTION_MARK335);
                    adaptor.addChild(root_0, QUESTION_MARK335_tree);
                }

            }
                break;
            case 11:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:921:11: DATETIME
            {
                root_0 = (Object) adaptor.nil();

                DATETIME336 = (Token) match(input, DATETIME, FOLLOW_DATETIME_in_ftsWordBase9119);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    DATETIME336_tree = (Object) adaptor.create(DATETIME336);
                    adaptor.addChild(root_0, DATETIME336_tree);
                }

            }
                break;
            case 12:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:922:11: URI identifier
            {
                root_0 = (Object) adaptor.nil();

                URI337 = (Token) match(input, URI, FOLLOW_URI_in_ftsWordBase9131);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    URI337_tree = (Object) adaptor.create(URI337);
                    adaptor.addChild(root_0, URI337_tree);
                }

                pushFollow(FOLLOW_identifier_in_ftsWordBase9133);
                identifier338 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, identifier338.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsWordBase"

    public static class number_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "number"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:925:1: number : ( DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL );
    public final FTSParser.number_return number() throws RecognitionException
    {
        FTSParser.number_return retval = new FTSParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set339 = null;

        Object set339_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:926:9: ( DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:
            {
                root_0 = (Object) adaptor.nil();

                set339 = input.LT(1);
                if (input.LA(1) == DECIMAL_INTEGER_LITERAL || input.LA(1) == FLOATING_POINT_LITERAL)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set339));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class ftsRangeWord_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "ftsRangeWord"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:931:1: ftsRangeWord : ( ID | FTSWORD | FTSPRE | FTSWILD | FTSPHRASE | DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL | DATETIME | STAR | URI identifier );
    public final FTSParser.ftsRangeWord_return ftsRangeWord() throws RecognitionException
    {
        FTSParser.ftsRangeWord_return retval = new FTSParser.ftsRangeWord_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token ID340 = null;
        Token FTSWORD341 = null;
        Token FTSPRE342 = null;
        Token FTSWILD343 = null;
        Token FTSPHRASE344 = null;
        Token DECIMAL_INTEGER_LITERAL345 = null;
        Token FLOATING_POINT_LITERAL346 = null;
        Token DATETIME347 = null;
        Token STAR348 = null;
        Token URI349 = null;
        ParserRuleReturnScope identifier350 = null;

        Object ID340_tree = null;
        Object FTSWORD341_tree = null;
        Object FTSPRE342_tree = null;
        Object FTSWILD343_tree = null;
        Object FTSPHRASE344_tree = null;
        Object DECIMAL_INTEGER_LITERAL345_tree = null;
        Object FLOATING_POINT_LITERAL346_tree = null;
        Object DATETIME347_tree = null;
        Object STAR348_tree = null;
        Object URI349_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:932:9: ( ID | FTSWORD | FTSPRE | FTSWILD | FTSPHRASE | DECIMAL_INTEGER_LITERAL | FLOATING_POINT_LITERAL | DATETIME | STAR | URI identifier )
            int alt86 = 10;
            switch (input.LA(1))
            {
            case ID:
            {
                alt86 = 1;
            }
                break;
            case FTSWORD:
            {
                alt86 = 2;
            }
                break;
            case FTSPRE:
            {
                alt86 = 3;
            }
                break;
            case FTSWILD:
            {
                alt86 = 4;
            }
                break;
            case FTSPHRASE:
            {
                alt86 = 5;
            }
                break;
            case DECIMAL_INTEGER_LITERAL:
            {
                alt86 = 6;
            }
                break;
            case FLOATING_POINT_LITERAL:
            {
                alt86 = 7;
            }
                break;
            case DATETIME:
            {
                alt86 = 8;
            }
                break;
            case STAR:
            {
                alt86 = 9;
            }
                break;
            case URI:
            {
                alt86 = 10;
            }
                break;
            default:
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
                throw nvae;
            }
            switch (alt86)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:933:11: ID
            {
                root_0 = (Object) adaptor.nil();

                ID340 = (Token) match(input, ID, FOLLOW_ID_in_ftsRangeWord9213);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    ID340_tree = (Object) adaptor.create(ID340);
                    adaptor.addChild(root_0, ID340_tree);
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:934:11: FTSWORD
            {
                root_0 = (Object) adaptor.nil();

                FTSWORD341 = (Token) match(input, FTSWORD, FOLLOW_FTSWORD_in_ftsRangeWord9225);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSWORD341_tree = (Object) adaptor.create(FTSWORD341);
                    adaptor.addChild(root_0, FTSWORD341_tree);
                }

            }
                break;
            case 3:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:935:11: FTSPRE
            {
                root_0 = (Object) adaptor.nil();

                FTSPRE342 = (Token) match(input, FTSPRE, FOLLOW_FTSPRE_in_ftsRangeWord9237);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSPRE342_tree = (Object) adaptor.create(FTSPRE342);
                    adaptor.addChild(root_0, FTSPRE342_tree);
                }

            }
                break;
            case 4:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:936:11: FTSWILD
            {
                root_0 = (Object) adaptor.nil();

                FTSWILD343 = (Token) match(input, FTSWILD, FOLLOW_FTSWILD_in_ftsRangeWord9249);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSWILD343_tree = (Object) adaptor.create(FTSWILD343);
                    adaptor.addChild(root_0, FTSWILD343_tree);
                }

            }
                break;
            case 5:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:937:11: FTSPHRASE
            {
                root_0 = (Object) adaptor.nil();

                FTSPHRASE344 = (Token) match(input, FTSPHRASE, FOLLOW_FTSPHRASE_in_ftsRangeWord9261);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FTSPHRASE344_tree = (Object) adaptor.create(FTSPHRASE344);
                    adaptor.addChild(root_0, FTSPHRASE344_tree);
                }

            }
                break;
            case 6:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:938:11: DECIMAL_INTEGER_LITERAL
            {
                root_0 = (Object) adaptor.nil();

                DECIMAL_INTEGER_LITERAL345 = (Token) match(input, DECIMAL_INTEGER_LITERAL, FOLLOW_DECIMAL_INTEGER_LITERAL_in_ftsRangeWord9273);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    DECIMAL_INTEGER_LITERAL345_tree = (Object) adaptor.create(DECIMAL_INTEGER_LITERAL345);
                    adaptor.addChild(root_0, DECIMAL_INTEGER_LITERAL345_tree);
                }

            }
                break;
            case 7:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:939:11: FLOATING_POINT_LITERAL
            {
                root_0 = (Object) adaptor.nil();

                FLOATING_POINT_LITERAL346 = (Token) match(input, FLOATING_POINT_LITERAL, FOLLOW_FLOATING_POINT_LITERAL_in_ftsRangeWord9285);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    FLOATING_POINT_LITERAL346_tree = (Object) adaptor.create(FLOATING_POINT_LITERAL346);
                    adaptor.addChild(root_0, FLOATING_POINT_LITERAL346_tree);
                }

            }
                break;
            case 8:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:940:11: DATETIME
            {
                root_0 = (Object) adaptor.nil();

                DATETIME347 = (Token) match(input, DATETIME, FOLLOW_DATETIME_in_ftsRangeWord9297);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    DATETIME347_tree = (Object) adaptor.create(DATETIME347);
                    adaptor.addChild(root_0, DATETIME347_tree);
                }

            }
                break;
            case 9:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:941:11: STAR
            {
                root_0 = (Object) adaptor.nil();

                STAR348 = (Token) match(input, STAR, FOLLOW_STAR_in_ftsRangeWord9309);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    STAR348_tree = (Object) adaptor.create(STAR348);
                    adaptor.addChild(root_0, STAR348_tree);
                }

            }
                break;
            case 10:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:942:11: URI identifier
            {
                root_0 = (Object) adaptor.nil();

                URI349 = (Token) match(input, URI, FOLLOW_URI_in_ftsRangeWord9321);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    URI349_tree = (Object) adaptor.create(URI349);
                    adaptor.addChild(root_0, URI349_tree);
                }

                pushFollow(FOLLOW_identifier_in_ftsRangeWord9323);
                identifier350 = identifier();
                state._fsp--;
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                    adaptor.addChild(root_0, identifier350.getTree());

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ftsRangeWord"

    public static class or_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "or"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:947:1: or : ( OR | BAR BAR );
    public final FTSParser.or_return or() throws RecognitionException
    {
        FTSParser.or_return retval = new FTSParser.or_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token OR351 = null;
        Token BAR352 = null;
        Token BAR353 = null;

        Object OR351_tree = null;
        Object BAR352_tree = null;
        Object BAR353_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:948:9: ( OR | BAR BAR )
            int alt87 = 2;
            int LA87_0 = input.LA(1);
            if ((LA87_0 == OR))
            {
                alt87 = 1;
            }
            else if ((LA87_0 == BAR))
            {
                alt87 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
                throw nvae;
            }

            switch (alt87)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:949:9: OR
            {
                root_0 = (Object) adaptor.nil();

                OR351 = (Token) match(input, OR, FOLLOW_OR_in_or9358);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    OR351_tree = (Object) adaptor.create(OR351);
                    adaptor.addChild(root_0, OR351_tree);
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:950:11: BAR BAR
            {
                root_0 = (Object) adaptor.nil();

                BAR352 = (Token) match(input, BAR, FOLLOW_BAR_in_or9370);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    BAR352_tree = (Object) adaptor.create(BAR352);
                    adaptor.addChild(root_0, BAR352_tree);
                }

                BAR353 = (Token) match(input, BAR, FOLLOW_BAR_in_or9372);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    BAR353_tree = (Object) adaptor.create(BAR353);
                    adaptor.addChild(root_0, BAR353_tree);
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or"

    public static class and_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "and"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:953:1: and : ( AND | AMP AMP );
    public final FTSParser.and_return and() throws RecognitionException
    {
        FTSParser.and_return retval = new FTSParser.and_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token AND354 = null;
        Token AMP355 = null;
        Token AMP356 = null;

        Object AND354_tree = null;
        Object AMP355_tree = null;
        Object AMP356_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:954:9: ( AND | AMP AMP )
            int alt88 = 2;
            int LA88_0 = input.LA(1);
            if ((LA88_0 == AND))
            {
                alt88 = 1;
            }
            else if ((LA88_0 == AMP))
            {
                alt88 = 2;
            }

            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
                throw nvae;
            }

            switch (alt88)
            {
            case 1:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:955:9: AND
            {
                root_0 = (Object) adaptor.nil();

                AND354 = (Token) match(input, AND, FOLLOW_AND_in_and9405);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    AND354_tree = (Object) adaptor.create(AND354);
                    adaptor.addChild(root_0, AND354_tree);
                }

            }
                break;
            case 2:
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:956:11: AMP AMP
            {
                root_0 = (Object) adaptor.nil();

                AMP355 = (Token) match(input, AMP, FOLLOW_AMP_in_and9417);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    AMP355_tree = (Object) adaptor.create(AMP355);
                    adaptor.addChild(root_0, AMP355_tree);
                }

                AMP356 = (Token) match(input, AMP, FOLLOW_AMP_in_and9419);
                if (state.failed)
                    return retval;
                if (state.backtracking == 0)
                {
                    AMP356_tree = (Object) adaptor.create(AMP356);
                    adaptor.addChild(root_0, AMP356_tree);
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and"

    public static class not_return extends ParserRuleReturnScope
    {
        Object tree;

        @Override
        public Object getTree()
        {
            return tree;
        }
    };

    // $ANTLR start "not"
    // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:959:1: not : ( NOT | EXCLAMATION );
    public final FTSParser.not_return not() throws RecognitionException
    {
        FTSParser.not_return retval = new FTSParser.not_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token set357 = null;

        Object set357_tree = null;

        try
        {
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:960:9: ( NOT | EXCLAMATION )
            // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:
            {
                root_0 = (Object) adaptor.nil();

                set357 = input.LT(1);
                if (input.LA(1) == EXCLAMATION || input.LA(1) == NOT)
                {
                    input.consume();
                    if (state.backtracking == 0)
                        adaptor.addChild(root_0, (Object) adaptor.create(set357));
                    state.errorRecovery = false;
                    state.failed = false;
                }
                else
                {
                    if (state.backtracking > 0)
                    {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0)
            {
                retval.tree = (Object) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException e)
        {
            throw e;
        }

        finally
        {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not"

    // $ANTLR start synpred1_FTS
    public final void synpred1_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:415:9: ( not )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:415:10: not
        {
            pushFollow(FOLLOW_not_in_synpred1_FTS1234);
            not();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred1_FTS

    // $ANTLR start synpred2_FTS
    public final void synpred2_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:447:12: ( ftsFieldGroupProximity )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:447:13: ftsFieldGroupProximity
        {
            pushFollow(FOLLOW_ftsFieldGroupProximity_in_synpred2_FTS1747);
            ftsFieldGroupProximity();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred2_FTS

    // $ANTLR start synpred3_FTS
    public final void synpred3_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:451:12: ( ftsRange )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:451:13: ftsRange
        {
            pushFollow(FOLLOW_ftsRange_in_synpred3_FTS1824);
            ftsRange();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred3_FTS

    // $ANTLR start synpred4_FTS
    public final void synpred4_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:455:12: ( ftsFieldGroup )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:455:13: ftsFieldGroup
        {
            pushFollow(FOLLOW_ftsFieldGroup_in_synpred4_FTS1903);
            ftsFieldGroup();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred4_FTS

    // $ANTLR start synpred5_FTS
    public final void synpred5_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:458:12: ( ftsTermOrPhrase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:458:13: ftsTermOrPhrase
        {
            pushFollow(FOLLOW_ftsTermOrPhrase_in_synpred5_FTS1952);
            ftsTermOrPhrase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred5_FTS

    // $ANTLR start synpred6_FTS
    public final void synpred6_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:460:12: ( ftsExactTermOrPhrase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:460:13: ftsExactTermOrPhrase
        {
            pushFollow(FOLLOW_ftsExactTermOrPhrase_in_synpred6_FTS1981);
            ftsExactTermOrPhrase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred6_FTS

    // $ANTLR start synpred7_FTS
    public final void synpred7_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:462:12: ( ftsTokenisedTermOrPhrase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:462:13: ftsTokenisedTermOrPhrase
        {
            pushFollow(FOLLOW_ftsTokenisedTermOrPhrase_in_synpred7_FTS2011);
            ftsTokenisedTermOrPhrase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred7_FTS

    // $ANTLR start synpred8_FTS
    public final void synpred8_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:514:9: ( fieldReferenceWithPrefix COLON )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:514:10: fieldReferenceWithPrefix COLON
        {
            pushFollow(FOLLOW_fieldReferenceWithPrefix_in_synpred8_FTS2684);
            fieldReferenceWithPrefix();
            state._fsp--;
            if (state.failed)
                return;

            match(input, COLON, FOLLOW_COLON_in_synpred8_FTS2686);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred8_FTS

    // $ANTLR start synpred9_FTS
    public final void synpred9_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:516:28: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:516:29: slop
        {
            pushFollow(FOLLOW_slop_in_synpred9_FTS2725);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred9_FTS

    // $ANTLR start synpred10_FTS
    public final void synpred10_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:519:26: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:519:27: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred10_FTS2800);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred10_FTS

    // $ANTLR start synpred11_FTS
    public final void synpred11_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:523:9: ( fieldReferenceWithoutPrefix COLON )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:523:10: fieldReferenceWithoutPrefix COLON
        {
            pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_synpred11_FTS2867);
            fieldReferenceWithoutPrefix();
            state._fsp--;
            if (state.failed)
                return;

            match(input, COLON, FOLLOW_COLON_in_synpred11_FTS2869);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred11_FTS

    // $ANTLR start synpred12_FTS
    public final void synpred12_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:525:28: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:525:29: slop
        {
            pushFollow(FOLLOW_slop_in_synpred12_FTS2908);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred12_FTS

    // $ANTLR start synpred13_FTS
    public final void synpred13_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:528:26: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:528:27: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred13_FTS2983);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred13_FTS

    // $ANTLR start synpred14_FTS
    public final void synpred14_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:532:20: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:532:21: slop
        {
            pushFollow(FOLLOW_slop_in_synpred14_FTS3053);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred14_FTS

    // $ANTLR start synpred15_FTS
    public final void synpred15_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:535:18: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:535:19: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred15_FTS3111);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred15_FTS

    // $ANTLR start synpred16_FTS
    public final void synpred16_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:544:9: ( fieldReferenceWithPrefix COLON )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:544:10: fieldReferenceWithPrefix COLON
        {
            pushFollow(FOLLOW_fieldReferenceWithPrefix_in_synpred16_FTS3216);
            fieldReferenceWithPrefix();
            state._fsp--;
            if (state.failed)
                return;

            match(input, COLON, FOLLOW_COLON_in_synpred16_FTS3218);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred16_FTS

    // $ANTLR start synpred17_FTS
    public final void synpred17_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:546:28: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:546:29: slop
        {
            pushFollow(FOLLOW_slop_in_synpred17_FTS3257);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred17_FTS

    // $ANTLR start synpred18_FTS
    public final void synpred18_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:549:26: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:549:27: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred18_FTS3332);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred18_FTS

    // $ANTLR start synpred19_FTS
    public final void synpred19_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:553:9: ( fieldReferenceWithoutPrefix COLON )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:553:10: fieldReferenceWithoutPrefix COLON
        {
            pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_synpred19_FTS3399);
            fieldReferenceWithoutPrefix();
            state._fsp--;
            if (state.failed)
                return;

            match(input, COLON, FOLLOW_COLON_in_synpred19_FTS3401);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred19_FTS

    // $ANTLR start synpred20_FTS
    public final void synpred20_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:555:28: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:555:29: slop
        {
            pushFollow(FOLLOW_slop_in_synpred20_FTS3440);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred20_FTS

    // $ANTLR start synpred21_FTS
    public final void synpred21_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:558:26: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:558:27: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred21_FTS3515);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred21_FTS

    // $ANTLR start synpred22_FTS
    public final void synpred22_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:562:20: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:562:21: slop
        {
            pushFollow(FOLLOW_slop_in_synpred22_FTS3585);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred22_FTS

    // $ANTLR start synpred23_FTS
    public final void synpred23_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:565:18: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:565:19: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred23_FTS3643);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred23_FTS

    // $ANTLR start synpred24_FTS
    public final void synpred24_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:575:9: ( fieldReferenceWithPrefix COLON )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:575:10: fieldReferenceWithPrefix COLON
        {
            pushFollow(FOLLOW_fieldReferenceWithPrefix_in_synpred24_FTS3750);
            fieldReferenceWithPrefix();
            state._fsp--;
            if (state.failed)
                return;

            match(input, COLON, FOLLOW_COLON_in_synpred24_FTS3752);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred24_FTS

    // $ANTLR start synpred25_FTS
    public final void synpred25_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:577:28: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:577:29: slop
        {
            pushFollow(FOLLOW_slop_in_synpred25_FTS3791);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred25_FTS

    // $ANTLR start synpred26_FTS
    public final void synpred26_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:580:26: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:580:27: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred26_FTS3866);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred26_FTS

    // $ANTLR start synpred27_FTS
    public final void synpred27_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:584:9: ( fieldReferenceWithoutPrefix COLON )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:584:10: fieldReferenceWithoutPrefix COLON
        {
            pushFollow(FOLLOW_fieldReferenceWithoutPrefix_in_synpred27_FTS3933);
            fieldReferenceWithoutPrefix();
            state._fsp--;
            if (state.failed)
                return;

            match(input, COLON, FOLLOW_COLON_in_synpred27_FTS3935);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred27_FTS

    // $ANTLR start synpred28_FTS
    public final void synpred28_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:586:28: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:586:29: slop
        {
            pushFollow(FOLLOW_slop_in_synpred28_FTS3974);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred28_FTS

    // $ANTLR start synpred29_FTS
    public final void synpred29_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:589:26: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:589:27: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred29_FTS4049);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred29_FTS

    // $ANTLR start synpred30_FTS
    public final void synpred30_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:593:20: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:593:21: slop
        {
            pushFollow(FOLLOW_slop_in_synpred30_FTS4119);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred30_FTS

    // $ANTLR start synpred31_FTS
    public final void synpred31_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:596:18: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:596:19: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred31_FTS4177);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred31_FTS

    // $ANTLR start synpred32_FTS
    public final void synpred32_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:669:9: ( not )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:669:10: not
        {
            pushFollow(FOLLOW_not_in_synpred32_FTS4924);
            not();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred32_FTS

    // $ANTLR start synpred33_FTS
    public final void synpred33_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:688:9: ( ftsFieldGroupProximity )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:688:10: ftsFieldGroupProximity
        {
            pushFollow(FOLLOW_ftsFieldGroupProximity_in_synpred33_FTS5289);
            ftsFieldGroupProximity();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred33_FTS

    // $ANTLR start synpred34_FTS
    public final void synpred34_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:11: ( ftsFieldGroupTerm )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:12: ftsFieldGroupTerm
        {
            pushFollow(FOLLOW_ftsFieldGroupTerm_in_synpred34_FTS5355);
            ftsFieldGroupTerm();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred34_FTS

    // $ANTLR start synpred35_FTS
    public final void synpred35_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:54: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:691:55: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred35_FTS5365);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred35_FTS

    // $ANTLR start synpred36_FTS
    public final void synpred36_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:11: ( ftsFieldGroupExactTerm )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:12: ftsFieldGroupExactTerm
        {
            pushFollow(FOLLOW_ftsFieldGroupExactTerm_in_synpred36_FTS5436);
            ftsFieldGroupExactTerm();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred36_FTS

    // $ANTLR start synpred37_FTS
    public final void synpred37_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:64: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:694:65: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred37_FTS5446);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred37_FTS

    // $ANTLR start synpred38_FTS
    public final void synpred38_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:11: ( ftsFieldGroupPhrase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:12: ftsFieldGroupPhrase
        {
            pushFollow(FOLLOW_ftsFieldGroupPhrase_in_synpred38_FTS5517);
            ftsFieldGroupPhrase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred38_FTS

    // $ANTLR start synpred39_FTS
    public final void synpred39_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:58: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:697:59: slop
        {
            pushFollow(FOLLOW_slop_in_synpred39_FTS5527);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred39_FTS

    // $ANTLR start synpred40_FTS
    public final void synpred40_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:11: ( ftsFieldGroupExactPhrase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:12: ftsFieldGroupExactPhrase
        {
            pushFollow(FOLLOW_ftsFieldGroupExactPhrase_in_synpred40_FTS5598);
            ftsFieldGroupExactPhrase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred40_FTS

    // $ANTLR start synpred41_FTS
    public final void synpred41_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:68: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:700:69: slop
        {
            pushFollow(FOLLOW_slop_in_synpred41_FTS5608);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred41_FTS

    // $ANTLR start synpred42_FTS
    public final void synpred42_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:11: ( ftsFieldGroupTokenisedPhrase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:12: ftsFieldGroupTokenisedPhrase
        {
            pushFollow(FOLLOW_ftsFieldGroupTokenisedPhrase_in_synpred42_FTS5679);
            ftsFieldGroupTokenisedPhrase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred42_FTS

    // $ANTLR start synpred43_FTS
    public final void synpred43_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:76: ( slop )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:703:77: slop
        {
            pushFollow(FOLLOW_slop_in_synpred43_FTS5689);
            slop();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred43_FTS

    // $ANTLR start synpred44_FTS
    public final void synpred44_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:11: ( ftsFieldGroupSynonym )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:12: ftsFieldGroupSynonym
        {
            pushFollow(FOLLOW_ftsFieldGroupSynonym_in_synpred44_FTS5760);
            ftsFieldGroupSynonym();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred44_FTS

    // $ANTLR start synpred45_FTS
    public final void synpred45_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:60: ( fuzzy )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:706:61: fuzzy
        {
            pushFollow(FOLLOW_fuzzy_in_synpred45_FTS5770);
            fuzzy();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred45_FTS

    // $ANTLR start synpred46_FTS
    public final void synpred46_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:709:11: ( ftsFieldGroupRange )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:709:12: ftsFieldGroupRange
        {
            pushFollow(FOLLOW_ftsFieldGroupRange_in_synpred46_FTS5841);
            ftsFieldGroupRange();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred46_FTS

    // $ANTLR start synpred47_FTS
    public final void synpred47_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:752:38: ( proximityGroup )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:752:39: proximityGroup
        {
            pushFollow(FOLLOW_proximityGroup_in_synpred47_FTS6270);
            proximityGroup();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred47_FTS

    // $ANTLR start synpred48_FTS
    public final void synpred48_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:852:9: ( ID DOT ID )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:852:10: ID DOT ID
        {
            match(input, ID, FOLLOW_ID_in_synpred48_FTS7427);
            if (state.failed)
                return;

            match(input, DOT, FOLLOW_DOT_in_synpred48_FTS7429);
            if (state.failed)
                return;

            match(input, ID, FOLLOW_ID_in_synpred48_FTS7431);
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred48_FTS

    // $ANTLR start synpred49_FTS
    public final void synpred49_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:872:12: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:872:13: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred49_FTS7753);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred49_FTS7761);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred49_FTS7769);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred49_FTS7777);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred49_FTS7785);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred49_FTS

    // $ANTLR start synpred50_FTS
    public final void synpred50_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:874:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase DOT | COMMA ftsWordBase )
        int alt89 = 2;
        int LA89_0 = input.LA(1);
        if ((LA89_0 == DATETIME || LA89_0 == DECIMAL_INTEGER_LITERAL || LA89_0 == FLOATING_POINT_LITERAL || (LA89_0 >= FTSPRE && LA89_0 <= FTSWORD) || LA89_0 == ID || LA89_0 == NOT || LA89_0 == QUESTION_MARK || LA89_0 == STAR || LA89_0 == TO || LA89_0 == URI))
        {
            alt89 = 1;
        }
        else if ((LA89_0 == COMMA))
        {
            alt89 = 2;
        }

        else
        {
            if (state.backtracking > 0)
            {
                state.failed = true;
                return;
            }
            NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
            throw nvae;
        }

        switch (alt89)
        {
        case 1:
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:874:12: ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase DOT
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred50_FTS7853);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred50_FTS7861);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred50_FTS7869);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred50_FTS7877);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            match(input, DOT, FOLLOW_DOT_in_synpred50_FTS7879);
            if (state.failed)
                return;

        }
            break;
        case 2:
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:874:100: COMMA ftsWordBase
        {
            match(input, COMMA, FOLLOW_COMMA_in_synpred50_FTS7881);
            if (state.failed)
                return;

            pushFollow(FOLLOW_ftsWordBase_in_synpred50_FTS7883);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }
            break;

        }
    }
    // $ANTLR end synpred50_FTS

    // $ANTLR start synpred51_FTS
    public final void synpred51_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:876:12: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:876:13: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred51_FTS7952);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred51_FTS7960);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred51_FTS7968);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred51_FTS7976);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred51_FTS

    // $ANTLR start synpred52_FTS
    public final void synpred52_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:878:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:878:12: ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred52_FTS8048);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred52_FTS8056);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred52_FTS8064);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred52_FTS8072);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred52_FTS

    // $ANTLR start synpred53_FTS
    public final void synpred53_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:880:12: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:880:13: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred53_FTS8145);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred53_FTS8153);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred53_FTS8161);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred53_FTS8169);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred53_FTS

    // $ANTLR start synpred54_FTS
    public final void synpred54_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:882:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:882:12: ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred54_FTS8229);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred54_FTS8237);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred54_FTS8245);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred54_FTS8253);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred54_FTS

    // $ANTLR start synpred55_FTS
    public final void synpred55_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:884:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:884:12: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred55_FTS8313);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred55_FTS8321);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred55_FTS8329);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred55_FTS

    // $ANTLR start synpred56_FTS
    public final void synpred56_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:886:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:886:12: ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred56_FTS8393);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred56_FTS8401);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred56_FTS8409);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred56_FTS

    // $ANTLR start synpred57_FTS
    public final void synpred57_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:888:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:888:12: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred57_FTS8473);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred57_FTS8481);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred57_FTS8489);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred57_FTS

    // $ANTLR start synpred58_FTS
    public final void synpred58_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:890:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:890:12: ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred58_FTS8541);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred58_FTS8549);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred58_FTS8557);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred58_FTS

    // $ANTLR start synpred59_FTS
    public final void synpred59_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:892:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:892:12: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred59_FTS8610);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred59_FTS8618);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred59_FTS

    // $ANTLR start synpred60_FTS
    public final void synpred60_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:894:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:894:12: ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred60_FTS8674);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred60_FTS8682);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred60_FTS

    // $ANTLR start synpred61_FTS
    public final void synpred61_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:896:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:896:12: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred61_FTS8740);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred61_FTS8748);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred61_FTS

    // $ANTLR start synpred62_FTS
    public final void synpred62_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:898:11: ( ftsWordBase ( DOT | COMMA ) ftsWordBase )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:898:12: ftsWordBase ( DOT | COMMA ) ftsWordBase
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred62_FTS8792);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred62_FTS8800);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

        }

    }
    // $ANTLR end synpred62_FTS

    // $ANTLR start synpred63_FTS
    public final void synpred63_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:900:11: ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:900:12: ( DOT | COMMA ) ftsWordBase ( DOT | COMMA )
        {
            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
            pushFollow(FOLLOW_ftsWordBase_in_synpred63_FTS8844);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred63_FTS

    // $ANTLR start synpred64_FTS
    public final void synpred64_FTS_fragment() throws RecognitionException
    {
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:902:11: ( ftsWordBase ( DOT | COMMA ) )
        // ./alfresco-data-model/src/main/java/org/alfresco/repo/search/impl/parsers/FTS.g:902:12: ftsWordBase ( DOT | COMMA )
        {
            pushFollow(FOLLOW_ftsWordBase_in_synpred64_FTS8892);
            ftsWordBase();
            state._fsp--;
            if (state.failed)
                return;

            if (input.LA(1) == COMMA || input.LA(1) == DOT)
            {
                input.consume();
                state.errorRecovery = false;
                state.failed = false;
            }
            else
            {
                if (state.backtracking > 0)
                {
                    state.failed = true;
                    return;
                }
                MismatchedSetException mse = new MismatchedSetException(null, input);
                throw mse;
            }
        }

    }
    // $ANTLR end synpred64_FTS

    // Delegated rules

    public final boolean synpred18_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred18_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred43_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred43_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred9_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred9_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred26_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred26_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred51_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred51_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred60_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred60_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred35_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred35_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred27_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred27_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred42_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred42_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred25_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred25_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred44_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred44_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred8_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred8_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred61_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred61_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred34_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred34_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred52_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred52_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred17_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred17_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred37_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred37_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred24_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred24_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred10_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred10_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred53_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred53_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred7_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred7_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred40_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred40_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred49_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred49_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred19_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred19_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred23_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred23_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred36_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred36_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred6_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred6_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred11_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred11_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred54_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred54_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred41_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred41_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred13_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred13_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred48_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred48_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred21_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred21_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred64_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred64_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred14_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred14_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred57_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred57_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred5_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred5_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred55_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred55_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred12_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred12_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred31_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred31_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred38_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred38_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred47_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred47_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred22_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred22_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred39_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred39_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred4_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred4_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred30_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred30_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred56_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred56_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred62_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred62_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred32_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred32_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred46_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred46_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred59_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred59_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred29_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred29_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred1_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred1_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred3_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred3_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred16_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred16_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred50_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred50_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred33_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred33_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred63_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred63_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred20_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred20_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred58_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred58_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred28_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred28_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred45_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred45_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred2_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred2_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    public final boolean synpred15_FTS()
    {
        state.backtracking++;
        int start = input.mark();
        try
        {
            synpred15_FTS_fragment(); // can never throw exception
        }
        catch (RecognitionException re)
        {
            System.err.println("impossible: " + re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed = false;
        return success;
    }

    protected DFA17 dfa17 = new DFA17(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA84 dfa84 = new DFA84(this);
    static final String DFA17_eotS = "\u00ee\uffff";
    static final String DFA17_eofS = "\1\uffff\12\41\4\uffff\1\41\10\uffff\2\41\40\uffff\5\41\46\uffff\2\41" +
            "\2\uffff\11\41\3\uffff\1\41\51\uffff\1\41\4\uffff\5\41\1\uffff\1\41\4" +
            "\uffff\1\41\26\uffff\11\41\5\uffff\1\41\6\uffff\5\41\1\uffff\1\41\14\uffff";
    static final String DFA17_minS = "\1\5\12\4\2\5\2\12\1\4\10\uffff\2\4\1\5\37\uffff\5\4\3\12\1\5\3\uffff" +
            "\1\0\13\uffff\1\4\12\0\1\5\7\uffff\2\4\2\12\11\4\1\5\2\uffff\1\4\1\13" +
            "\1\77\5\12\1\4\34\uffff\5\0\1\4\1\13\3\uffff\5\4\1\0\1\4\2\uffff\1\12" +
            "\1\77\1\4\12\uffff\1\0\13\uffff\11\4\1\5\4\uffff\1\4\1\12\1\0\4\uffff" +
            "\5\4\1\0\1\4\1\0\13\uffff";
    static final String DFA17_maxS = "\13\150\1\146\1\150\2\12\1\150\10\uffff\3\150\37\uffff\5\150\1\25\2\12" +
            "\1\146\3\uffff\1\0\13\uffff\1\150\12\0\1\146\7\uffff\2\150\2\12\11\150" +
            "\1\146\2\uffff\2\150\1\77\1\25\4\12\1\150\34\uffff\5\0\2\150\3\uffff\5" +
            "\150\1\0\1\150\2\uffff\1\12\1\77\1\150\12\uffff\1\0\13\uffff\11\150\1" +
            "\146\4\uffff\1\150\1\12\1\0\4\uffff\5\150\1\0\1\150\1\0\13\uffff";
    static final String DFA17_acceptS = "\20\uffff\2\2\2\4\1\5\1\6\1\7\1\10\3\uffff\1\2\36\4\11\uffff\3\4\1\uffff" +
            "\13\4\14\uffff\6\4\1\3\16\uffff\2\4\11\uffff\1\1\33\4\7\uffff\3\4\7\uffff" +
            "\2\4\3\uffff\12\4\1\uffff\13\4\12\uffff\4\4\3\uffff\4\4\10\uffff\13\4";
    static final String DFA17_specialS = "\1\16\1\62\1\35\1\27\1\37\1\17\1\4\1\51\1\63\1\74\1\70\4\uffff\1\71\10" +
            "\uffff\1\10\1\117\1\110\37\uffff\1\41\1\64\1\67\1\76\1\72\7\uffff\1\46" +
            "\13\uffff\1\23\1\15\1\66\1\100\1\75\1\120\1\50\1\112\1\1\1\31\1\55\10" +
            "\uffff\1\77\1\32\2\uffff\1\33\1\25\1\34\1\26\1\36\1\47\1\54\1\60\1\53" +
            "\3\uffff\1\116\1\43\6\uffff\1\57\34\uffff\1\40\1\14\1\45\1\56\1\65\1\107" +
            "\1\3\3\uffff\1\61\1\7\1\5\1\11\1\24\1\30\1\13\4\uffff\1\22\12\uffff\1" +
            "\42\13\uffff\1\104\1\111\1\106\1\114\1\115\1\2\1\0\1\20\1\6\5\uffff\1" +
            "\44\1\uffff\1\12\4\uffff\1\21\1\73\1\101\1\103\1\102\1\113\1\105\1\52" +
            "\13\uffff}>";
    static final String[] DFA17_transitionS = {
            "\1\16\1\14\4\uffff\1\22\1\uffff\1\11\1\uffff\1\7\5\uffff\1\22\2\uffff" +
                    "\1\24\26\uffff\1\10\2\uffff\1\17\1\3\1\4\1\2\11\uffff\1\1\3\uffff\1\26" +
                    "\1\20\1\21\10\uffff\1\5\2\uffff\1\15\1\27\5\uffff\1\23\7\uffff\1\12\4" +
                    "\uffff\1\25\1\6\1\uffff\1\13",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\32\1\34\1\uffff\1\56\1\uffff\1\54" +
                    "\5\uffff\1\30\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff\1" +
                    "\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\32\1\34\1\uffff\1\56\1\uffff\1\54" +
                    "\5\uffff\1\34\2\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff\1\61\1" +
                    "\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71\5\uffff" +
                    "\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42\4\uffff" +
                    "\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\32\1\34\1\uffff\1\56\1\uffff\1\54" +
                    "\5\uffff\1\34\2\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff\1\61\1" +
                    "\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71\5\uffff" +
                    "\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42\4\uffff" +
                    "\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\34\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\75\71\uffff\1\72\16\uffff\1\76\2\uffff\1\74\24\uffff\1\73",
            "\1\16\71\uffff\1\77\16\uffff\1\101\2\uffff\1\15\24\uffff\1\100\1\uffff" +
                    "\1\102",
            "\1\32",
            "\1\32",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\105\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\104\4\uffff\1\103\1\53\1\uffff\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\120\1\uffff" +
                    "\1\114\5\uffff\1\105\2\uffff\1\65\2\uffff\1\52\23\uffff\1\115\2\uffff" +
                    "\1\61\1\110\1\111\1\107\11\uffff\1\106\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\112\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\117\2\uffff" +
                    "\1\42\4\uffff\1\116\4\uffff\1\35\1\113\1\uffff\1\121",
            "\1\143\1\142\1\60\1\44\1\uffff\1\141\1\uffff\1\137\1\uffff\1\133\1\uffff" +
                    "\1\131\5\uffff\1\137\1\136\1\uffff\1\65\2\uffff\1\52\23\uffff\1\132\2" +
                    "\uffff\1\61\1\125\1\126\1\124\11\uffff\1\123\3\uffff\1\122\1\62\1\63" +
                    "\2\uffff\1\71\5\uffff\1\127\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1" +
                    "\64\2\uffff\1\42\4\uffff\1\134\4\uffff\1\140\1\130\1\uffff\1\135",
            "\1\150\5\uffff\1\163\1\uffff\1\160\1\uffff\1\156\5\uffff\1\163\31\uffff" +
                    "\1\157\2\uffff\1\155\1\153\1\154\1\152\11\uffff\1\145\3\uffff\1\144\1" +
                    "\20\1\21\10\uffff\1\151\2\uffff\1\147\6\uffff\1\164\7\uffff\1\161\5\uffff" +
                    "\1\146\1\uffff\1\162",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\166\1\34\1\uffff\1\56\1\uffff\1" +
                    "\54\5\uffff\1\165\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\166\1\34\1\uffff\1\56\1\uffff\1" +
                    "\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\166\1\34\1\uffff\1\56\1\uffff\1" +
                    "\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\166\1\34\1\uffff\1\56\1\uffff\1" +
                    "\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\166\1\34\1\uffff\1\56\1\uffff\1" +
                    "\54\5\uffff\1\34\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\31\4\uffff\1\35\1\53\1\uffff\1\57",
            "\1\32\12\uffff\1\167",
            "\1\32",
            "\1\32",
            "\1\173\71\uffff\1\170\16\uffff\1\174\2\uffff\1\172\24\uffff\1\171",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u008e\1\u008d\1\u0090\1\u0099\3\uffff\1\177\1\uffff\1\u0089\1\uffff" +
                    "\1\175\5\uffff\1\177\2\uffff\1\u0094\2\uffff\1\u008f\23\uffff\1\u0086" +
                    "\2\uffff\1\u008b\1\u0082\1\u0083\1\u0081\11\uffff\1\u0080\3\uffff\1\u0096" +
                    "\1\u0092\1\u0093\2\uffff\1\u008c\5\uffff\1\u0084\2\uffff\1\u0091\1\u0097" +
                    "\1\uffff\1\u0098\3\uffff\1\u0088\2\uffff\1\176\4\uffff\1\u0087\4\uffff" +
                    "\1\u0095\1\u0085\1\uffff\1\u008a",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u009d\71\uffff\1\u009a\16\uffff\1\u009e\2\uffff\1\u009c\24\uffff" +
                    "\1\u009b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\u00a0\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u009f\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\u00a0\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\2\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\u00a0",
            "\1\u00a0",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\u00a0\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\2\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\105\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\104\4\uffff\1\u00a3\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\u00a7\71\uffff\1\u00a4\16\uffff\1\u00a8\2\uffff\1\u00a6\24\uffff" +
                    "\1\u00a5",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\120\1\uffff" +
                    "\1\114\5\uffff\1\105\2\uffff\1\65\2\uffff\1\52\23\uffff\1\115\2\uffff" +
                    "\1\61\1\110\1\111\1\107\11\uffff\1\u00a9\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\112\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\117\2\uffff" +
                    "\1\42\4\uffff\1\116\4\uffff\1\35\1\113\1\uffff\1\121",
            "\1\163\1\uffff\1\160\1\uffff\1\156\5\uffff\1\163\31\uffff\1\157\2\uffff" +
                    "\1\155\1\153\1\154\1\152\11\uffff\1\u00aa\3\uffff\1\144\1\20\1\21\10" +
                    "\uffff\1\u00ab\11\uffff\1\164\7\uffff\1\161\5\uffff\1\u00ac\1\uffff\1" +
                    "\162",
            "\1\u00ad",
            "\1\166\12\uffff\1\u00ae",
            "\1\166",
            "\1\166",
            "\1\166",
            "\1\166",
            "\1\u00b9\1\u00b8\1\u0090\1\u00b2\1\uffff\1\u00b7\1\uffff\1\u00b0\1\uffff" +
                    "\1\u0089\1\uffff\1\u00b3\5\uffff\1\u00b0\1\u00b5\1\uffff\1\u0094\2\uffff" +
                    "\1\u008f\23\uffff\1\u0086\2\uffff\1\u008b\1\u0082\1\u0083\1\u0081\11" +
                    "\uffff\1\u0080\3\uffff\1\u0096\1\u0092\1\u0093\2\uffff\1\u008c\5\uffff" +
                    "\1\u0084\2\uffff\1\u00b1\1\u0097\1\uffff\1\u0098\3\uffff\1\u0088\2\uffff" +
                    "\1\u00af\4\uffff\1\u00b4\4\uffff\1\u00b6\1\u0085\1\uffff\1\u008a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\u00c4\1\uffff" +
                    "\1\u00c0\5\uffff\1\105\2\uffff\1\65\2\uffff\1\52\23\uffff\1\u00c1\2\uffff" +
                    "\1\61\1\u00bc\1\u00bd\1\u00bb\11\uffff\1\u00ba\3\uffff\1\66\1\62\1\63" +
                    "\2\uffff\1\71\5\uffff\1\u00be\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff" +
                    "\1\u00c3\2\uffff\1\42\4\uffff\1\u00c2\4\uffff\1\u00a2\1\u00bf\1\uffff" +
                    "\1\u00c5",
            "\1\u00d0\1\uffff\1\u00cd\1\uffff\1\u00cb\5\uffff\1\u00d0\31\uffff\1" +
                    "\u00cc\2\uffff\1\u00ca\1\u00c8\1\u00c9\1\u00c7\11\uffff\1\u00c6\3\uffff" +
                    "\1\144\1\20\1\21\10\uffff\1\u00d1\11\uffff\1\u00d3\7\uffff\1\u00ce\5" +
                    "\uffff\1\u00d2\1\uffff\1\u00cf",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d4\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "\1\uffff",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00a1\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00a1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00a2\1\53\1\uffff\1\57",
            "",
            "",
            "\1\32",
            "\1\u00d5",
            "\1\143\1\142\1\60\1\44\1\uffff\1\141\1\uffff\1\105\1\uffff\1\133\1\uffff" +
                    "\1\131\5\uffff\1\105\2\uffff\1\65\2\uffff\1\52\23\uffff\1\132\2\uffff" +
                    "\1\61\1\125\1\126\1\124\11\uffff\1\123\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\127\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\u00d6\4\uffff\1\u00d7\1\130\1\uffff\1\135",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\105\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2\uffff" +
                    "\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff\1\71" +
                    "\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff\1\42" +
                    "\4\uffff\1\104\4\uffff\1\u00da\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\u00de\71\uffff\1\u00db\16\uffff\1\u00df\2\uffff\1\u00dd\24\uffff" +
                    "\1\u00dc",
            "",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\u00c4\1\uffff" +
                    "\1\u00c0\5\uffff\1\105\2\uffff\1\65\2\uffff\1\52\23\uffff\1\u00c1\2\uffff" +
                    "\1\61\1\u00bc\1\u00bd\1\u00bb\11\uffff\1\u00e0\3\uffff\1\66\1\62\1\63" +
                    "\2\uffff\1\71\5\uffff\1\u00be\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff" +
                    "\1\u00c3\2\uffff\1\42\4\uffff\1\u00c2\4\uffff\1\u00a2\1\u00bf\1\uffff" +
                    "\1\u00c5",
            "\1\166",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00e1\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\u00d8\1\uffff\1\56\1\uffff" +
                    "\1\54\5\uffff\1\u00d8\1\33\1\uffff\1\65\2\uffff\1\52\23\uffff\1\55\2" +
                    "\uffff\1\61\1\50\1\51\1\47\11\uffff\1\46\3\uffff\1\66\1\62\1\63\2\uffff" +
                    "\1\71\5\uffff\1\45\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff\1\64\2\uffff" +
                    "\1\42\4\uffff\1\104\4\uffff\1\u00d9\1\53\1\uffff\1\57",
            "\1\uffff",
            "\1\40\1\37\1\60\1\44\1\uffff\1\36\1\uffff\1\105\1\uffff\1\u00ec\1\uffff" +
                    "\1\u00e8\5\uffff\1\105\2\uffff\1\65\2\uffff\1\52\23\uffff\1\u00e9\2\uffff" +
                    "\1\61\1\u00e4\1\u00e5\1\u00e3\11\uffff\1\u00e2\3\uffff\1\66\1\62\1\63" +
                    "\2\uffff\1\71\5\uffff\1\u00e6\2\uffff\1\43\1\67\1\uffff\1\70\3\uffff" +
                    "\1\u00eb\2\uffff\1\42\4\uffff\1\u00ea\4\uffff\1\u00d9\1\u00e7\1\uffff" +
                    "\1\u00ed",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_specialS);
    static final short[][] DFA17_transition;

    static
    {
        int numStates = DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++)
        {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
        }
    }

    protected class DFA17 extends DFA
    {

        public DFA17(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }

        @Override
        public String getDescription()
        {
            return "445:1: ftsTest : ( ( ftsFieldGroupProximity )=> ftsFieldGroupProximity -> ^( PROXIMITY ftsFieldGroupProximity ) | ( ftsRange )=> ftsRange -> ^( RANGE ftsRange ) | ( ftsFieldGroup )=> ftsFieldGroup -> ftsFieldGroup | ( ftsTermOrPhrase )=> ftsTermOrPhrase | ( ftsExactTermOrPhrase )=> ftsExactTermOrPhrase | ( ftsTokenisedTermOrPhrase )=> ftsTokenisedTermOrPhrase | LPAREN ftsDisjunction RPAREN -> ftsDisjunction | template -> template );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException
        {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s)
            {
            case 0:
                int LA17_204 = input.LA(1);

                int index17_204 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition0(LA17_204);

                input.seek(index17_204);
                if (s >= 0)
                    return s;
                break;

            case 1:
                int LA17_90 = input.LA(1);

                int index17_90 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_90);
                if (s >= 0)
                    return s;
                break;

            case 2:
                int LA17_203 = input.LA(1);

                int index17_203 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition1(LA17_203);

                input.seek(index17_203);
                if (s >= 0)
                    return s;
                break;

            case 3:
                int LA17_160 = input.LA(1);

                int index17_160 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition2(LA17_160);

                input.seek(index17_160);
                if (s >= 0)
                    return s;
                break;

            case 4:
                int LA17_6 = input.LA(1);

                int index17_6 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition3(LA17_6);

                input.seek(index17_6);
                if (s >= 0)
                    return s;
                break;

            case 5:
                int LA17_166 = input.LA(1);

                int index17_166 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition4(LA17_166);

                input.seek(index17_166);
                if (s >= 0)
                    return s;
                break;

            case 6:
                int LA17_206 = input.LA(1);

                int index17_206 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition5(LA17_206);

                input.seek(index17_206);
                if (s >= 0)
                    return s;
                break;

            case 7:
                int LA17_165 = input.LA(1);

                int index17_165 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition6(LA17_165);

                input.seek(index17_165);
                if (s >= 0)
                    return s;
                break;

            case 8:
                int LA17_24 = input.LA(1);

                int index17_24 = input.index();
                input.rewind();
                s = -1;
                s = specialStateTransition7(LA17_24);

                input.seek(index17_24);
                if (s >= 0)
                    return s;
                break;

            case 9:
                int LA17_167 = input.LA(1);

                int index17_167 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_167 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_167 == COMMA || LA17_167 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_167 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_167 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_167 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_167 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_167 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_167 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_167 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_167 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_167 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_167 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_167 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_167 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_167 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_167 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_167 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_167 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_167 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_167 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_167 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_167 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_167 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_167 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_167 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_167 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_167 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_167 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_167 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_167 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_167 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_167 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_167);
                if (s >= 0)
                    return s;
                break;

            case 10:
                int LA17_214 = input.LA(1);

                int index17_214 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 218;
                }

                input.seek(index17_214);
                if (s >= 0)
                    return s;
                break;

            case 11:
                int LA17_170 = input.LA(1);

                int index17_170 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_170 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_170 == COMMA || LA17_170 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_170 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_170 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_170 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_170 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_170 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_170 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_170 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_170 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_170 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_170 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_170 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_170 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_170 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_170 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_170 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_170 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_170 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_170 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_170 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_170 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_170 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_170 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_170 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_170 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_170 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_170 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_170 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_170 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_170 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_170 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_170);
                if (s >= 0)
                    return s;
                break;

            case 12:
                int LA17_155 = input.LA(1);

                int index17_155 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 185;
                }

                input.seek(index17_155);
                if (s >= 0)
                    return s;
                break;

            case 13:
                int LA17_83 = input.LA(1);

                int index17_83 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_83);
                if (s >= 0)
                    return s;
                break;

            case 14:
                int LA17_0 = input.LA(1);

                int index17_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_0 == ID))
                {
                    s = 1;
                }
                else if ((LA17_0 == FTSWORD))
                {
                    s = 2;
                }
                else if ((LA17_0 == FTSPRE))
                {
                    s = 3;
                }
                else if ((LA17_0 == FTSWILD))
                {
                    s = 4;
                }
                else if ((LA17_0 == NOT))
                {
                    s = 5;
                }
                else if ((LA17_0 == TO))
                {
                    s = 6;
                }
                else if ((LA17_0 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 7;
                }
                else if ((LA17_0 == FLOATING_POINT_LITERAL))
                {
                    s = 8;
                }
                else if ((LA17_0 == DATETIME))
                {
                    s = 9;
                }
                else if ((LA17_0 == STAR))
                {
                    s = 10;
                }
                else if ((LA17_0 == URI))
                {
                    s = 11;
                }
                else if ((LA17_0 == AT))
                {
                    s = 12;
                }
                else if ((LA17_0 == OR))
                {
                    s = 13;
                }
                else if ((LA17_0 == AND))
                {
                    s = 14;
                }
                else if ((LA17_0 == FTSPHRASE))
                {
                    s = 15;
                }
                else if ((LA17_0 == LSQUARE) && (synpred3_FTS()))
                {
                    s = 16;
                }
                else if ((LA17_0 == LT) && (synpred3_FTS()))
                {
                    s = 17;
                }
                else if ((LA17_0 == COMMA || LA17_0 == DOT) && (synpred5_FTS()))
                {
                    s = 18;
                }
                else if ((LA17_0 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 19;
                }
                else if ((LA17_0 == EQUALS) && (synpred6_FTS()))
                {
                    s = 20;
                }
                else if ((LA17_0 == TILDA) && (synpred7_FTS()))
                {
                    s = 21;
                }
                else if ((LA17_0 == LPAREN))
                {
                    s = 22;
                }
                else if ((LA17_0 == PERCENT))
                {
                    s = 23;
                }

                input.seek(index17_0);
                if (s >= 0)
                    return s;
                break;

            case 15:
                int LA17_5 = input.LA(1);

                int index17_5 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_5 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_5 == COLON))
                {
                    s = 26;
                }
                else if ((LA17_5 == COMMA || LA17_5 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_5 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_5 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_5 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_5 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_5 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_5 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_5 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_5 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_5 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_5 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_5 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_5 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_5 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_5 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_5 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_5 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_5 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_5 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_5 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_5 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_5 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_5 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_5 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_5 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_5 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_5 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_5 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_5 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_5 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_5);
                if (s >= 0)
                    return s;
                break;

            case 16:
                int LA17_205 = input.LA(1);

                int index17_205 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_205 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_205 == COMMA || LA17_205 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_205 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_205 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_205 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_205 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_205 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_205 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_205 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_205 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_205 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_205 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_205 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_205 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_205 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_205 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_205 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_205 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_205 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_205 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_205 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_205 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_205 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_205 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_205 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_205 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_205 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_205 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_205 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_205 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_205 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_205 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_205);
                if (s >= 0)
                    return s;
                break;

            case 17:
                int LA17_219 = input.LA(1);

                int index17_219 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_219 == DOT))
                {
                    s = 225;
                }
                else if ((LA17_219 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_219 == COMMA) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_219 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_219 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_219 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_219 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_219 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_219 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_219 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_219 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_219 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_219 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_219 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_219 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_219 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_219 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_219 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_219 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_219 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_219 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_219 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_219 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_219 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_219 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_219 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_219 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_219 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_219 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_219 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_219 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_219 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_219 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_219);
                if (s >= 0)
                    return s;
                break;

            case 18:
                int LA17_175 = input.LA(1);

                int index17_175 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_175 == ID))
                {
                    s = 83;
                }
                else if ((LA17_175 == FTSWORD))
                {
                    s = 84;
                }
                else if ((LA17_175 == FTSPRE))
                {
                    s = 85;
                }
                else if ((LA17_175 == FTSWILD))
                {
                    s = 86;
                }
                else if ((LA17_175 == NOT))
                {
                    s = 87;
                }
                else if ((LA17_175 == TO))
                {
                    s = 88;
                }
                else if ((LA17_175 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 89;
                }
                else if ((LA17_175 == FLOATING_POINT_LITERAL))
                {
                    s = 90;
                }
                else if ((LA17_175 == DATETIME))
                {
                    s = 91;
                }
                else if ((LA17_175 == STAR))
                {
                    s = 214;
                }
                else if ((LA17_175 == URI))
                {
                    s = 93;
                }
                else if ((LA17_175 == CARAT) && (synpred5_FTS()))
                {
                    s = 97;
                }
                else if ((LA17_175 == AND) && (synpred5_FTS()))
                {
                    s = 98;
                }
                else if ((LA17_175 == AMP) && (synpred5_FTS()))
                {
                    s = 99;
                }
                else if ((LA17_175 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_175 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_175 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_175 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_175 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_175 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_175 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_175 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_175 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_175 == COMMA || LA17_175 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_175 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_175 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_175 == TILDA) && (synpred5_FTS()))
                {
                    s = 215;
                }
                else if ((LA17_175 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_175 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_175 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_175 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_175);
                if (s >= 0)
                    return s;
                break;

            case 19:
                int LA17_82 = input.LA(1);

                int index17_82 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_82 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 125;
                }
                else if ((LA17_82 == RPAREN) && (synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((LA17_82 == COMMA || LA17_82 == DOT) && (synpred5_FTS()))
                {
                    s = 127;
                }
                else if ((LA17_82 == ID) && (synpred5_FTS()))
                {
                    s = 128;
                }
                else if ((LA17_82 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 129;
                }
                else if ((LA17_82 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 130;
                }
                else if ((LA17_82 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 131;
                }
                else if ((LA17_82 == NOT) && (synpred5_FTS()))
                {
                    s = 132;
                }
                else if ((LA17_82 == TO) && (synpred5_FTS()))
                {
                    s = 133;
                }
                else if ((LA17_82 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 134;
                }
                else if ((LA17_82 == STAR) && (synpred5_FTS()))
                {
                    s = 135;
                }
                else if ((LA17_82 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 136;
                }
                else if ((LA17_82 == DATETIME) && (synpred5_FTS()))
                {
                    s = 137;
                }
                else if ((LA17_82 == URI) && (synpred5_FTS()))
                {
                    s = 138;
                }
                else if ((LA17_82 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 139;
                }
                else if ((LA17_82 == MINUS) && (synpred5_FTS()))
                {
                    s = 140;
                }
                else if ((LA17_82 == AND) && (synpred5_FTS()))
                {
                    s = 141;
                }
                else if ((LA17_82 == AMP) && (synpred5_FTS()))
                {
                    s = 142;
                }
                else if ((LA17_82 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 143;
                }
                else if ((LA17_82 == AT) && (synpred5_FTS()))
                {
                    s = 144;
                }
                else if ((LA17_82 == OR) && (synpred5_FTS()))
                {
                    s = 145;
                }
                else if ((LA17_82 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 146;
                }
                else if ((LA17_82 == LT) && (synpred5_FTS()))
                {
                    s = 147;
                }
                else if ((LA17_82 == EQUALS) && (synpred5_FTS()))
                {
                    s = 148;
                }
                else if ((LA17_82 == TILDA) && (synpred5_FTS()))
                {
                    s = 149;
                }
                else if ((LA17_82 == LPAREN) && (synpred5_FTS()))
                {
                    s = 150;
                }
                else if ((LA17_82 == PERCENT) && (synpred5_FTS()))
                {
                    s = 151;
                }
                else if ((LA17_82 == PLUS) && (synpred5_FTS()))
                {
                    s = 152;
                }
                else if ((LA17_82 == BAR) && (synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_82);
                if (s >= 0)
                    return s;
                break;

            case 20:
                int LA17_168 = input.LA(1);

                int index17_168 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_168 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_168 == COMMA || LA17_168 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_168 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_168 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_168 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_168 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_168 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_168 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_168 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_168 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_168 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_168 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_168 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_168 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_168 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_168 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_168 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_168 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_168 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_168 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_168 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_168 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_168 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_168 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_168 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_168 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_168 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_168 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_168 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_168 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_168 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_168 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_168);
                if (s >= 0)
                    return s;
                break;

            case 21:
                int LA17_106 = input.LA(1);

                int index17_106 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_106 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_106 == COMMA || LA17_106 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_106 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_106 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_106 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_106 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_106 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_106 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_106 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_106 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_106 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_106 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_106 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_106 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_106 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_106 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_106 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_106 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_106 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_106 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_106 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_106 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_106 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_106 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_106 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_106 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_106 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_106 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_106 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_106 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_106 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_106 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_106);
                if (s >= 0)
                    return s;
                break;

            case 22:
                int LA17_108 = input.LA(1);

                int index17_108 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_108 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_108 == COMMA || LA17_108 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_108 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_108 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_108 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_108 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_108 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_108 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_108 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_108 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_108 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_108 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_108 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_108 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_108 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_108 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_108 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_108 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_108 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_108 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_108 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_108 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_108 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_108 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_108 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_108 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_108 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_108 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_108 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_108 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_108 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_108 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_108);
                if (s >= 0)
                    return s;
                break;

            case 23:
                int LA17_3 = input.LA(1);

                int index17_3 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_3 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_3 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_3 == COMMA || LA17_3 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_3 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_3 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_3 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_3 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_3 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_3 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_3 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_3 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_3 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_3 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_3 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_3 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_3 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_3 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_3 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_3 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_3 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_3 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_3 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_3 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_3 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_3 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_3 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_3 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_3 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_3 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_3 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_3 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_3 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_3);
                if (s >= 0)
                    return s;
                break;

            case 24:
                int LA17_169 = input.LA(1);

                int index17_169 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((synpred4_FTS()))
                {
                    s = 100;
                }
                else if ((synpred5_FTS()))
                {
                    s = 211;
                }

                input.seek(index17_169);
                if (s >= 0)
                    return s;
                break;

            case 25:
                int LA17_91 = input.LA(1);

                int index17_91 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_91);
                if (s >= 0)
                    return s;
                break;

            case 26:
                int LA17_102 = input.LA(1);

                int index17_102 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_102 == COLON))
                {
                    s = 160;
                }
                else if ((LA17_102 == COMMA || LA17_102 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_102 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_102 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_102 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_102 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_102 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_102 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_102 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_102 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_102 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_102 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_102 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_102 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_102 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_102 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_102 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_102 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_102 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_102 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_102 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_102 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_102 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_102 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_102 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_102 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_102 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_102 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_102 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_102 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_102 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_102 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_102);
                if (s >= 0)
                    return s;
                break;

            case 27:
                int LA17_105 = input.LA(1);

                int index17_105 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_105 == COLON))
                {
                    s = 160;
                }
                else if ((LA17_105 == COMMA || LA17_105 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_105 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_105 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_105 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_105 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_105 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_105 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_105 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_105 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_105 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_105 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_105 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_105 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_105 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_105 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_105 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_105 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_105 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_105 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_105 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_105 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_105 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_105 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_105 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_105 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_105 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_105 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_105 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_105 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_105 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_105 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_105);
                if (s >= 0)
                    return s;
                break;

            case 28:
                int LA17_107 = input.LA(1);

                int index17_107 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_107 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_107 == COMMA || LA17_107 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_107 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_107 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_107 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_107 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_107 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_107 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_107 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_107 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_107 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_107 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_107 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_107 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_107 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_107 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_107 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_107 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_107 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_107 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_107 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_107 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_107 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_107 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_107 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_107 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_107 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_107 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_107 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_107 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_107 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_107 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_107);
                if (s >= 0)
                    return s;
                break;

            case 29:
                int LA17_2 = input.LA(1);

                int index17_2 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_2 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_2 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_2 == COMMA || LA17_2 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_2 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_2 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_2 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_2 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_2 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_2 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_2 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_2 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_2 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_2 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_2 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_2 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_2 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_2 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_2 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_2 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_2 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_2 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_2 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_2 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_2 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_2 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_2 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_2 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_2 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_2 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_2 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_2 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_2 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_2);
                if (s >= 0)
                    return s;
                break;

            case 30:
                int LA17_109 = input.LA(1);

                int index17_109 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_109 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_109 == TILDA) && (synpred5_FTS()))
                {
                    s = 163;
                }
                else if ((LA17_109 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_109 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_109 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_109 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_109 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_109 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_109 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_109 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_109 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_109 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_109 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_109 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_109 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_109 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_109 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_109 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_109 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_109 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_109 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_109 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_109 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_109 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_109 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_109 == COMMA || LA17_109 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_109 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_109 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_109 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_109 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_109 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_109 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_109);
                if (s >= 0)
                    return s;
                break;

            case 31:
                int LA17_4 = input.LA(1);

                int index17_4 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_4 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_4 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_4 == COMMA || LA17_4 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_4 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_4 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_4 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_4 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_4 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_4 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_4 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_4 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_4 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_4 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_4 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_4 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_4 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_4 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_4 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_4 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_4 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_4 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_4 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_4 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_4 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_4 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_4 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_4 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_4 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_4 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_4 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_4 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_4 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_4);
                if (s >= 0)
                    return s;
                break;

            case 32:
                int LA17_154 = input.LA(1);

                int index17_154 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 185;
                }

                input.seek(index17_154);
                if (s >= 0)
                    return s;
                break;

            case 33:
                int LA17_58 = input.LA(1);

                int index17_58 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_58 == DOT))
                {
                    s = 117;
                }
                else if ((LA17_58 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_58 == COLON))
                {
                    s = 118;
                }
                else if ((LA17_58 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_58 == COMMA) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_58 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_58 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_58 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_58 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_58 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_58 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_58 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_58 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_58 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_58 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_58 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_58 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_58 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_58 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_58 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_58 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_58 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_58 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_58 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_58 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_58 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_58 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_58 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_58 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_58 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_58 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_58 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_58 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_58 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_58);
                if (s >= 0)
                    return s;
                break;

            case 34:
                int LA17_186 = input.LA(1);

                int index17_186 = input.index();
                input.rewind();
                s = -1;
                if ((synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((synpred4_FTS()))
                {
                    s = 100;
                }
                else if ((synpred5_FTS()))
                {
                    s = 215;
                }

                input.seek(index17_186);
                if (s >= 0)
                    return s;
                break;

            case 35:
                int LA17_118 = input.LA(1);

                int index17_118 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_118 == LPAREN) && (synpred4_FTS()))
                {
                    s = 100;
                }
                else if ((LA17_118 == ID))
                {
                    s = 170;
                }
                else if ((LA17_118 == FTSWORD))
                {
                    s = 106;
                }
                else if ((LA17_118 == FTSPRE))
                {
                    s = 107;
                }
                else if ((LA17_118 == FTSWILD))
                {
                    s = 108;
                }
                else if ((LA17_118 == FTSPHRASE))
                {
                    s = 109;
                }
                else if ((LA17_118 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 110;
                }
                else if ((LA17_118 == FLOATING_POINT_LITERAL))
                {
                    s = 111;
                }
                else if ((LA17_118 == DATETIME))
                {
                    s = 112;
                }
                else if ((LA17_118 == STAR))
                {
                    s = 113;
                }
                else if ((LA17_118 == URI))
                {
                    s = 114;
                }
                else if ((LA17_118 == LSQUARE) && (synpred3_FTS()))
                {
                    s = 16;
                }
                else if ((LA17_118 == LT) && (synpred3_FTS()))
                {
                    s = 17;
                }
                else if ((LA17_118 == COMMA || LA17_118 == DOT) && (synpred5_FTS()))
                {
                    s = 115;
                }
                else if ((LA17_118 == NOT) && (synpred5_FTS()))
                {
                    s = 171;
                }
                else if ((LA17_118 == TO) && (synpred5_FTS()))
                {
                    s = 172;
                }
                else if ((LA17_118 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 116;
                }

                input.seek(index17_118);
                if (s >= 0)
                    return s;
                break;

            case 36:
                int LA17_212 = input.LA(1);

                int index17_212 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_212 == ID))
                {
                    s = 224;
                }
                else if ((LA17_212 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 187;
                }
                else if ((LA17_212 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 188;
                }
                else if ((LA17_212 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 189;
                }
                else if ((LA17_212 == NOT) && (synpred5_FTS()))
                {
                    s = 190;
                }
                else if ((LA17_212 == TO) && (synpred5_FTS()))
                {
                    s = 191;
                }
                else if ((LA17_212 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 192;
                }
                else if ((LA17_212 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 193;
                }
                else if ((LA17_212 == STAR) && (synpred5_FTS()))
                {
                    s = 194;
                }
                else if ((LA17_212 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 195;
                }
                else if ((LA17_212 == DATETIME) && (synpred5_FTS()))
                {
                    s = 196;
                }
                else if ((LA17_212 == URI) && (synpred5_FTS()))
                {
                    s = 197;
                }
                else if ((LA17_212 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_212 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_212 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_212 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_212 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_212 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_212 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_212 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_212 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_212 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_212 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_212 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_212 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_212 == COMMA || LA17_212 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_212 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_212 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_212 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_212 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_212 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_212);
                if (s >= 0)
                    return s;
                break;

            case 37:
                int LA17_156 = input.LA(1);

                int index17_156 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 185;
                }

                input.seek(index17_156);
                if (s >= 0)
                    return s;
                break;

            case 38:
                int LA17_70 = input.LA(1);

                int index17_70 = input.index();
                input.rewind();
                s = -1;
                if ((synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((synpred4_FTS()))
                {
                    s = 100;
                }
                else if ((synpred5_FTS()))
                {
                    s = 116;
                }

                input.seek(index17_70);
                if (s >= 0)
                    return s;
                break;

            case 39:
                int LA17_110 = input.LA(1);

                int index17_110 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_110 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_110 == COMMA || LA17_110 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_110 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_110 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_110 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_110 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_110 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_110 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_110 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_110 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_110 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_110 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_110 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_110 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_110 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_110 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_110 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_110 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_110 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_110 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_110 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_110 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_110 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_110 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_110 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_110 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_110 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_110 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_110 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_110 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_110 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_110 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_110);
                if (s >= 0)
                    return s;
                break;

            case 40:
                int LA17_88 = input.LA(1);

                int index17_88 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_88);
                if (s >= 0)
                    return s;
                break;

            case 41:
                int LA17_7 = input.LA(1);

                int index17_7 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_7 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_7 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_7 == COMMA || LA17_7 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_7 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_7 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_7 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_7 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_7 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_7 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_7 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_7 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_7 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_7 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_7 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_7 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_7 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_7 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_7 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_7 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_7 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_7 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_7 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_7 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_7 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_7 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_7 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_7 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_7 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_7 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_7 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_7 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_7 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_7);
                if (s >= 0)
                    return s;
                break;

            case 42:
                int LA17_226 = input.LA(1);

                int index17_226 = input.index();
                input.rewind();
                s = -1;
                if ((synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((synpred5_FTS()))
                {
                    s = 237;
                }

                input.seek(index17_226);
                if (s >= 0)
                    return s;
                break;

            case 43:
                int LA17_113 = input.LA(1);

                int index17_113 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_113 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_113 == COMMA || LA17_113 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_113 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_113 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_113 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_113 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_113 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_113 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_113 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_113 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_113 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_113 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_113 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_113 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_113 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_113 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_113 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_113 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_113 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_113 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_113 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_113 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_113 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_113 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_113 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_113 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_113 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_113 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_113 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_113 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_113 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_113 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_113);
                if (s >= 0)
                    return s;
                break;

            case 44:
                int LA17_111 = input.LA(1);

                int index17_111 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_111 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_111 == COMMA || LA17_111 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_111 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_111 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_111 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_111 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_111 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_111 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_111 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_111 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_111 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_111 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_111 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_111 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_111 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_111 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_111 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_111 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_111 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_111 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_111 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_111 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_111 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_111 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_111 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_111 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_111 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_111 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_111 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_111 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_111 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_111 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_111);
                if (s >= 0)
                    return s;
                break;

            case 45:
                int LA17_92 = input.LA(1);

                int index17_92 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_92);
                if (s >= 0)
                    return s;
                break;

            case 46:
                int LA17_157 = input.LA(1);

                int index17_157 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 185;
                }

                input.seek(index17_157);
                if (s >= 0)
                    return s;
                break;

            case 47:
                int LA17_125 = input.LA(1);

                int index17_125 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_125 == RPAREN))
                {
                    s = 175;
                }
                else if ((LA17_125 == COMMA || LA17_125 == DOT) && (synpred5_FTS()))
                {
                    s = 176;
                }
                else if ((LA17_125 == OR) && (synpred5_FTS()))
                {
                    s = 177;
                }
                else if ((LA17_125 == BAR) && (synpred5_FTS()))
                {
                    s = 178;
                }
                else if ((LA17_125 == ID) && (synpred5_FTS()))
                {
                    s = 128;
                }
                else if ((LA17_125 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 129;
                }
                else if ((LA17_125 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 130;
                }
                else if ((LA17_125 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 131;
                }
                else if ((LA17_125 == NOT) && (synpred5_FTS()))
                {
                    s = 132;
                }
                else if ((LA17_125 == TO) && (synpred5_FTS()))
                {
                    s = 133;
                }
                else if ((LA17_125 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 179;
                }
                else if ((LA17_125 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 134;
                }
                else if ((LA17_125 == STAR) && (synpred5_FTS()))
                {
                    s = 180;
                }
                else if ((LA17_125 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 136;
                }
                else if ((LA17_125 == DATETIME) && (synpred5_FTS()))
                {
                    s = 137;
                }
                else if ((LA17_125 == URI) && (synpred5_FTS()))
                {
                    s = 138;
                }
                else if ((LA17_125 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 139;
                }
                else if ((LA17_125 == MINUS) && (synpred5_FTS()))
                {
                    s = 140;
                }
                else if ((LA17_125 == DOTDOT) && (synpred5_FTS()))
                {
                    s = 181;
                }
                else if ((LA17_125 == TILDA) && (synpred5_FTS()))
                {
                    s = 182;
                }
                else if ((LA17_125 == CARAT) && (synpred5_FTS()))
                {
                    s = 183;
                }
                else if ((LA17_125 == AND) && (synpred5_FTS()))
                {
                    s = 184;
                }
                else if ((LA17_125 == AMP) && (synpred5_FTS()))
                {
                    s = 185;
                }
                else if ((LA17_125 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 143;
                }
                else if ((LA17_125 == AT) && (synpred5_FTS()))
                {
                    s = 144;
                }
                else if ((LA17_125 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 146;
                }
                else if ((LA17_125 == LT) && (synpred5_FTS()))
                {
                    s = 147;
                }
                else if ((LA17_125 == EQUALS) && (synpred5_FTS()))
                {
                    s = 148;
                }
                else if ((LA17_125 == LPAREN) && (synpred5_FTS()))
                {
                    s = 150;
                }
                else if ((LA17_125 == PERCENT) && (synpred5_FTS()))
                {
                    s = 151;
                }
                else if ((LA17_125 == PLUS) && (synpred5_FTS()))
                {
                    s = 152;
                }

                input.seek(index17_125);
                if (s >= 0)
                    return s;
                break;

            case 48:
                int LA17_112 = input.LA(1);

                int index17_112 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_112 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_112 == COMMA || LA17_112 == DOT) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_112 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_112 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_112 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_112 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_112 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_112 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_112 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_112 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_112 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_112 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_112 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_112 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_112 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_112 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_112 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_112 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_112 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_112 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_112 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_112 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_112 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_112 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_112 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_112 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_112 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_112 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_112 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_112 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_112 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_112 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_112);
                if (s >= 0)
                    return s;
                break;

            case 49:
                int LA17_164 = input.LA(1);

                int index17_164 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_164 == DOT))
                {
                    s = 212;
                }
                else if ((LA17_164 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_164 == COMMA) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_164 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_164 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_164 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_164 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_164 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_164 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_164 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_164 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_164 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_164 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_164 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_164 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_164 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_164 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_164 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_164 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_164 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_164 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_164 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_164 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_164 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_164 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_164 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_164 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_164 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_164 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_164 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_164 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_164 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_164 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_164);
                if (s >= 0)
                    return s;
                break;

            case 50:
                int LA17_1 = input.LA(1);

                int index17_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_1 == DOT))
                {
                    s = 24;
                }
                else if ((LA17_1 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_1 == COLON))
                {
                    s = 26;
                }
                else if ((LA17_1 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_1 == COMMA) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_1 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_1 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_1 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_1 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_1 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_1 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_1 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_1 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_1 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_1 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_1 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_1 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_1 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_1 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_1 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_1 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_1 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_1 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_1 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_1 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_1 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_1 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_1 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_1 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_1 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_1 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_1 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_1 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_1 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_1);
                if (s >= 0)
                    return s;
                break;

            case 51:
                int LA17_8 = input.LA(1);

                int index17_8 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_8 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_8 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_8 == COMMA || LA17_8 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_8 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_8 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_8 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_8 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_8 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_8 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_8 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_8 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_8 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_8 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_8 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_8 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_8 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_8 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_8 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_8 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_8 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_8 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_8 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_8 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_8 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_8 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_8 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_8 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_8 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_8 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_8 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_8 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_8 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_8);
                if (s >= 0)
                    return s;
                break;

            case 52:
                int LA17_59 = input.LA(1);

                int index17_59 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_59 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_59 == COLON))
                {
                    s = 118;
                }
                else if ((LA17_59 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_59 == COMMA || LA17_59 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_59 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_59 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_59 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_59 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_59 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_59 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_59 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_59 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_59 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_59 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_59 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_59 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_59 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_59 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_59 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_59 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_59 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_59 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_59 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_59 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_59 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_59 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_59 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_59 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_59 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_59 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_59 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_59 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_59 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_59);
                if (s >= 0)
                    return s;
                break;

            case 53:
                int LA17_158 = input.LA(1);

                int index17_158 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 185;
                }

                input.seek(index17_158);
                if (s >= 0)
                    return s;
                break;

            case 54:
                int LA17_84 = input.LA(1);

                int index17_84 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_84);
                if (s >= 0)
                    return s;
                break;

            case 55:
                int LA17_60 = input.LA(1);

                int index17_60 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_60 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_60 == COLON))
                {
                    s = 118;
                }
                else if ((LA17_60 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_60 == COMMA || LA17_60 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_60 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_60 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_60 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_60 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_60 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_60 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_60 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_60 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_60 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_60 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_60 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_60 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_60 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_60 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_60 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_60 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_60 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_60 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_60 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_60 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_60 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_60 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_60 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_60 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_60 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_60 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_60 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_60 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_60 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_60);
                if (s >= 0)
                    return s;
                break;

            case 56:
                int LA17_10 = input.LA(1);

                int index17_10 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_10 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_10 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_10 == COMMA || LA17_10 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_10 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_10 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_10 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_10 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_10 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_10 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_10 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_10 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_10 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_10 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_10 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_10 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_10 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_10 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_10 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_10 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_10 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_10 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_10 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_10 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_10 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_10 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_10 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_10 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_10 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_10 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_10 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_10 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_10 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_10);
                if (s >= 0)
                    return s;
                break;

            case 57:
                int LA17_15 = input.LA(1);

                int index17_15 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_15 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_15 == TILDA) && (synpred5_FTS()))
                {
                    s = 67;
                }
                else if ((LA17_15 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_15 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_15 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_15 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_15 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_15 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_15 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_15 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_15 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_15 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_15 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_15 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_15 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_15 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_15 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_15 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_15 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_15 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_15 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_15 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_15 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_15 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_15 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_15 == COMMA || LA17_15 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_15 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_15 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_15 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_15 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_15 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_15 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_15);
                if (s >= 0)
                    return s;
                break;

            case 58:
                int LA17_62 = input.LA(1);

                int index17_62 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_62 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_62 == COLON))
                {
                    s = 118;
                }
                else if ((LA17_62 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_62 == COMMA || LA17_62 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_62 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_62 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_62 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_62 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_62 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_62 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_62 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_62 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_62 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_62 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_62 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_62 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_62 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_62 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_62 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_62 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_62 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_62 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_62 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_62 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_62 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_62 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_62 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_62 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_62 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_62 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_62 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_62 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_62 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_62);
                if (s >= 0)
                    return s;
                break;

            case 59:
                int LA17_220 = input.LA(1);

                int index17_220 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_220 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_220 == COMMA || LA17_220 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_220 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_220 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_220 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_220 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_220 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_220 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_220 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_220 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_220 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_220 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_220 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_220 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_220 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_220 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_220 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_220 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_220 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_220 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_220 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_220 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_220 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_220 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_220 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_220 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_220 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_220 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_220 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_220 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_220 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_220 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_220);
                if (s >= 0)
                    return s;
                break;

            case 60:
                int LA17_9 = input.LA(1);

                int index17_9 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_9 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_9 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_9 == COMMA || LA17_9 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_9 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_9 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_9 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_9 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_9 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_9 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_9 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_9 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_9 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_9 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_9 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_9 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_9 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_9 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_9 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_9 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_9 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_9 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_9 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_9 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_9 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_9 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_9 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_9 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_9 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_9 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_9 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_9 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_9 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_9);
                if (s >= 0)
                    return s;
                break;

            case 61:
                int LA17_86 = input.LA(1);

                int index17_86 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_86);
                if (s >= 0)
                    return s;
                break;

            case 62:
                int LA17_61 = input.LA(1);

                int index17_61 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_61 == STAR))
                {
                    s = 25;
                }
                else if ((LA17_61 == COLON))
                {
                    s = 118;
                }
                else if ((LA17_61 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_61 == COMMA || LA17_61 == DOT) && (synpred5_FTS()))
                {
                    s = 28;
                }
                else if ((LA17_61 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_61 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_61 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_61 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_61 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_61 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_61 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_61 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_61 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_61 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_61 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_61 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_61 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_61 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_61 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_61 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_61 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_61 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_61 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_61 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_61 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_61 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_61 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_61 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_61 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_61 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_61 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_61 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_61 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_61);
                if (s >= 0)
                    return s;
                break;

            case 63:
                int LA17_101 = input.LA(1);

                int index17_101 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_101 == DOT))
                {
                    s = 159;
                }
                else if ((LA17_101 == COLON))
                {
                    s = 160;
                }
                else if ((LA17_101 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_101 == COMMA) && (synpred5_FTS()))
                {
                    s = 161;
                }
                else if ((LA17_101 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_101 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_101 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_101 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_101 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_101 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_101 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_101 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_101 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_101 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_101 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_101 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_101 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_101 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_101 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_101 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_101 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_101 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_101 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_101 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_101 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_101 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_101 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_101 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_101 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_101 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_101 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_101 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_101 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_101 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_101);
                if (s >= 0)
                    return s;
                break;

            case 64:
                int LA17_85 = input.LA(1);

                int index17_85 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_85);
                if (s >= 0)
                    return s;
                break;

            case 65:
                int LA17_221 = input.LA(1);

                int index17_221 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_221 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_221 == COMMA || LA17_221 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_221 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_221 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_221 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_221 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_221 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_221 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_221 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_221 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_221 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_221 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_221 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_221 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_221 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_221 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_221 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_221 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_221 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_221 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_221 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_221 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_221 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_221 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_221 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_221 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_221 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_221 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_221 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_221 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_221 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_221 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_221);
                if (s >= 0)
                    return s;
                break;

            case 66:
                int LA17_223 = input.LA(1);

                int index17_223 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_223 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_223 == COMMA || LA17_223 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_223 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_223 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_223 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_223 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_223 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_223 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_223 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_223 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_223 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_223 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_223 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_223 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_223 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_223 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_223 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_223 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_223 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_223 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_223 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_223 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_223 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_223 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_223 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_223 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_223 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_223 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_223 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_223 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_223 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_223 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_223);
                if (s >= 0)
                    return s;
                break;

            case 67:
                int LA17_222 = input.LA(1);

                int index17_222 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_222 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_222 == COMMA || LA17_222 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_222 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_222 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_222 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_222 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_222 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_222 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_222 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_222 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_222 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_222 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_222 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_222 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_222 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_222 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_222 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_222 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_222 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_222 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_222 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_222 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_222 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_222 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_222 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_222 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_222 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_222 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_222 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_222 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_222 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_222 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_222);
                if (s >= 0)
                    return s;
                break;

            case 68:
                int LA17_198 = input.LA(1);

                int index17_198 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_198 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_198 == COMMA || LA17_198 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_198 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_198 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_198 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_198 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_198 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_198 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_198 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_198 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_198 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_198 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_198 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_198 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_198 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_198 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_198 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_198 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_198 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_198 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_198 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_198 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_198 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_198 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_198 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_198 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_198 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_198 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_198 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_198 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_198 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_198 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_198);
                if (s >= 0)
                    return s;
                break;

            case 69:
                int LA17_225 = input.LA(1);

                int index17_225 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_225 == ID))
                {
                    s = 226;
                }
                else if ((LA17_225 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 227;
                }
                else if ((LA17_225 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 228;
                }
                else if ((LA17_225 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 229;
                }
                else if ((LA17_225 == NOT) && (synpred5_FTS()))
                {
                    s = 230;
                }
                else if ((LA17_225 == TO) && (synpred5_FTS()))
                {
                    s = 231;
                }
                else if ((LA17_225 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 232;
                }
                else if ((LA17_225 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 233;
                }
                else if ((LA17_225 == STAR) && (synpred5_FTS()))
                {
                    s = 234;
                }
                else if ((LA17_225 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 235;
                }
                else if ((LA17_225 == DATETIME) && (synpred5_FTS()))
                {
                    s = 236;
                }
                else if ((LA17_225 == URI) && (synpred5_FTS()))
                {
                    s = 237;
                }
                else if ((LA17_225 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_225 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_225 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_225 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_225 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_225 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_225 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_225 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_225 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_225 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_225 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_225 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_225 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_225 == COMMA || LA17_225 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_225 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_225 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_225 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_225 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_225 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_225);
                if (s >= 0)
                    return s;
                break;

            case 70:
                int LA17_200 = input.LA(1);

                int index17_200 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_200 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_200 == COMMA || LA17_200 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_200 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_200 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_200 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_200 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_200 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_200 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_200 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_200 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_200 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_200 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_200 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_200 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_200 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_200 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_200 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_200 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_200 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_200 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_200 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_200 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_200 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_200 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_200 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_200 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_200 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_200 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_200 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_200 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_200 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_200 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_200);
                if (s >= 0)
                    return s;
                break;

            case 71:
                int LA17_159 = input.LA(1);

                int index17_159 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_159 == ID))
                {
                    s = 186;
                }
                else if ((LA17_159 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 187;
                }
                else if ((LA17_159 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 188;
                }
                else if ((LA17_159 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 189;
                }
                else if ((LA17_159 == NOT) && (synpred5_FTS()))
                {
                    s = 190;
                }
                else if ((LA17_159 == TO) && (synpred5_FTS()))
                {
                    s = 191;
                }
                else if ((LA17_159 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 192;
                }
                else if ((LA17_159 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 193;
                }
                else if ((LA17_159 == STAR) && (synpred5_FTS()))
                {
                    s = 194;
                }
                else if ((LA17_159 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 195;
                }
                else if ((LA17_159 == DATETIME) && (synpred5_FTS()))
                {
                    s = 196;
                }
                else if ((LA17_159 == URI) && (synpred5_FTS()))
                {
                    s = 197;
                }
                else if ((LA17_159 == TILDA) && (synpred5_FTS()))
                {
                    s = 162;
                }
                else if ((LA17_159 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_159 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_159 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_159 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_159 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_159 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_159 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_159 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_159 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_159 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_159 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_159 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_159 == COMMA || LA17_159 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_159 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_159 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_159 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_159 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_159 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_159);
                if (s >= 0)
                    return s;
                break;

            case 72:
                int LA17_26 = input.LA(1);

                int index17_26 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_26 == LPAREN) && (synpred4_FTS()))
                {
                    s = 100;
                }
                else if ((LA17_26 == ID))
                {
                    s = 101;
                }
                else if ((LA17_26 == TO))
                {
                    s = 102;
                }
                else if ((LA17_26 == OR))
                {
                    s = 103;
                }
                else if ((LA17_26 == AND))
                {
                    s = 104;
                }
                else if ((LA17_26 == NOT))
                {
                    s = 105;
                }
                else if ((LA17_26 == FTSWORD))
                {
                    s = 106;
                }
                else if ((LA17_26 == FTSPRE))
                {
                    s = 107;
                }
                else if ((LA17_26 == FTSWILD))
                {
                    s = 108;
                }
                else if ((LA17_26 == FTSPHRASE))
                {
                    s = 109;
                }
                else if ((LA17_26 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 110;
                }
                else if ((LA17_26 == FLOATING_POINT_LITERAL))
                {
                    s = 111;
                }
                else if ((LA17_26 == DATETIME))
                {
                    s = 112;
                }
                else if ((LA17_26 == STAR))
                {
                    s = 113;
                }
                else if ((LA17_26 == URI))
                {
                    s = 114;
                }
                else if ((LA17_26 == LSQUARE) && (synpred3_FTS()))
                {
                    s = 16;
                }
                else if ((LA17_26 == LT) && (synpred3_FTS()))
                {
                    s = 17;
                }
                else if ((LA17_26 == COMMA || LA17_26 == DOT) && (synpred5_FTS()))
                {
                    s = 115;
                }
                else if ((LA17_26 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 116;
                }

                input.seek(index17_26);
                if (s >= 0)
                    return s;
                break;

            case 73:
                int LA17_199 = input.LA(1);

                int index17_199 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_199 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_199 == COMMA || LA17_199 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_199 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_199 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_199 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_199 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_199 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_199 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_199 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_199 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_199 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_199 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_199 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_199 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_199 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_199 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_199 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_199 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_199 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_199 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_199 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_199 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_199 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_199 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_199 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_199 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_199 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_199 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_199 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_199 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_199 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_199 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_199);
                if (s >= 0)
                    return s;
                break;

            case 74:
                int LA17_89 = input.LA(1);

                int index17_89 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_89);
                if (s >= 0)
                    return s;
                break;

            case 75:
                int LA17_224 = input.LA(1);

                int index17_224 = input.index();
                input.rewind();
                s = -1;
                if ((synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((synpred5_FTS()))
                {
                    s = 218;
                }

                input.seek(index17_224);
                if (s >= 0)
                    return s;
                break;

            case 76:
                int LA17_201 = input.LA(1);

                int index17_201 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_201 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_201 == COMMA || LA17_201 == DOT) && (synpred5_FTS()))
                {
                    s = 216;
                }
                else if ((LA17_201 == TILDA) && (synpred5_FTS()))
                {
                    s = 217;
                }
                else if ((LA17_201 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_201 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_201 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_201 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_201 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_201 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_201 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_201 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_201 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_201 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_201 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_201 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_201 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_201 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_201 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_201 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_201 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_201 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_201 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_201 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_201 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_201 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_201 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_201 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_201 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_201 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_201 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_201 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_201 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_201);
                if (s >= 0)
                    return s;
                break;

            case 77:
                int LA17_202 = input.LA(1);

                int index17_202 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_202 == DOTDOT) && (synpred3_FTS()))
                {
                    s = 27;
                }
                else if ((LA17_202 == TILDA) && (synpred5_FTS()))
                {
                    s = 218;
                }
                else if ((LA17_202 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_202 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_202 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_202 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_202 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_202 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_202 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_202 == NOT) && (synpred5_FTS()))
                {
                    s = 37;
                }
                else if ((LA17_202 == ID) && (synpred5_FTS()))
                {
                    s = 38;
                }
                else if ((LA17_202 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 39;
                }
                else if ((LA17_202 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 40;
                }
                else if ((LA17_202 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 41;
                }
                else if ((LA17_202 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_202 == TO) && (synpred5_FTS()))
                {
                    s = 43;
                }
                else if ((LA17_202 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 44;
                }
                else if ((LA17_202 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 45;
                }
                else if ((LA17_202 == DATETIME) && (synpred5_FTS()))
                {
                    s = 46;
                }
                else if ((LA17_202 == STAR) && (synpred5_FTS()))
                {
                    s = 68;
                }
                else if ((LA17_202 == URI) && (synpred5_FTS()))
                {
                    s = 47;
                }
                else if ((LA17_202 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_202 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_202 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_202 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_202 == COMMA || LA17_202 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_202 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_202 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_202 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_202 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_202 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_202 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_202);
                if (s >= 0)
                    return s;
                break;

            case 78:
                int LA17_117 = input.LA(1);

                int index17_117 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_117 == ID))
                {
                    s = 169;
                }
                else if ((LA17_117 == FTSWORD) && (synpred5_FTS()))
                {
                    s = 71;
                }
                else if ((LA17_117 == FTSPRE) && (synpred5_FTS()))
                {
                    s = 72;
                }
                else if ((LA17_117 == FTSWILD) && (synpred5_FTS()))
                {
                    s = 73;
                }
                else if ((LA17_117 == NOT) && (synpred5_FTS()))
                {
                    s = 74;
                }
                else if ((LA17_117 == TO) && (synpred5_FTS()))
                {
                    s = 75;
                }
                else if ((LA17_117 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
                {
                    s = 76;
                }
                else if ((LA17_117 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
                {
                    s = 77;
                }
                else if ((LA17_117 == STAR) && (synpred5_FTS()))
                {
                    s = 78;
                }
                else if ((LA17_117 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 79;
                }
                else if ((LA17_117 == DATETIME) && (synpred5_FTS()))
                {
                    s = 80;
                }
                else if ((LA17_117 == URI) && (synpred5_FTS()))
                {
                    s = 81;
                }
                else if ((LA17_117 == TILDA) && (synpred5_FTS()))
                {
                    s = 29;
                }
                else if ((LA17_117 == CARAT) && (synpred5_FTS()))
                {
                    s = 30;
                }
                else if ((LA17_117 == AND) && (synpred5_FTS()))
                {
                    s = 31;
                }
                else if ((LA17_117 == AMP) && (synpred5_FTS()))
                {
                    s = 32;
                }
                else if ((LA17_117 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_117 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_117 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_117 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_117 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_117 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_117 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_117 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_117 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_117 == COMMA || LA17_117 == DOT) && (synpred5_FTS()))
                {
                    s = 69;
                }
                else if ((LA17_117 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_117 == LPAREN) && (synpred5_FTS()))
                {
                    s = 54;
                }
                else if ((LA17_117 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_117 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_117 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_117);
                if (s >= 0)
                    return s;
                break;

            case 79:
                int LA17_25 = input.LA(1);

                int index17_25 = input.index();
                input.rewind();
                s = -1;
                if ((LA17_25 == LPAREN))
                {
                    s = 82;
                }
                else if ((LA17_25 == ID))
                {
                    s = 83;
                }
                else if ((LA17_25 == FTSWORD))
                {
                    s = 84;
                }
                else if ((LA17_25 == FTSPRE))
                {
                    s = 85;
                }
                else if ((LA17_25 == FTSWILD))
                {
                    s = 86;
                }
                else if ((LA17_25 == NOT))
                {
                    s = 87;
                }
                else if ((LA17_25 == TO))
                {
                    s = 88;
                }
                else if ((LA17_25 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 89;
                }
                else if ((LA17_25 == FLOATING_POINT_LITERAL))
                {
                    s = 90;
                }
                else if ((LA17_25 == DATETIME))
                {
                    s = 91;
                }
                else if ((LA17_25 == STAR))
                {
                    s = 92;
                }
                else if ((LA17_25 == URI))
                {
                    s = 93;
                }
                else if ((LA17_25 == DOTDOT) && (synpred5_FTS()))
                {
                    s = 94;
                }
                else if ((LA17_25 == COMMA || LA17_25 == DOT) && (synpred5_FTS()))
                {
                    s = 95;
                }
                else if ((LA17_25 == TILDA) && (synpred5_FTS()))
                {
                    s = 96;
                }
                else if ((LA17_25 == CARAT) && (synpred5_FTS()))
                {
                    s = 97;
                }
                else if ((LA17_25 == AND) && (synpred5_FTS()))
                {
                    s = 98;
                }
                else if ((LA17_25 == AMP) && (synpred5_FTS()))
                {
                    s = 99;
                }
                else if ((LA17_25 == EOF) && (synpred5_FTS()))
                {
                    s = 33;
                }
                else if ((LA17_25 == RPAREN) && (synpred5_FTS()))
                {
                    s = 34;
                }
                else if ((LA17_25 == OR) && (synpred5_FTS()))
                {
                    s = 35;
                }
                else if ((LA17_25 == BAR) && (synpred5_FTS()))
                {
                    s = 36;
                }
                else if ((LA17_25 == EXCLAMATION) && (synpred5_FTS()))
                {
                    s = 42;
                }
                else if ((LA17_25 == AT) && (synpred5_FTS()))
                {
                    s = 48;
                }
                else if ((LA17_25 == FTSPHRASE) && (synpred5_FTS()))
                {
                    s = 49;
                }
                else if ((LA17_25 == LSQUARE) && (synpred5_FTS()))
                {
                    s = 50;
                }
                else if ((LA17_25 == LT) && (synpred5_FTS()))
                {
                    s = 51;
                }
                else if ((LA17_25 == QUESTION_MARK) && (synpred5_FTS()))
                {
                    s = 52;
                }
                else if ((LA17_25 == EQUALS) && (synpred5_FTS()))
                {
                    s = 53;
                }
                else if ((LA17_25 == PERCENT) && (synpred5_FTS()))
                {
                    s = 55;
                }
                else if ((LA17_25 == PLUS) && (synpred5_FTS()))
                {
                    s = 56;
                }
                else if ((LA17_25 == MINUS) && (synpred5_FTS()))
                {
                    s = 57;
                }

                input.seek(index17_25);
                if (s >= 0)
                    return s;
                break;

            case 80:
                int LA17_87 = input.LA(1);

                int index17_87 = input.index();
                input.rewind();
                s = -1;
                if ((synpred2_FTS()))
                {
                    s = 126;
                }
                else if ((synpred5_FTS()))
                {
                    s = 153;
                }

                input.seek(index17_87);
                if (s >= 0)
                    return s;
                break;
            }
            if (state.backtracking > 0)
            {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }

        private int specialStateTransition0(int LA17_204)
        {
            int s = -1;
            if ((LA17_204 == DOTDOT) && (synpred3_FTS()))
            {
                s = 27;
            }
            else if ((LA17_204 == COMMA || LA17_204 == DOT) && (synpred5_FTS()))
            {
                s = 216;
            }
            else if ((LA17_204 == TILDA) && (synpred5_FTS()))
            {
                s = 217;
            }
            else if ((LA17_204 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_204 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_204 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_204 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_204 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_204 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_204 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_204 == NOT) && (synpred5_FTS()))
            {
                s = 37;
            }
            else if ((LA17_204 == ID) && (synpred5_FTS()))
            {
                s = 38;
            }
            else if ((LA17_204 == FTSWORD) && (synpred5_FTS()))
            {
                s = 39;
            }
            else if ((LA17_204 == FTSPRE) && (synpred5_FTS()))
            {
                s = 40;
            }
            else if ((LA17_204 == FTSWILD) && (synpred5_FTS()))
            {
                s = 41;
            }
            else if ((LA17_204 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_204 == TO) && (synpred5_FTS()))
            {
                s = 43;
            }
            else if ((LA17_204 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 44;
            }
            else if ((LA17_204 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 45;
            }
            else if ((LA17_204 == DATETIME) && (synpred5_FTS()))
            {
                s = 46;
            }
            else if ((LA17_204 == STAR) && (synpred5_FTS()))
            {
                s = 68;
            }
            else if ((LA17_204 == URI) && (synpred5_FTS()))
            {
                s = 47;
            }
            else if ((LA17_204 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_204 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_204 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_204 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_204 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 52;
            }
            else if ((LA17_204 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_204 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_204 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_204 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_204 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }

        private int specialStateTransition1(int LA17_203)
        {
            int s = -1;
            if ((LA17_203 == DOTDOT) && (synpred3_FTS()))
            {
                s = 27;
            }
            else if ((LA17_203 == COMMA || LA17_203 == DOT) && (synpred5_FTS()))
            {
                s = 216;
            }
            else if ((LA17_203 == TILDA) && (synpred5_FTS()))
            {
                s = 217;
            }
            else if ((LA17_203 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_203 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_203 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_203 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_203 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_203 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_203 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_203 == NOT) && (synpred5_FTS()))
            {
                s = 37;
            }
            else if ((LA17_203 == ID) && (synpred5_FTS()))
            {
                s = 38;
            }
            else if ((LA17_203 == FTSWORD) && (synpred5_FTS()))
            {
                s = 39;
            }
            else if ((LA17_203 == FTSPRE) && (synpred5_FTS()))
            {
                s = 40;
            }
            else if ((LA17_203 == FTSWILD) && (synpred5_FTS()))
            {
                s = 41;
            }
            else if ((LA17_203 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_203 == TO) && (synpred5_FTS()))
            {
                s = 43;
            }
            else if ((LA17_203 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 44;
            }
            else if ((LA17_203 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 45;
            }
            else if ((LA17_203 == DATETIME) && (synpred5_FTS()))
            {
                s = 46;
            }
            else if ((LA17_203 == STAR) && (synpred5_FTS()))
            {
                s = 68;
            }
            else if ((LA17_203 == URI) && (synpred5_FTS()))
            {
                s = 47;
            }
            else if ((LA17_203 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_203 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_203 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_203 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_203 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 52;
            }
            else if ((LA17_203 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_203 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_203 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_203 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_203 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }

        private int specialStateTransition2(int LA17_160)
        {
            int s = -1;
            if ((LA17_160 == LPAREN) && (synpred4_FTS()))
            {
                s = 100;
            }
            else if ((LA17_160 == ID))
            {
                s = 198;
            }
            else if ((LA17_160 == FTSWORD))
            {
                s = 199;
            }
            else if ((LA17_160 == FTSPRE))
            {
                s = 200;
            }
            else if ((LA17_160 == FTSWILD))
            {
                s = 201;
            }
            else if ((LA17_160 == FTSPHRASE))
            {
                s = 202;
            }
            else if ((LA17_160 == DECIMAL_INTEGER_LITERAL))
            {
                s = 203;
            }
            else if ((LA17_160 == FLOATING_POINT_LITERAL))
            {
                s = 204;
            }
            else if ((LA17_160 == DATETIME))
            {
                s = 205;
            }
            else if ((LA17_160 == STAR))
            {
                s = 206;
            }
            else if ((LA17_160 == URI))
            {
                s = 207;
            }
            else if ((LA17_160 == LSQUARE) && (synpred3_FTS()))
            {
                s = 16;
            }
            else if ((LA17_160 == LT) && (synpred3_FTS()))
            {
                s = 17;
            }
            else if ((LA17_160 == COMMA || LA17_160 == DOT) && (synpred5_FTS()))
            {
                s = 208;
            }
            else if ((LA17_160 == NOT) && (synpred5_FTS()))
            {
                s = 209;
            }
            else if ((LA17_160 == TO) && (synpred5_FTS()))
            {
                s = 210;
            }
            else if ((LA17_160 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 211;
            }
            return s;
        }

        private int specialStateTransition3(int LA17_6)
        {
            int s = -1;
            if ((LA17_6 == STAR))
            {
                s = 25;
            }
            else if ((LA17_6 == COLON))
            {
                s = 26;
            }
            else if ((LA17_6 == COMMA || LA17_6 == DOT) && (synpred5_FTS()))
            {
                s = 28;
            }
            else if ((LA17_6 == TILDA) && (synpred5_FTS()))
            {
                s = 29;
            }
            else if ((LA17_6 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_6 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_6 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_6 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_6 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_6 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_6 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_6 == NOT) && (synpred5_FTS()))
            {
                s = 37;
            }
            else if ((LA17_6 == ID) && (synpred5_FTS()))
            {
                s = 38;
            }
            else if ((LA17_6 == FTSWORD) && (synpred5_FTS()))
            {
                s = 39;
            }
            else if ((LA17_6 == FTSPRE) && (synpred5_FTS()))
            {
                s = 40;
            }
            else if ((LA17_6 == FTSWILD) && (synpred5_FTS()))
            {
                s = 41;
            }
            else if ((LA17_6 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_6 == TO) && (synpred5_FTS()))
            {
                s = 43;
            }
            else if ((LA17_6 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 44;
            }
            else if ((LA17_6 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 45;
            }
            else if ((LA17_6 == DATETIME) && (synpred5_FTS()))
            {
                s = 46;
            }
            else if ((LA17_6 == URI) && (synpred5_FTS()))
            {
                s = 47;
            }
            else if ((LA17_6 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_6 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_6 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_6 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_6 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 52;
            }
            else if ((LA17_6 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_6 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_6 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_6 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_6 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }

        private int specialStateTransition4(int LA17_166)
        {
            int s = -1;
            if ((LA17_166 == DOTDOT) && (synpred3_FTS()))
            {
                s = 27;
            }
            else if ((LA17_166 == COMMA || LA17_166 == DOT) && (synpred5_FTS()))
            {
                s = 161;
            }
            else if ((LA17_166 == TILDA) && (synpred5_FTS()))
            {
                s = 162;
            }
            else if ((LA17_166 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_166 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_166 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_166 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_166 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_166 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_166 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_166 == NOT) && (synpred5_FTS()))
            {
                s = 37;
            }
            else if ((LA17_166 == ID) && (synpred5_FTS()))
            {
                s = 38;
            }
            else if ((LA17_166 == FTSWORD) && (synpred5_FTS()))
            {
                s = 39;
            }
            else if ((LA17_166 == FTSPRE) && (synpred5_FTS()))
            {
                s = 40;
            }
            else if ((LA17_166 == FTSWILD) && (synpred5_FTS()))
            {
                s = 41;
            }
            else if ((LA17_166 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_166 == TO) && (synpred5_FTS()))
            {
                s = 43;
            }
            else if ((LA17_166 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 44;
            }
            else if ((LA17_166 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 45;
            }
            else if ((LA17_166 == DATETIME) && (synpred5_FTS()))
            {
                s = 46;
            }
            else if ((LA17_166 == STAR) && (synpred5_FTS()))
            {
                s = 68;
            }
            else if ((LA17_166 == URI) && (synpred5_FTS()))
            {
                s = 47;
            }
            else if ((LA17_166 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_166 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_166 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_166 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_166 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 52;
            }
            else if ((LA17_166 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_166 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_166 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_166 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_166 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }

        private int specialStateTransition5(int LA17_206)
        {
            int s = -1;
            if ((LA17_206 == DOTDOT) && (synpred3_FTS()))
            {
                s = 27;
            }
            else if ((LA17_206 == COMMA || LA17_206 == DOT) && (synpred5_FTS()))
            {
                s = 216;
            }
            else if ((LA17_206 == TILDA) && (synpred5_FTS()))
            {
                s = 217;
            }
            else if ((LA17_206 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_206 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_206 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_206 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_206 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_206 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_206 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_206 == NOT) && (synpred5_FTS()))
            {
                s = 37;
            }
            else if ((LA17_206 == ID) && (synpred5_FTS()))
            {
                s = 38;
            }
            else if ((LA17_206 == FTSWORD) && (synpred5_FTS()))
            {
                s = 39;
            }
            else if ((LA17_206 == FTSPRE) && (synpred5_FTS()))
            {
                s = 40;
            }
            else if ((LA17_206 == FTSWILD) && (synpred5_FTS()))
            {
                s = 41;
            }
            else if ((LA17_206 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_206 == TO) && (synpred5_FTS()))
            {
                s = 43;
            }
            else if ((LA17_206 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 44;
            }
            else if ((LA17_206 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 45;
            }
            else if ((LA17_206 == DATETIME) && (synpred5_FTS()))
            {
                s = 46;
            }
            else if ((LA17_206 == STAR) && (synpred5_FTS()))
            {
                s = 68;
            }
            else if ((LA17_206 == URI) && (synpred5_FTS()))
            {
                s = 47;
            }
            else if ((LA17_206 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_206 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_206 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_206 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_206 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 52;
            }
            else if ((LA17_206 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_206 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_206 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_206 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_206 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }

        private int specialStateTransition6(int LA17_165)
        {
            int s = -1;
            if ((LA17_165 == DOTDOT) && (synpred3_FTS()))
            {
                s = 27;
            }
            else if ((LA17_165 == COMMA || LA17_165 == DOT) && (synpred5_FTS()))
            {
                s = 161;
            }
            else if ((LA17_165 == TILDA) && (synpred5_FTS()))
            {
                s = 162;
            }
            else if ((LA17_165 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_165 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_165 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_165 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_165 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_165 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_165 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_165 == NOT) && (synpred5_FTS()))
            {
                s = 37;
            }
            else if ((LA17_165 == ID) && (synpred5_FTS()))
            {
                s = 38;
            }
            else if ((LA17_165 == FTSWORD) && (synpred5_FTS()))
            {
                s = 39;
            }
            else if ((LA17_165 == FTSPRE) && (synpred5_FTS()))
            {
                s = 40;
            }
            else if ((LA17_165 == FTSWILD) && (synpred5_FTS()))
            {
                s = 41;
            }
            else if ((LA17_165 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_165 == TO) && (synpred5_FTS()))
            {
                s = 43;
            }
            else if ((LA17_165 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 44;
            }
            else if ((LA17_165 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 45;
            }
            else if ((LA17_165 == DATETIME) && (synpred5_FTS()))
            {
                s = 46;
            }
            else if ((LA17_165 == STAR) && (synpred5_FTS()))
            {
                s = 68;
            }
            else if ((LA17_165 == URI) && (synpred5_FTS()))
            {
                s = 47;
            }
            else if ((LA17_165 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_165 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_165 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_165 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_165 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 52;
            }
            else if ((LA17_165 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_165 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_165 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_165 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_165 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }

        private int specialStateTransition7(int LA17_24)
        {
            int s = -1;
            if ((LA17_24 == ID))
            {
                s = 70;
            }
            else if ((LA17_24 == FTSWORD) && (synpred5_FTS()))
            {
                s = 71;
            }
            else if ((LA17_24 == FTSPRE) && (synpred5_FTS()))
            {
                s = 72;
            }
            else if ((LA17_24 == FTSWILD) && (synpred5_FTS()))
            {
                s = 73;
            }
            else if ((LA17_24 == NOT) && (synpred5_FTS()))
            {
                s = 74;
            }
            else if ((LA17_24 == TO) && (synpred5_FTS()))
            {
                s = 75;
            }
            else if ((LA17_24 == DECIMAL_INTEGER_LITERAL) && (synpred5_FTS()))
            {
                s = 76;
            }
            else if ((LA17_24 == FLOATING_POINT_LITERAL) && (synpred5_FTS()))
            {
                s = 77;
            }
            else if ((LA17_24 == STAR) && (synpred5_FTS()))
            {
                s = 78;
            }
            else if ((LA17_24 == QUESTION_MARK) && (synpred5_FTS()))
            {
                s = 79;
            }
            else if ((LA17_24 == DATETIME) && (synpred5_FTS()))
            {
                s = 80;
            }
            else if ((LA17_24 == URI) && (synpred5_FTS()))
            {
                s = 81;
            }
            else if ((LA17_24 == TILDA) && (synpred5_FTS()))
            {
                s = 29;
            }
            else if ((LA17_24 == CARAT) && (synpred5_FTS()))
            {
                s = 30;
            }
            else if ((LA17_24 == AND) && (synpred5_FTS()))
            {
                s = 31;
            }
            else if ((LA17_24 == AMP) && (synpred5_FTS()))
            {
                s = 32;
            }
            else if ((LA17_24 == EOF) && (synpred5_FTS()))
            {
                s = 33;
            }
            else if ((LA17_24 == RPAREN) && (synpred5_FTS()))
            {
                s = 34;
            }
            else if ((LA17_24 == OR) && (synpred5_FTS()))
            {
                s = 35;
            }
            else if ((LA17_24 == BAR) && (synpred5_FTS()))
            {
                s = 36;
            }
            else if ((LA17_24 == EXCLAMATION) && (synpred5_FTS()))
            {
                s = 42;
            }
            else if ((LA17_24 == AT) && (synpred5_FTS()))
            {
                s = 48;
            }
            else if ((LA17_24 == FTSPHRASE) && (synpred5_FTS()))
            {
                s = 49;
            }
            else if ((LA17_24 == LSQUARE) && (synpred5_FTS()))
            {
                s = 50;
            }
            else if ((LA17_24 == LT) && (synpred5_FTS()))
            {
                s = 51;
            }
            else if ((LA17_24 == COMMA || LA17_24 == DOT) && (synpred5_FTS()))
            {
                s = 69;
            }
            else if ((LA17_24 == EQUALS) && (synpred5_FTS()))
            {
                s = 53;
            }
            else if ((LA17_24 == LPAREN) && (synpred5_FTS()))
            {
                s = 54;
            }
            else if ((LA17_24 == PERCENT) && (synpred5_FTS()))
            {
                s = 55;
            }
            else if ((LA17_24 == PLUS) && (synpred5_FTS()))
            {
                s = 56;
            }
            else if ((LA17_24 == MINUS) && (synpred5_FTS()))
            {
                s = 57;
            }
            return s;
        }
    }

    static final String DFA30_eotS = "\u0089\uffff";
    static final String DFA30_eofS = "\2\uffff\2\11\2\uffff\1\11\7\uffff\1\11\1\uffff\5\11\2\uffff\2\61\2\uffff" +
            "\1\61\13\uffff\1\11\2\uffff\1\61\41\uffff\1\61\74\uffff";
    static final String DFA30_minS = "\2\5\2\4\2\12\1\4\1\5\2\uffff\3\12\1\uffff\1\4\1\5\5\4\1\77\1\0\2\4\2" +
            "\uffff\1\4\13\uffff\1\4\1\uffff\1\12\1\4\40\uffff\1\0\1\4\15\uffff\1\5" +
            "\10\uffff\1\0\1\15\13\0\1\5\2\uffff\13\0\1\5\12\0";
    static final String DFA30_maxS = "\4\150\2\12\1\150\1\146\2\uffff\1\25\2\12\1\uffff\7\150\1\77\1\0\2\150" +
            "\2\uffff\1\150\13\uffff\1\150\1\uffff\1\12\1\150\40\uffff\1\0\1\150\15" +
            "\uffff\1\150\10\uffff\1\0\1\150\13\0\1\146\2\uffff\13\0\1\146\12\0";
    static final String DFA30_acceptS = "\10\uffff\1\3\1\4\3\uffff\1\2\13\uffff\2\1\1\uffff\13\2\1\uffff\1\2\2" +
            "\uffff\1\1\37\2\2\uffff\15\2\1\uffff\10\2\16\uffff\2\2\26\uffff";
    static final String DFA30_specialS = "\1\uffff\1\21\15\uffff\1\11\1\27\1\43\1\41\1\45\1\56\1\uffff\1\50\1\46" +
            "\1\30\2\uffff\1\20\16\uffff\1\40\40\uffff\1\16\1\14\15\uffff\1\32\10\uffff" +
            "\1\26\1\uffff\1\5\1\31\1\53\1\4\1\51\1\6\1\57\1\12\1\23\1\24\1\35\3\uffff" +
            "\1\47\1\10\1\25\1\37\1\33\1\52\1\0\1\13\1\42\1\55\1\7\1\uffff\1\2\1\3" +
            "\1\15\1\36\1\44\1\17\1\34\1\54\1\1\1\22}>";
    static final String[] DFA30_transitionS = {
            "\1\5\1\1\4\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11\31\uffff" +
                    "\1\11\2\uffff\1\10\3\11\11\uffff\1\2\16\uffff\1\6\2\uffff\1\4\6\uffff" +
                    "\1\11\7\uffff\1\11\5\uffff\1\3\1\uffff\1\7",
            "\1\5\71\uffff\1\12\16\uffff\1\14\2\uffff\1\4\24\uffff\1\13\1\uffff\1" +
                    "\15",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\16" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\17",
            "\1\17",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\23\71\uffff\1\20\16\uffff\1\24\2\uffff\1\22\24\uffff\1\21",
            "",
            "",
            "\1\17\12\uffff\1\25",
            "\1\17",
            "\1\17",
            "",
            "\4\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1" +
                    "\11\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\26" +
                    "\3\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\32\5\uffff\1\35\1\uffff\1\45\1\uffff\1\41\5\uffff\1\35\31\uffff\1" +
                    "\42\2\uffff\1\34\1\37\1\40\1\36\11\uffff\1\27\16\uffff\1\33\2\uffff\1" +
                    "\31\6\uffff\1\44\7\uffff\1\43\5\uffff\1\30\1\uffff\1\46",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\47" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\51",
            "\1\uffff",
            "\1\60\1\57\1\101\1\64\1\uffff\1\56\1\53\1\54\1\uffff\1\76\1\uffff\1" +
                    "\74\5\uffff\1\52\2\uffff\1\106\2\uffff\1\72\23\uffff\1\75\2\uffff\1\102" +
                    "\1\70\1\71\1\67\11\uffff\1\66\3\uffff\1\107\1\103\1\104\2\uffff\1\112" +
                    "\5\uffff\1\65\2\uffff\1\63\1\110\1\uffff\1\111\3\uffff\1\105\2\uffff" +
                    "\1\62\4\uffff\1\77\4\uffff\1\55\1\73\1\uffff\1\100",
            "\1\60\1\57\1\101\1\64\1\uffff\1\56\1\53\1\54\1\uffff\1\76\1\uffff\1" +
                    "\74\5\uffff\1\54\2\uffff\1\106\2\uffff\1\72\23\uffff\1\75\2\uffff\1\102" +
                    "\1\70\1\71\1\67\11\uffff\1\66\3\uffff\1\107\1\103\1\104\2\uffff\1\112" +
                    "\5\uffff\1\65\2\uffff\1\63\1\110\1\uffff\1\111\3\uffff\1\105\2\uffff" +
                    "\1\62\4\uffff\1\77\4\uffff\1\55\1\73\1\uffff\1\100",
            "",
            "",
            "\1\60\1\57\1\101\1\64\1\uffff\1\56\1\53\1\54\1\uffff\1\76\1\uffff\1" +
                    "\74\5\uffff\1\54\2\uffff\1\106\2\uffff\1\72\23\uffff\1\75\2\uffff\1\102" +
                    "\1\70\1\71\1\67\11\uffff\1\66\3\uffff\1\107\1\103\1\104\2\uffff\1\112" +
                    "\5\uffff\1\65\2\uffff\1\63\1\110\1\uffff\1\111\3\uffff\1\105\2\uffff" +
                    "\1\62\4\uffff\1\77\4\uffff\1\55\1\73\1\uffff\1\100",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1" +
                    "\11\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\113" +
                    "\3\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "",
            "\1\17",
            "\1\60\1\57\1\101\1\64\1\uffff\1\56\1\uffff\1\130\1\uffff\1\126\1\uffff" +
                    "\1\122\5\uffff\1\130\2\uffff\1\106\2\uffff\1\72\23\uffff\1\123\2\uffff" +
                    "\1\102\1\116\1\117\1\115\11\uffff\1\114\3\uffff\1\107\1\103\1\104\2\uffff" +
                    "\1\112\5\uffff\1\120\2\uffff\1\63\1\110\1\uffff\1\111\3\uffff\1\125\2" +
                    "\uffff\1\62\4\uffff\1\124\4\uffff\1\55\1\121\1\uffff\1\127",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\137\1\136\1\101\1\64\1\uffff\1\135\1\132\1\133\1\uffff\1\76\1\uffff" +
                    "\1\74\5\uffff\1\131\1\141\1\uffff\1\106\2\uffff\1\72\23\uffff\1\75\2" +
                    "\uffff\1\102\1\70\1\71\1\67\11\uffff\1\66\3\uffff\1\107\1\103\1\104\2" +
                    "\uffff\1\112\5\uffff\1\65\2\uffff\1\63\1\110\1\uffff\1\111\3\uffff\1" +
                    "\105\2\uffff\1\62\4\uffff\1\140\4\uffff\1\134\1\73\1\uffff\1\100",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\162\5\uffff\1\144\1\uffff\1\157\1\uffff\1\153\5\uffff\1\144\31\uffff" +
                    "\1\154\2\uffff\1\143\1\147\1\150\1\146\11\uffff\1\145\3\uffff\1\142\1" +
                    "\103\1\104\10\uffff\1\151\2\uffff\1\161\6\uffff\1\156\7\uffff\1\155\5" +
                    "\uffff\1\152\1\uffff\1\160",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\175\1\uffff\1\171\37\uffff\1\172\3\uffff\1\165\1\166\1\164\11\uffff" +
                    "\1\163\16\uffff\1\167\11\uffff\1\174\7\uffff\1\173\5\uffff\1\170\1\uffff" +
                    "\1\176",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0082\71\uffff\1\177\16\uffff\1\u0083\2\uffff\1\u0081\24\uffff\1" +
                    "\u0080",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0087\71\uffff\1\u0084\16\uffff\1\u0088\2\uffff\1\u0086\24\uffff" +
                    "\1\u0085",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static
    {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++)
        {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    protected class DFA30 extends DFA
    {

        public DFA30(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }

        @Override
        public String getDescription()
        {
            return "512:1: ftsTermOrPhrase : ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException
        {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s)
            {
            case 0:
                int LA30_121 = input.LA(1);

                int index30_121 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_121);
                if (s >= 0)
                    return s;
                break;

            case 1:
                int LA30_135 = input.LA(1);

                int index30_135 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_135);
                if (s >= 0)
                    return s;
                break;

            case 2:
                int LA30_127 = input.LA(1);

                int index30_127 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_127);
                if (s >= 0)
                    return s;
                break;

            case 3:
                int LA30_128 = input.LA(1);

                int index30_128 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_128);
                if (s >= 0)
                    return s;
                break;

            case 4:
                int LA30_104 = input.LA(1);

                int index30_104 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_104);
                if (s >= 0)
                    return s;
                break;

            case 5:
                int LA30_101 = input.LA(1);

                int index30_101 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_101);
                if (s >= 0)
                    return s;
                break;

            case 6:
                int LA30_106 = input.LA(1);

                int index30_106 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_106);
                if (s >= 0)
                    return s;
                break;

            case 7:
                int LA30_125 = input.LA(1);

                int index30_125 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_125);
                if (s >= 0)
                    return s;
                break;

            case 8:
                int LA30_116 = input.LA(1);

                int index30_116 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_116);
                if (s >= 0)
                    return s;
                break;

            case 9:
                int LA30_15 = input.LA(1);

                int index30_15 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_15 == ID))
                {
                    s = 23;
                }
                else if ((LA30_15 == TO))
                {
                    s = 24;
                }
                else if ((LA30_15 == OR) && (synpred8_FTS()))
                {
                    s = 25;
                }
                else if ((LA30_15 == AND) && (synpred8_FTS()))
                {
                    s = 26;
                }
                else if ((LA30_15 == NOT))
                {
                    s = 27;
                }
                else if ((LA30_15 == FTSPHRASE) && (synpred11_FTS()))
                {
                    s = 28;
                }
                else if ((LA30_15 == COMMA || LA30_15 == DOT) && (synpred11_FTS()))
                {
                    s = 29;
                }
                else if ((LA30_15 == FTSWORD) && (synpred11_FTS()))
                {
                    s = 30;
                }
                else if ((LA30_15 == FTSPRE) && (synpred11_FTS()))
                {
                    s = 31;
                }
                else if ((LA30_15 == FTSWILD) && (synpred11_FTS()))
                {
                    s = 32;
                }
                else if ((LA30_15 == DECIMAL_INTEGER_LITERAL) && (synpred11_FTS()))
                {
                    s = 33;
                }
                else if ((LA30_15 == FLOATING_POINT_LITERAL) && (synpred11_FTS()))
                {
                    s = 34;
                }
                else if ((LA30_15 == STAR) && (synpred11_FTS()))
                {
                    s = 35;
                }
                else if ((LA30_15 == QUESTION_MARK) && (synpred11_FTS()))
                {
                    s = 36;
                }
                else if ((LA30_15 == DATETIME) && (synpred11_FTS()))
                {
                    s = 37;
                }
                else if ((LA30_15 == URI) && (synpred11_FTS()))
                {
                    s = 38;
                }

                input.seek(index30_15);
                if (s >= 0)
                    return s;
                break;

            case 10:
                int LA30_108 = input.LA(1);

                int index30_108 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_108);
                if (s >= 0)
                    return s;
                break;

            case 11:
                int LA30_122 = input.LA(1);

                int index30_122 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_122);
                if (s >= 0)
                    return s;
                break;

            case 12:
                int LA30_76 = input.LA(1);

                int index30_76 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_76 == DOT) && (synpred11_FTS()))
                {
                    s = 89;
                }
                else if ((LA30_76 == COLON))
                {
                    s = 90;
                }
                else if ((LA30_76 == COMMA) && (synpred11_FTS()))
                {
                    s = 91;
                }
                else if ((LA30_76 == TILDA) && (synpred11_FTS()))
                {
                    s = 92;
                }
                else if ((LA30_76 == CARAT) && (synpred11_FTS()))
                {
                    s = 93;
                }
                else if ((LA30_76 == AND) && (synpred11_FTS()))
                {
                    s = 94;
                }
                else if ((LA30_76 == AMP) && (synpred11_FTS()))
                {
                    s = 95;
                }
                else if ((LA30_76 == EOF) && (synpred11_FTS()))
                {
                    s = 49;
                }
                else if ((LA30_76 == RPAREN) && (synpred11_FTS()))
                {
                    s = 50;
                }
                else if ((LA30_76 == OR) && (synpred11_FTS()))
                {
                    s = 51;
                }
                else if ((LA30_76 == BAR) && (synpred11_FTS()))
                {
                    s = 52;
                }
                else if ((LA30_76 == NOT) && (synpred11_FTS()))
                {
                    s = 53;
                }
                else if ((LA30_76 == ID) && (synpred11_FTS()))
                {
                    s = 54;
                }
                else if ((LA30_76 == FTSWORD) && (synpred11_FTS()))
                {
                    s = 55;
                }
                else if ((LA30_76 == FTSPRE) && (synpred11_FTS()))
                {
                    s = 56;
                }
                else if ((LA30_76 == FTSWILD) && (synpred11_FTS()))
                {
                    s = 57;
                }
                else if ((LA30_76 == EXCLAMATION) && (synpred11_FTS()))
                {
                    s = 58;
                }
                else if ((LA30_76 == TO) && (synpred11_FTS()))
                {
                    s = 59;
                }
                else if ((LA30_76 == DECIMAL_INTEGER_LITERAL) && (synpred11_FTS()))
                {
                    s = 60;
                }
                else if ((LA30_76 == FLOATING_POINT_LITERAL) && (synpred11_FTS()))
                {
                    s = 61;
                }
                else if ((LA30_76 == DATETIME) && (synpred11_FTS()))
                {
                    s = 62;
                }
                else if ((LA30_76 == STAR) && (synpred11_FTS()))
                {
                    s = 96;
                }
                else if ((LA30_76 == URI) && (synpred11_FTS()))
                {
                    s = 64;
                }
                else if ((LA30_76 == AT) && (synpred11_FTS()))
                {
                    s = 65;
                }
                else if ((LA30_76 == FTSPHRASE) && (synpred11_FTS()))
                {
                    s = 66;
                }
                else if ((LA30_76 == LSQUARE) && (synpred11_FTS()))
                {
                    s = 67;
                }
                else if ((LA30_76 == LT) && (synpred11_FTS()))
                {
                    s = 68;
                }
                else if ((LA30_76 == QUESTION_MARK) && (synpred11_FTS()))
                {
                    s = 69;
                }
                else if ((LA30_76 == EQUALS) && (synpred11_FTS()))
                {
                    s = 70;
                }
                else if ((LA30_76 == LPAREN) && (synpred11_FTS()))
                {
                    s = 71;
                }
                else if ((LA30_76 == PERCENT) && (synpred11_FTS()))
                {
                    s = 72;
                }
                else if ((LA30_76 == PLUS) && (synpred11_FTS()))
                {
                    s = 73;
                }
                else if ((LA30_76 == MINUS) && (synpred11_FTS()))
                {
                    s = 74;
                }
                else if ((LA30_76 == DOTDOT) && (synpred11_FTS()))
                {
                    s = 97;
                }

                input.seek(index30_76);
                if (s >= 0)
                    return s;
                break;

            case 13:
                int LA30_129 = input.LA(1);

                int index30_129 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_129);
                if (s >= 0)
                    return s;
                break;

            case 14:
                int LA30_75 = input.LA(1);

                int index30_75 = input.index();
                input.rewind();
                s = -1;
                if ((synpred11_FTS()))
                {
                    s = 88;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index30_75);
                if (s >= 0)
                    return s;
                break;

            case 15:
                int LA30_132 = input.LA(1);

                int index30_132 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_132);
                if (s >= 0)
                    return s;
                break;

            case 16:
                int LA30_27 = input.LA(1);

                int index30_27 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_27 == COLON) && (synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((LA30_27 == COMMA || LA30_27 == DOT) && (synpred11_FTS()))
                {
                    s = 44;
                }
                else if ((LA30_27 == TILDA) && (synpred11_FTS()))
                {
                    s = 45;
                }
                else if ((LA30_27 == CARAT) && (synpred11_FTS()))
                {
                    s = 46;
                }
                else if ((LA30_27 == AND) && (synpred11_FTS()))
                {
                    s = 47;
                }
                else if ((LA30_27 == AMP) && (synpred11_FTS()))
                {
                    s = 48;
                }
                else if ((LA30_27 == EOF) && (synpred11_FTS()))
                {
                    s = 49;
                }
                else if ((LA30_27 == RPAREN) && (synpred11_FTS()))
                {
                    s = 50;
                }
                else if ((LA30_27 == OR) && (synpred11_FTS()))
                {
                    s = 51;
                }
                else if ((LA30_27 == BAR) && (synpred11_FTS()))
                {
                    s = 52;
                }
                else if ((LA30_27 == NOT) && (synpred11_FTS()))
                {
                    s = 53;
                }
                else if ((LA30_27 == ID) && (synpred11_FTS()))
                {
                    s = 54;
                }
                else if ((LA30_27 == FTSWORD) && (synpred11_FTS()))
                {
                    s = 55;
                }
                else if ((LA30_27 == FTSPRE) && (synpred11_FTS()))
                {
                    s = 56;
                }
                else if ((LA30_27 == FTSWILD) && (synpred11_FTS()))
                {
                    s = 57;
                }
                else if ((LA30_27 == EXCLAMATION) && (synpred11_FTS()))
                {
                    s = 58;
                }
                else if ((LA30_27 == TO) && (synpred11_FTS()))
                {
                    s = 59;
                }
                else if ((LA30_27 == DECIMAL_INTEGER_LITERAL) && (synpred11_FTS()))
                {
                    s = 60;
                }
                else if ((LA30_27 == FLOATING_POINT_LITERAL) && (synpred11_FTS()))
                {
                    s = 61;
                }
                else if ((LA30_27 == DATETIME) && (synpred11_FTS()))
                {
                    s = 62;
                }
                else if ((LA30_27 == STAR) && (synpred11_FTS()))
                {
                    s = 63;
                }
                else if ((LA30_27 == URI) && (synpred11_FTS()))
                {
                    s = 64;
                }
                else if ((LA30_27 == AT) && (synpred11_FTS()))
                {
                    s = 65;
                }
                else if ((LA30_27 == FTSPHRASE) && (synpred11_FTS()))
                {
                    s = 66;
                }
                else if ((LA30_27 == LSQUARE) && (synpred11_FTS()))
                {
                    s = 67;
                }
                else if ((LA30_27 == LT) && (synpred11_FTS()))
                {
                    s = 68;
                }
                else if ((LA30_27 == QUESTION_MARK) && (synpred11_FTS()))
                {
                    s = 69;
                }
                else if ((LA30_27 == EQUALS) && (synpred11_FTS()))
                {
                    s = 70;
                }
                else if ((LA30_27 == LPAREN) && (synpred11_FTS()))
                {
                    s = 71;
                }
                else if ((LA30_27 == PERCENT) && (synpred11_FTS()))
                {
                    s = 72;
                }
                else if ((LA30_27 == PLUS) && (synpred11_FTS()))
                {
                    s = 73;
                }
                else if ((LA30_27 == MINUS) && (synpred11_FTS()))
                {
                    s = 74;
                }

                input.seek(index30_27);
                if (s >= 0)
                    return s;
                break;

            case 17:
                int LA30_1 = input.LA(1);

                int index30_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_1 == ID))
                {
                    s = 10;
                }
                else if ((LA30_1 == TO))
                {
                    s = 11;
                }
                else if ((LA30_1 == OR))
                {
                    s = 4;
                }
                else if ((LA30_1 == AND))
                {
                    s = 5;
                }
                else if ((LA30_1 == NOT))
                {
                    s = 12;
                }
                else if ((LA30_1 == URI) && (synpred11_FTS()))
                {
                    s = 13;
                }

                input.seek(index30_1);
                if (s >= 0)
                    return s;
                break;

            case 18:
                int LA30_136 = input.LA(1);

                int index30_136 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_136);
                if (s >= 0)
                    return s;
                break;

            case 19:
                int LA30_109 = input.LA(1);

                int index30_109 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_109);
                if (s >= 0)
                    return s;
                break;

            case 20:
                int LA30_110 = input.LA(1);

                int index30_110 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_110);
                if (s >= 0)
                    return s;
                break;

            case 21:
                int LA30_117 = input.LA(1);

                int index30_117 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_117);
                if (s >= 0)
                    return s;
                break;

            case 22:
                int LA30_99 = input.LA(1);

                int index30_99 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_99);
                if (s >= 0)
                    return s;
                break;

            case 23:
                int LA30_16 = input.LA(1);

                int index30_16 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_16 == DOT))
                {
                    s = 39;
                }
                else if ((LA30_16 == COLON) && (synpred11_FTS()))
                {
                    s = 40;
                }
                else if ((LA30_16 == EOF || (LA30_16 >= AMP && LA30_16 <= BAR) || LA30_16 == CARAT || LA30_16 == COMMA || LA30_16 == DATETIME || LA30_16 == DECIMAL_INTEGER_LITERAL || LA30_16 == EQUALS || LA30_16 == EXCLAMATION || LA30_16 == FLOATING_POINT_LITERAL || (LA30_16 >= FTSPHRASE && LA30_16 <= FTSWORD) || LA30_16 == ID || (LA30_16 >= LPAREN && LA30_16 <= LT) || LA30_16 == MINUS || LA30_16 == NOT || (LA30_16 >= OR && LA30_16 <= PERCENT) || LA30_16 == PLUS || LA30_16 == QUESTION_MARK || LA30_16 == RPAREN || LA30_16 == STAR || (LA30_16 >= TILDA && LA30_16 <= TO) || LA30_16 == URI))
                {
                    s = 9;
                }

                input.seek(index30_16);
                if (s >= 0)
                    return s;
                break;

            case 24:
                int LA30_24 = input.LA(1);

                int index30_24 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_24 == COLON) && (synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((LA30_24 == COMMA || LA30_24 == DOT) && (synpred11_FTS()))
                {
                    s = 44;
                }
                else if ((LA30_24 == TILDA) && (synpred11_FTS()))
                {
                    s = 45;
                }
                else if ((LA30_24 == CARAT) && (synpred11_FTS()))
                {
                    s = 46;
                }
                else if ((LA30_24 == AND) && (synpred11_FTS()))
                {
                    s = 47;
                }
                else if ((LA30_24 == AMP) && (synpred11_FTS()))
                {
                    s = 48;
                }
                else if ((LA30_24 == EOF) && (synpred11_FTS()))
                {
                    s = 49;
                }
                else if ((LA30_24 == RPAREN) && (synpred11_FTS()))
                {
                    s = 50;
                }
                else if ((LA30_24 == OR) && (synpred11_FTS()))
                {
                    s = 51;
                }
                else if ((LA30_24 == BAR) && (synpred11_FTS()))
                {
                    s = 52;
                }
                else if ((LA30_24 == NOT) && (synpred11_FTS()))
                {
                    s = 53;
                }
                else if ((LA30_24 == ID) && (synpred11_FTS()))
                {
                    s = 54;
                }
                else if ((LA30_24 == FTSWORD) && (synpred11_FTS()))
                {
                    s = 55;
                }
                else if ((LA30_24 == FTSPRE) && (synpred11_FTS()))
                {
                    s = 56;
                }
                else if ((LA30_24 == FTSWILD) && (synpred11_FTS()))
                {
                    s = 57;
                }
                else if ((LA30_24 == EXCLAMATION) && (synpred11_FTS()))
                {
                    s = 58;
                }
                else if ((LA30_24 == TO) && (synpred11_FTS()))
                {
                    s = 59;
                }
                else if ((LA30_24 == DECIMAL_INTEGER_LITERAL) && (synpred11_FTS()))
                {
                    s = 60;
                }
                else if ((LA30_24 == FLOATING_POINT_LITERAL) && (synpred11_FTS()))
                {
                    s = 61;
                }
                else if ((LA30_24 == DATETIME) && (synpred11_FTS()))
                {
                    s = 62;
                }
                else if ((LA30_24 == STAR) && (synpred11_FTS()))
                {
                    s = 63;
                }
                else if ((LA30_24 == URI) && (synpred11_FTS()))
                {
                    s = 64;
                }
                else if ((LA30_24 == AT) && (synpred11_FTS()))
                {
                    s = 65;
                }
                else if ((LA30_24 == FTSPHRASE) && (synpred11_FTS()))
                {
                    s = 66;
                }
                else if ((LA30_24 == LSQUARE) && (synpred11_FTS()))
                {
                    s = 67;
                }
                else if ((LA30_24 == LT) && (synpred11_FTS()))
                {
                    s = 68;
                }
                else if ((LA30_24 == QUESTION_MARK) && (synpred11_FTS()))
                {
                    s = 69;
                }
                else if ((LA30_24 == EQUALS) && (synpred11_FTS()))
                {
                    s = 70;
                }
                else if ((LA30_24 == LPAREN) && (synpred11_FTS()))
                {
                    s = 71;
                }
                else if ((LA30_24 == PERCENT) && (synpred11_FTS()))
                {
                    s = 72;
                }
                else if ((LA30_24 == PLUS) && (synpred11_FTS()))
                {
                    s = 73;
                }
                else if ((LA30_24 == MINUS) && (synpred11_FTS()))
                {
                    s = 74;
                }

                input.seek(index30_24);
                if (s >= 0)
                    return s;
                break;

            case 25:
                int LA30_102 = input.LA(1);

                int index30_102 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_102);
                if (s >= 0)
                    return s;
                break;

            case 26:
                int LA30_90 = input.LA(1);

                int index30_90 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_90 == LPAREN) && (synpred11_FTS()))
                {
                    s = 98;
                }
                else if ((LA30_90 == FTSPHRASE))
                {
                    s = 99;
                }
                else if ((LA30_90 == COMMA || LA30_90 == DOT))
                {
                    s = 100;
                }
                else if ((LA30_90 == ID))
                {
                    s = 101;
                }
                else if ((LA30_90 == FTSWORD))
                {
                    s = 102;
                }
                else if ((LA30_90 == FTSPRE))
                {
                    s = 103;
                }
                else if ((LA30_90 == FTSWILD))
                {
                    s = 104;
                }
                else if ((LA30_90 == NOT))
                {
                    s = 105;
                }
                else if ((LA30_90 == TO))
                {
                    s = 106;
                }
                else if ((LA30_90 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 107;
                }
                else if ((LA30_90 == FLOATING_POINT_LITERAL))
                {
                    s = 108;
                }
                else if ((LA30_90 == STAR))
                {
                    s = 109;
                }
                else if ((LA30_90 == QUESTION_MARK))
                {
                    s = 110;
                }
                else if ((LA30_90 == DATETIME))
                {
                    s = 111;
                }
                else if ((LA30_90 == URI))
                {
                    s = 112;
                }
                else if ((LA30_90 == OR) && (synpred11_FTS()))
                {
                    s = 113;
                }
                else if ((LA30_90 == AND) && (synpred11_FTS()))
                {
                    s = 114;
                }
                else if ((LA30_90 == LSQUARE) && (synpred11_FTS()))
                {
                    s = 67;
                }
                else if ((LA30_90 == LT) && (synpred11_FTS()))
                {
                    s = 68;
                }

                input.seek(index30_90);
                if (s >= 0)
                    return s;
                break;

            case 27:
                int LA30_119 = input.LA(1);

                int index30_119 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_119);
                if (s >= 0)
                    return s;
                break;

            case 28:
                int LA30_133 = input.LA(1);

                int index30_133 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_133);
                if (s >= 0)
                    return s;
                break;

            case 29:
                int LA30_111 = input.LA(1);

                int index30_111 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_111);
                if (s >= 0)
                    return s;
                break;

            case 30:
                int LA30_130 = input.LA(1);

                int index30_130 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_130);
                if (s >= 0)
                    return s;
                break;

            case 31:
                int LA30_118 = input.LA(1);

                int index30_118 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_118);
                if (s >= 0)
                    return s;
                break;

            case 32:
                int LA30_42 = input.LA(1);

                int index30_42 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_42 == ID))
                {
                    s = 76;
                }
                else if ((LA30_42 == FTSWORD) && (synpred11_FTS()))
                {
                    s = 77;
                }
                else if ((LA30_42 == FTSPRE) && (synpred11_FTS()))
                {
                    s = 78;
                }
                else if ((LA30_42 == FTSWILD) && (synpred11_FTS()))
                {
                    s = 79;
                }
                else if ((LA30_42 == NOT) && (synpred11_FTS()))
                {
                    s = 80;
                }
                else if ((LA30_42 == TO) && (synpred11_FTS()))
                {
                    s = 81;
                }
                else if ((LA30_42 == DECIMAL_INTEGER_LITERAL) && (synpred11_FTS()))
                {
                    s = 82;
                }
                else if ((LA30_42 == FLOATING_POINT_LITERAL) && (synpred11_FTS()))
                {
                    s = 83;
                }
                else if ((LA30_42 == STAR) && (synpred11_FTS()))
                {
                    s = 84;
                }
                else if ((LA30_42 == QUESTION_MARK) && (synpred11_FTS()))
                {
                    s = 85;
                }
                else if ((LA30_42 == DATETIME) && (synpred11_FTS()))
                {
                    s = 86;
                }
                else if ((LA30_42 == URI) && (synpred11_FTS()))
                {
                    s = 87;
                }
                else if ((LA30_42 == TILDA) && (synpred11_FTS()))
                {
                    s = 45;
                }
                else if ((LA30_42 == CARAT) && (synpred11_FTS()))
                {
                    s = 46;
                }
                else if ((LA30_42 == AND) && (synpred11_FTS()))
                {
                    s = 47;
                }
                else if ((LA30_42 == AMP) && (synpred11_FTS()))
                {
                    s = 48;
                }
                else if ((LA30_42 == EOF) && (synpred11_FTS()))
                {
                    s = 49;
                }
                else if ((LA30_42 == RPAREN) && (synpred11_FTS()))
                {
                    s = 50;
                }
                else if ((LA30_42 == OR) && (synpred11_FTS()))
                {
                    s = 51;
                }
                else if ((LA30_42 == BAR) && (synpred11_FTS()))
                {
                    s = 52;
                }
                else if ((LA30_42 == EXCLAMATION) && (synpred11_FTS()))
                {
                    s = 58;
                }
                else if ((LA30_42 == AT) && (synpred11_FTS()))
                {
                    s = 65;
                }
                else if ((LA30_42 == FTSPHRASE) && (synpred11_FTS()))
                {
                    s = 66;
                }
                else if ((LA30_42 == LSQUARE) && (synpred11_FTS()))
                {
                    s = 67;
                }
                else if ((LA30_42 == LT) && (synpred11_FTS()))
                {
                    s = 68;
                }
                else if ((LA30_42 == COMMA || LA30_42 == DOT) && (synpred11_FTS()))
                {
                    s = 88;
                }
                else if ((LA30_42 == EQUALS) && (synpred11_FTS()))
                {
                    s = 70;
                }
                else if ((LA30_42 == LPAREN) && (synpred11_FTS()))
                {
                    s = 71;
                }
                else if ((LA30_42 == PERCENT) && (synpred11_FTS()))
                {
                    s = 72;
                }
                else if ((LA30_42 == PLUS) && (synpred11_FTS()))
                {
                    s = 73;
                }
                else if ((LA30_42 == MINUS) && (synpred11_FTS()))
                {
                    s = 74;
                }

                input.seek(index30_42);
                if (s >= 0)
                    return s;
                break;

            case 33:
                int LA30_18 = input.LA(1);

                int index30_18 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_18 == COLON) && (synpred11_FTS()))
                {
                    s = 40;
                }
                else if ((LA30_18 == EOF || (LA30_18 >= AMP && LA30_18 <= BAR) || LA30_18 == CARAT || LA30_18 == COMMA || LA30_18 == DATETIME || LA30_18 == DECIMAL_INTEGER_LITERAL || LA30_18 == DOT || LA30_18 == EQUALS || LA30_18 == EXCLAMATION || LA30_18 == FLOATING_POINT_LITERAL || (LA30_18 >= FTSPHRASE && LA30_18 <= FTSWORD) || LA30_18 == ID || (LA30_18 >= LPAREN && LA30_18 <= LT) || LA30_18 == MINUS || LA30_18 == NOT || (LA30_18 >= OR && LA30_18 <= PERCENT) || LA30_18 == PLUS || LA30_18 == QUESTION_MARK || LA30_18 == RPAREN || LA30_18 == STAR || (LA30_18 >= TILDA && LA30_18 <= TO) || LA30_18 == URI))
                {
                    s = 9;
                }

                input.seek(index30_18);
                if (s >= 0)
                    return s;
                break;

            case 34:
                int LA30_123 = input.LA(1);

                int index30_123 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_123);
                if (s >= 0)
                    return s;
                break;

            case 35:
                int LA30_17 = input.LA(1);

                int index30_17 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_17 == COLON) && (synpred11_FTS()))
                {
                    s = 40;
                }
                else if ((LA30_17 == EOF || (LA30_17 >= AMP && LA30_17 <= BAR) || LA30_17 == CARAT || LA30_17 == COMMA || LA30_17 == DATETIME || LA30_17 == DECIMAL_INTEGER_LITERAL || LA30_17 == DOT || LA30_17 == EQUALS || LA30_17 == EXCLAMATION || LA30_17 == FLOATING_POINT_LITERAL || (LA30_17 >= FTSPHRASE && LA30_17 <= FTSWORD) || LA30_17 == ID || (LA30_17 >= LPAREN && LA30_17 <= LT) || LA30_17 == MINUS || LA30_17 == NOT || (LA30_17 >= OR && LA30_17 <= PERCENT) || LA30_17 == PLUS || LA30_17 == QUESTION_MARK || LA30_17 == RPAREN || LA30_17 == STAR || (LA30_17 >= TILDA && LA30_17 <= TO) || LA30_17 == URI))
                {
                    s = 9;
                }

                input.seek(index30_17);
                if (s >= 0)
                    return s;
                break;

            case 36:
                int LA30_131 = input.LA(1);

                int index30_131 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_131);
                if (s >= 0)
                    return s;
                break;

            case 37:
                int LA30_19 = input.LA(1);

                int index30_19 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_19 == COLON) && (synpred11_FTS()))
                {
                    s = 40;
                }
                else if ((LA30_19 == EOF || (LA30_19 >= AMP && LA30_19 <= BAR) || LA30_19 == CARAT || LA30_19 == COMMA || LA30_19 == DATETIME || LA30_19 == DECIMAL_INTEGER_LITERAL || LA30_19 == DOT || LA30_19 == EQUALS || LA30_19 == EXCLAMATION || LA30_19 == FLOATING_POINT_LITERAL || (LA30_19 >= FTSPHRASE && LA30_19 <= FTSWORD) || LA30_19 == ID || (LA30_19 >= LPAREN && LA30_19 <= LT) || LA30_19 == MINUS || LA30_19 == NOT || (LA30_19 >= OR && LA30_19 <= PERCENT) || LA30_19 == PLUS || LA30_19 == QUESTION_MARK || LA30_19 == RPAREN || LA30_19 == STAR || (LA30_19 >= TILDA && LA30_19 <= TO) || LA30_19 == URI))
                {
                    s = 9;
                }

                input.seek(index30_19);
                if (s >= 0)
                    return s;
                break;

            case 38:
                int LA30_23 = input.LA(1);

                int index30_23 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_23 == DOT))
                {
                    s = 42;
                }
                else if ((LA30_23 == COLON) && (synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((LA30_23 == COMMA) && (synpred11_FTS()))
                {
                    s = 44;
                }
                else if ((LA30_23 == TILDA) && (synpred11_FTS()))
                {
                    s = 45;
                }
                else if ((LA30_23 == CARAT) && (synpred11_FTS()))
                {
                    s = 46;
                }
                else if ((LA30_23 == AND) && (synpred11_FTS()))
                {
                    s = 47;
                }
                else if ((LA30_23 == AMP) && (synpred11_FTS()))
                {
                    s = 48;
                }
                else if ((LA30_23 == EOF) && (synpred11_FTS()))
                {
                    s = 49;
                }
                else if ((LA30_23 == RPAREN) && (synpred11_FTS()))
                {
                    s = 50;
                }
                else if ((LA30_23 == OR) && (synpred11_FTS()))
                {
                    s = 51;
                }
                else if ((LA30_23 == BAR) && (synpred11_FTS()))
                {
                    s = 52;
                }
                else if ((LA30_23 == NOT) && (synpred11_FTS()))
                {
                    s = 53;
                }
                else if ((LA30_23 == ID) && (synpred11_FTS()))
                {
                    s = 54;
                }
                else if ((LA30_23 == FTSWORD) && (synpred11_FTS()))
                {
                    s = 55;
                }
                else if ((LA30_23 == FTSPRE) && (synpred11_FTS()))
                {
                    s = 56;
                }
                else if ((LA30_23 == FTSWILD) && (synpred11_FTS()))
                {
                    s = 57;
                }
                else if ((LA30_23 == EXCLAMATION) && (synpred11_FTS()))
                {
                    s = 58;
                }
                else if ((LA30_23 == TO) && (synpred11_FTS()))
                {
                    s = 59;
                }
                else if ((LA30_23 == DECIMAL_INTEGER_LITERAL) && (synpred11_FTS()))
                {
                    s = 60;
                }
                else if ((LA30_23 == FLOATING_POINT_LITERAL) && (synpred11_FTS()))
                {
                    s = 61;
                }
                else if ((LA30_23 == DATETIME) && (synpred11_FTS()))
                {
                    s = 62;
                }
                else if ((LA30_23 == STAR) && (synpred11_FTS()))
                {
                    s = 63;
                }
                else if ((LA30_23 == URI) && (synpred11_FTS()))
                {
                    s = 64;
                }
                else if ((LA30_23 == AT) && (synpred11_FTS()))
                {
                    s = 65;
                }
                else if ((LA30_23 == FTSPHRASE) && (synpred11_FTS()))
                {
                    s = 66;
                }
                else if ((LA30_23 == LSQUARE) && (synpred11_FTS()))
                {
                    s = 67;
                }
                else if ((LA30_23 == LT) && (synpred11_FTS()))
                {
                    s = 68;
                }
                else if ((LA30_23 == QUESTION_MARK) && (synpred11_FTS()))
                {
                    s = 69;
                }
                else if ((LA30_23 == EQUALS) && (synpred11_FTS()))
                {
                    s = 70;
                }
                else if ((LA30_23 == LPAREN) && (synpred11_FTS()))
                {
                    s = 71;
                }
                else if ((LA30_23 == PERCENT) && (synpred11_FTS()))
                {
                    s = 72;
                }
                else if ((LA30_23 == PLUS) && (synpred11_FTS()))
                {
                    s = 73;
                }
                else if ((LA30_23 == MINUS) && (synpred11_FTS()))
                {
                    s = 74;
                }

                input.seek(index30_23);
                if (s >= 0)
                    return s;
                break;

            case 39:
                int LA30_115 = input.LA(1);

                int index30_115 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_115);
                if (s >= 0)
                    return s;
                break;

            case 40:
                int LA30_22 = input.LA(1);

                int index30_22 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 26;
                }
                else if ((synpred11_FTS()))
                {
                    s = 40;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index30_22);
                if (s >= 0)
                    return s;
                break;

            case 41:
                int LA30_105 = input.LA(1);

                int index30_105 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_105);
                if (s >= 0)
                    return s;
                break;

            case 42:
                int LA30_120 = input.LA(1);

                int index30_120 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_120);
                if (s >= 0)
                    return s;
                break;

            case 43:
                int LA30_103 = input.LA(1);

                int index30_103 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_103);
                if (s >= 0)
                    return s;
                break;

            case 44:
                int LA30_134 = input.LA(1);

                int index30_134 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_134);
                if (s >= 0)
                    return s;
                break;

            case 45:
                int LA30_124 = input.LA(1);

                int index30_124 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_124);
                if (s >= 0)
                    return s;
                break;

            case 46:
                int LA30_20 = input.LA(1);

                int index30_20 = input.index();
                input.rewind();
                s = -1;
                if ((LA30_20 == COLON) && (synpred11_FTS()))
                {
                    s = 40;
                }
                else if ((LA30_20 == EOF || (LA30_20 >= AMP && LA30_20 <= BAR) || LA30_20 == CARAT || LA30_20 == COMMA || LA30_20 == DATETIME || LA30_20 == DECIMAL_INTEGER_LITERAL || LA30_20 == DOT || LA30_20 == EQUALS || LA30_20 == EXCLAMATION || LA30_20 == FLOATING_POINT_LITERAL || (LA30_20 >= FTSPHRASE && LA30_20 <= FTSWORD) || LA30_20 == ID || (LA30_20 >= LPAREN && LA30_20 <= LT) || LA30_20 == MINUS || LA30_20 == NOT || (LA30_20 >= OR && LA30_20 <= PERCENT) || LA30_20 == PLUS || LA30_20 == QUESTION_MARK || LA30_20 == RPAREN || LA30_20 == STAR || (LA30_20 >= TILDA && LA30_20 <= TO) || LA30_20 == URI))
                {
                    s = 9;
                }

                input.seek(index30_20);
                if (s >= 0)
                    return s;
                break;

            case 47:
                int LA30_107 = input.LA(1);

                int index30_107 = input.index();
                input.rewind();
                s = -1;
                if ((synpred8_FTS()))
                {
                    s = 43;
                }
                else if ((synpred11_FTS()))
                {
                    s = 114;
                }

                input.seek(index30_107);
                if (s >= 0)
                    return s;
                break;
            }
            if (state.backtracking > 0)
            {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA39_eotS = "\u00e3\uffff";
    static final String DFA39_eofS = "\2\uffff\2\11\2\uffff\1\11\7\uffff\1\11\1\uffff\5\11\1\uffff\1\11\2\62" +
            "\2\uffff\1\62\13\uffff\1\11\3\uffff\1\62\40\uffff\1\11\20\uffff\1\62\u0085" +
            "\uffff";
    static final String DFA39_minS = "\2\5\2\4\2\12\1\4\1\5\2\uffff\3\12\1\uffff\1\4\1\5\5\4\1\77\3\4\2\uffff" +
            "\1\4\13\uffff\1\4\1\uffff\1\12\1\5\1\4\40\uffff\1\4\5\12\1\0\1\15\10\0" +
            "\1\5\1\4\14\uffff\1\5\1\uffff\1\13\13\0\1\5\5\0\1\uffff\1\5\7\uffff\15" +
            "\0\1\15\13\0\1\5\5\0\1\uffff\1\0\1\15\13\0\1\5\2\uffff\13\0\1\5\20\0\1" +
            "\5\17\0";
    static final String DFA39_maxS = "\4\150\2\12\1\150\1\146\2\uffff\1\25\2\12\1\uffff\7\150\1\77\3\150\2\uffff" +
            "\1\150\13\uffff\1\150\1\uffff\1\12\2\150\40\uffff\1\150\1\25\4\12\1\0" +
            "\1\150\10\0\1\146\1\150\14\uffff\1\150\1\uffff\1\150\13\0\1\146\5\0\1" +
            "\uffff\1\150\7\uffff\15\0\1\150\13\0\1\146\5\0\1\uffff\1\0\1\150\13\0" +
            "\1\146\2\uffff\13\0\1\146\20\0\1\146\17\0";
    static final String DFA39_acceptS = "\10\uffff\1\3\1\4\3\uffff\1\2\13\uffff\2\1\1\uffff\13\2\1\uffff\1\2\3" +
            "\uffff\1\1\37\2\22\uffff\14\2\1\uffff\1\1\22\uffff\1\2\1\uffff\7\2\37" +
            "\uffff\1\2\16\uffff\2\2\54\uffff";
    static final String DFA39_specialS = "\1\uffff\1\126\15\uffff\1\70\1\125\1\33\1\32\1\35\1\55\2\uffff\1\75\1" +
            "\40\2\uffff\1\36\17\uffff\1\111\41\uffff\1\115\1\122\2\uffff\1\110\1\51" +
            "\1\uffff\1\170\1\2\1\23\1\46\1\73\1\116\1\130\1\163\1\uffff\1\21\17\uffff" +
            "\1\152\1\1\1\27\1\34\1\66\1\60\1\72\1\114\1\146\1\171\1\5\1\uffff\1\57" +
            "\1\53\1\105\1\127\1\150\1\uffff\1\6\7\uffff\1\52\1\143\1\172\1\3\1\24" +
            "\1\25\1\13\1\47\1\74\1\117\1\131\1\164\1\137\1\uffff\1\12\1\15\1\41\1" +
            "\65\1\64\1\61\1\112\1\135\1\154\1\173\1\22\1\uffff\1\156\1\123\1\120\1" +
            "\142\1\151\1\uffff\1\107\1\uffff\1\104\1\147\1\165\1\4\1\162\1\166\1\31" +
            "\1\50\1\76\1\77\1\144\3\uffff\1\14\1\43\1\71\1\103\1\100\1\121\1\134\1" +
            "\153\1\10\1\16\1\42\1\uffff\1\132\1\124\1\145\1\140\1\160\1\141\1\161" +
            "\1\0\1\26\1\45\1\62\1\56\1\101\1\113\1\136\1\167\1\uffff\1\157\1\11\1" +
            "\17\1\37\1\67\1\30\1\133\1\155\1\7\1\20\1\106\1\44\1\63\1\54\1\102}>";
    static final String[] DFA39_transitionS = {
            "\1\5\1\1\4\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11\31\uffff" +
                    "\1\11\2\uffff\1\10\3\11\11\uffff\1\2\16\uffff\1\6\2\uffff\1\4\6\uffff" +
                    "\1\11\7\uffff\1\11\5\uffff\1\3\1\uffff\1\7",
            "\1\5\71\uffff\1\12\16\uffff\1\14\2\uffff\1\4\24\uffff\1\13\1\uffff\1" +
                    "\15",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\16" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\17",
            "\1\17",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\23\71\uffff\1\20\16\uffff\1\24\2\uffff\1\22\24\uffff\1\21",
            "",
            "",
            "\1\17\12\uffff\1\25",
            "\1\17",
            "\1\17",
            "",
            "\4\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1" +
                    "\11\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\26" +
                    "\3\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\32\5\uffff\1\35\1\uffff\1\45\1\uffff\1\41\5\uffff\1\35\31\uffff\1" +
                    "\42\2\uffff\1\34\1\37\1\40\1\36\11\uffff\1\27\16\uffff\1\33\2\uffff\1" +
                    "\31\6\uffff\1\44\7\uffff\1\43\5\uffff\1\30\1\uffff\1\46",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\47" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\51",
            "\4\11\1\uffff\1\11\1\52\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\2\11" +
                    "\1\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\54\1\55\1\uffff\1\77\1\uffff\1" +
                    "\75\5\uffff\1\53\2\uffff\1\107\2\uffff\1\73\23\uffff\1\76\2\uffff\1\103" +
                    "\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110\1\104\1\105\2\uffff\1\113" +
                    "\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\106\2\uffff" +
                    "\1\63\4\uffff\1\100\4\uffff\1\56\1\74\1\uffff\1\101",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\54\1\55\1\uffff\1\77\1\uffff\1" +
                    "\75\5\uffff\1\55\2\uffff\1\107\2\uffff\1\73\23\uffff\1\76\2\uffff\1\103" +
                    "\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110\1\104\1\105\2\uffff\1\113" +
                    "\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\106\2\uffff" +
                    "\1\63\4\uffff\1\100\4\uffff\1\56\1\74\1\uffff\1\101",
            "",
            "",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\54\1\55\1\uffff\1\77\1\uffff\1" +
                    "\75\5\uffff\1\55\2\uffff\1\107\2\uffff\1\73\23\uffff\1\76\2\uffff\1\103" +
                    "\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110\1\104\1\105\2\uffff\1\113" +
                    "\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\106\2\uffff" +
                    "\1\63\4\uffff\1\100\4\uffff\1\56\1\74\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1" +
                    "\11\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\114" +
                    "\3\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "",
            "\1\17",
            "\1\120\5\uffff\1\123\1\uffff\1\133\1\uffff\1\127\5\uffff\1\123\31\uffff" +
                    "\1\130\2\uffff\1\122\1\125\1\126\1\124\11\uffff\1\115\3\uffff\3\11\10" +
                    "\uffff\1\121\2\uffff\1\117\6\uffff\1\132\7\uffff\1\131\5\uffff\1\116" +
                    "\1\uffff\1\134",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\uffff\1\151\1\uffff\1\147\1\uffff" +
                    "\1\143\5\uffff\1\151\2\uffff\1\107\2\uffff\1\73\23\uffff\1\144\2\uffff" +
                    "\1\103\1\137\1\140\1\136\11\uffff\1\135\3\uffff\1\110\1\104\1\105\2\uffff" +
                    "\1\113\5\uffff\1\141\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\146\2" +
                    "\uffff\1\63\4\uffff\1\145\4\uffff\1\56\1\142\1\uffff\1\150",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\11\1\uffff\1\11\1\152\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\2\11" +
                    "\1\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\54\12\uffff\1\153",
            "\1\54",
            "\1\154",
            "\1\154",
            "\1\54",
            "\1\uffff",
            "\1\167\1\uffff\1\163\37\uffff\1\164\3\uffff\1\157\1\160\1\156\11\uffff" +
                    "\1\155\16\uffff\1\161\11\uffff\1\166\7\uffff\1\165\5\uffff\1\162\1\uffff" +
                    "\1\170",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\174\71\uffff\1\171\16\uffff\1\175\2\uffff\1\173\24\uffff\1\172",
            "\1\u0084\1\u0083\1\102\1\65\1\uffff\1\u0082\1\177\1\u0080\1\uffff\1" +
                    "\77\1\uffff\1\75\5\uffff\1\176\1\u0086\1\uffff\1\107\2\uffff\1\73\23" +
                    "\uffff\1\76\2\uffff\1\103\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110" +
                    "\1\104\1\105\2\uffff\1\113\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1" +
                    "\112\3\uffff\1\106\2\uffff\1\63\4\uffff\1\u0085\4\uffff\1\u0081\1\74" +
                    "\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\5\uffff\1\123\1\uffff\1\u0092\1\uffff\1\u008e\5\uffff\1\123\31" +
                    "\uffff\1\u008f\2\uffff\1\u0087\1\u008a\1\u008b\1\u0089\11\uffff\1\u0088" +
                    "\3\uffff\3\11\10\uffff\1\u008c\2\uffff\1\11\6\uffff\1\u0091\7\uffff\1" +
                    "\u0090\5\uffff\1\u008d\1\uffff\1\134",
            "",
            "\1\u0094\1\uffff\1\u009f\1\uffff\1\u009b\5\uffff\1\u0094\31\uffff\1" +
                    "\u009c\2\uffff\1\u0093\1\u0097\1\u0098\1\u0096\11\uffff\1\u0095\3\uffff" +
                    "\3\11\10\uffff\1\u0099\11\uffff\1\u009e\7\uffff\1\u009d\5\uffff\1\u009a" +
                    "\1\uffff\1\u00a0",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a4\71\uffff\1\u00a1\16\uffff\1\u00a5\2\uffff\1\u00a3\24\uffff" +
                    "\1\u00a2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\u00b6\5\uffff\1\u00a8\1\uffff\1\u00b3\1\uffff\1\u00af\5\uffff\1\u00a8" +
                    "\31\uffff\1\u00b0\2\uffff\1\u00a7\1\u00ab\1\u00ac\1\u00aa\11\uffff\1" +
                    "\u00a9\3\uffff\1\u00a6\1\104\1\105\10\uffff\1\u00ad\2\uffff\1\u00b5\6" +
                    "\uffff\1\u00b2\7\uffff\1\u00b1\5\uffff\1\u00ae\1\uffff\1\u00b4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00c1\1\uffff\1\u00bd\37\uffff\1\u00be\3\uffff\1\u00b9\1\u00ba\1" +
                    "\u00b8\11\uffff\1\u00b7\16\uffff\1\u00bb\11\uffff\1\u00c0\7\uffff\1\u00bf" +
                    "\5\uffff\1\u00bc\1\uffff\1\u00c2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00c6\71\uffff\1\u00c3\16\uffff\1\u00c7\2\uffff\1\u00c5\24\uffff" +
                    "\1\u00c4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\u00d2\1\uffff\1\u00ce\37\uffff\1\u00cf\3\uffff\1\u00ca\1\u00cb\1" +
                    "\u00c9\11\uffff\1\u00c8\16\uffff\1\u00cc\11\uffff\1\u00d1\7\uffff\1\u00d0" +
                    "\5\uffff\1\u00cd\1\uffff\1\u00d3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00d7\71\uffff\1\u00d4\16\uffff\1\u00d8\2\uffff\1\u00d6\24\uffff" +
                    "\1\u00d5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00dc\71\uffff\1\u00d9\16\uffff\1\u00dd\2\uffff\1\u00db\24\uffff" +
                    "\1\u00da",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00e1\71\uffff\1\u00de\16\uffff\1\u00e2\2\uffff\1\u00e0\24\uffff" +
                    "\1\u00df",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static
    {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++)
        {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    protected class DFA39 extends DFA
    {

        public DFA39(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }

        @Override
        public String getDescription()
        {
            return "543:9: ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( EXACT_PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( EXACT_TERM ftsWord ( fuzzy )? ) )";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException
        {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s)
            {
            case 0:
                int LA39_202 = input.LA(1);

                int index39_202 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_202);
                if (s >= 0)
                    return s;
                break;

            case 1:
                int LA39_110 = input.LA(1);

                int index39_110 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_110);
                if (s >= 0)
                    return s;
                break;

            case 2:
                int LA39_85 = input.LA(1);

                int index39_85 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_85);
                if (s >= 0)
                    return s;
                break;

            case 3:
                int LA39_138 = input.LA(1);

                int index39_138 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_138);
                if (s >= 0)
                    return s;
                break;

            case 4:
                int LA39_172 = input.LA(1);

                int index39_172 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_172);
                if (s >= 0)
                    return s;
                break;

            case 5:
                int LA39_119 = input.LA(1);

                int index39_119 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_119);
                if (s >= 0)
                    return s;
                break;

            case 6:
                int LA39_127 = input.LA(1);

                int index39_127 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_127 == LPAREN) && (synpred19_FTS()))
                {
                    s = 166;
                }
                else if ((LA39_127 == FTSPHRASE))
                {
                    s = 167;
                }
                else if ((LA39_127 == COMMA || LA39_127 == DOT))
                {
                    s = 168;
                }
                else if ((LA39_127 == ID))
                {
                    s = 169;
                }
                else if ((LA39_127 == FTSWORD))
                {
                    s = 170;
                }
                else if ((LA39_127 == FTSPRE))
                {
                    s = 171;
                }
                else if ((LA39_127 == FTSWILD))
                {
                    s = 172;
                }
                else if ((LA39_127 == NOT))
                {
                    s = 173;
                }
                else if ((LA39_127 == TO))
                {
                    s = 174;
                }
                else if ((LA39_127 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 175;
                }
                else if ((LA39_127 == FLOATING_POINT_LITERAL))
                {
                    s = 176;
                }
                else if ((LA39_127 == STAR))
                {
                    s = 177;
                }
                else if ((LA39_127 == QUESTION_MARK))
                {
                    s = 178;
                }
                else if ((LA39_127 == DATETIME))
                {
                    s = 179;
                }
                else if ((LA39_127 == URI))
                {
                    s = 180;
                }
                else if ((LA39_127 == OR) && (synpred19_FTS()))
                {
                    s = 181;
                }
                else if ((LA39_127 == AND) && (synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((LA39_127 == LSQUARE) && (synpred19_FTS()))
                {
                    s = 68;
                }
                else if ((LA39_127 == LT) && (synpred19_FTS()))
                {
                    s = 69;
                }

                input.seek(index39_127);
                if (s >= 0)
                    return s;
                break;

            case 7:
                int LA39_220 = input.LA(1);

                int index39_220 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_220);
                if (s >= 0)
                    return s;
                break;

            case 8:
                int LA39_191 = input.LA(1);

                int index39_191 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_191);
                if (s >= 0)
                    return s;
                break;

            case 9:
                int LA39_213 = input.LA(1);

                int index39_213 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_213);
                if (s >= 0)
                    return s;
                break;

            case 10:
                int LA39_149 = input.LA(1);

                int index39_149 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_149);
                if (s >= 0)
                    return s;
                break;

            case 11:
                int LA39_141 = input.LA(1);

                int index39_141 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_141);
                if (s >= 0)
                    return s;
                break;

            case 12:
                int LA39_183 = input.LA(1);

                int index39_183 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_183);
                if (s >= 0)
                    return s;
                break;

            case 13:
                int LA39_150 = input.LA(1);

                int index39_150 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_150);
                if (s >= 0)
                    return s;
                break;

            case 14:
                int LA39_192 = input.LA(1);

                int index39_192 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_192);
                if (s >= 0)
                    return s;
                break;

            case 15:
                int LA39_214 = input.LA(1);

                int index39_214 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_214);
                if (s >= 0)
                    return s;
                break;

            case 16:
                int LA39_221 = input.LA(1);

                int index39_221 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_221);
                if (s >= 0)
                    return s;
                break;

            case 17:
                int LA39_93 = input.LA(1);

                int index39_93 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_93 == DOT) && (synpred19_FTS()))
                {
                    s = 126;
                }
                else if ((LA39_93 == COLON))
                {
                    s = 127;
                }
                else if ((LA39_93 == COMMA) && (synpred19_FTS()))
                {
                    s = 128;
                }
                else if ((LA39_93 == TILDA) && (synpred19_FTS()))
                {
                    s = 129;
                }
                else if ((LA39_93 == CARAT) && (synpred19_FTS()))
                {
                    s = 130;
                }
                else if ((LA39_93 == AND) && (synpred19_FTS()))
                {
                    s = 131;
                }
                else if ((LA39_93 == AMP) && (synpred19_FTS()))
                {
                    s = 132;
                }
                else if ((LA39_93 == EOF) && (synpred19_FTS()))
                {
                    s = 50;
                }
                else if ((LA39_93 == RPAREN) && (synpred19_FTS()))
                {
                    s = 51;
                }
                else if ((LA39_93 == OR) && (synpred19_FTS()))
                {
                    s = 52;
                }
                else if ((LA39_93 == BAR) && (synpred19_FTS()))
                {
                    s = 53;
                }
                else if ((LA39_93 == NOT) && (synpred19_FTS()))
                {
                    s = 54;
                }
                else if ((LA39_93 == ID) && (synpred19_FTS()))
                {
                    s = 55;
                }
                else if ((LA39_93 == FTSWORD) && (synpred19_FTS()))
                {
                    s = 56;
                }
                else if ((LA39_93 == FTSPRE) && (synpred19_FTS()))
                {
                    s = 57;
                }
                else if ((LA39_93 == FTSWILD) && (synpred19_FTS()))
                {
                    s = 58;
                }
                else if ((LA39_93 == EXCLAMATION) && (synpred19_FTS()))
                {
                    s = 59;
                }
                else if ((LA39_93 == TO) && (synpred19_FTS()))
                {
                    s = 60;
                }
                else if ((LA39_93 == DECIMAL_INTEGER_LITERAL) && (synpred19_FTS()))
                {
                    s = 61;
                }
                else if ((LA39_93 == FLOATING_POINT_LITERAL) && (synpred19_FTS()))
                {
                    s = 62;
                }
                else if ((LA39_93 == DATETIME) && (synpred19_FTS()))
                {
                    s = 63;
                }
                else if ((LA39_93 == STAR) && (synpred19_FTS()))
                {
                    s = 133;
                }
                else if ((LA39_93 == URI) && (synpred19_FTS()))
                {
                    s = 65;
                }
                else if ((LA39_93 == AT) && (synpred19_FTS()))
                {
                    s = 66;
                }
                else if ((LA39_93 == FTSPHRASE) && (synpred19_FTS()))
                {
                    s = 67;
                }
                else if ((LA39_93 == LSQUARE) && (synpred19_FTS()))
                {
                    s = 68;
                }
                else if ((LA39_93 == LT) && (synpred19_FTS()))
                {
                    s = 69;
                }
                else if ((LA39_93 == QUESTION_MARK) && (synpred19_FTS()))
                {
                    s = 70;
                }
                else if ((LA39_93 == EQUALS) && (synpred19_FTS()))
                {
                    s = 71;
                }
                else if ((LA39_93 == LPAREN) && (synpred19_FTS()))
                {
                    s = 72;
                }
                else if ((LA39_93 == PERCENT) && (synpred19_FTS()))
                {
                    s = 73;
                }
                else if ((LA39_93 == PLUS) && (synpred19_FTS()))
                {
                    s = 74;
                }
                else if ((LA39_93 == MINUS) && (synpred19_FTS()))
                {
                    s = 75;
                }
                else if ((LA39_93 == DOTDOT) && (synpred19_FTS()))
                {
                    s = 134;
                }

                input.seek(index39_93);
                if (s >= 0)
                    return s;
                break;

            case 18:
                int LA39_159 = input.LA(1);

                int index39_159 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_159);
                if (s >= 0)
                    return s;
                break;

            case 19:
                int LA39_86 = input.LA(1);

                int index39_86 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_86);
                if (s >= 0)
                    return s;
                break;

            case 20:
                int LA39_139 = input.LA(1);

                int index39_139 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_139);
                if (s >= 0)
                    return s;
                break;

            case 21:
                int LA39_140 = input.LA(1);

                int index39_140 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_140);
                if (s >= 0)
                    return s;
                break;

            case 22:
                int LA39_203 = input.LA(1);

                int index39_203 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_203);
                if (s >= 0)
                    return s;
                break;

            case 23:
                int LA39_111 = input.LA(1);

                int index39_111 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_111);
                if (s >= 0)
                    return s;
                break;

            case 24:
                int LA39_217 = input.LA(1);

                int index39_217 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_217);
                if (s >= 0)
                    return s;
                break;

            case 25:
                int LA39_175 = input.LA(1);

                int index39_175 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_175);
                if (s >= 0)
                    return s;
                break;

            case 26:
                int LA39_18 = input.LA(1);

                int index39_18 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_18 == COLON) && (synpred19_FTS()))
                {
                    s = 40;
                }
                else if ((LA39_18 == EOF || (LA39_18 >= AMP && LA39_18 <= BAR) || LA39_18 == CARAT || LA39_18 == COMMA || LA39_18 == DATETIME || LA39_18 == DECIMAL_INTEGER_LITERAL || LA39_18 == DOT || LA39_18 == EQUALS || LA39_18 == EXCLAMATION || LA39_18 == FLOATING_POINT_LITERAL || (LA39_18 >= FTSPHRASE && LA39_18 <= FTSWORD) || LA39_18 == ID || (LA39_18 >= LPAREN && LA39_18 <= LT) || LA39_18 == MINUS || LA39_18 == NOT || (LA39_18 >= OR && LA39_18 <= PERCENT) || LA39_18 == PLUS || LA39_18 == QUESTION_MARK || LA39_18 == RPAREN || LA39_18 == STAR || (LA39_18 >= TILDA && LA39_18 <= TO) || LA39_18 == URI))
                {
                    s = 9;
                }

                input.seek(index39_18);
                if (s >= 0)
                    return s;
                break;

            case 27:
                int LA39_17 = input.LA(1);

                int index39_17 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_17 == COLON) && (synpred19_FTS()))
                {
                    s = 40;
                }
                else if ((LA39_17 == EOF || (LA39_17 >= AMP && LA39_17 <= BAR) || LA39_17 == CARAT || LA39_17 == COMMA || LA39_17 == DATETIME || LA39_17 == DECIMAL_INTEGER_LITERAL || LA39_17 == DOT || LA39_17 == EQUALS || LA39_17 == EXCLAMATION || LA39_17 == FLOATING_POINT_LITERAL || (LA39_17 >= FTSPHRASE && LA39_17 <= FTSWORD) || LA39_17 == ID || (LA39_17 >= LPAREN && LA39_17 <= LT) || LA39_17 == MINUS || LA39_17 == NOT || (LA39_17 >= OR && LA39_17 <= PERCENT) || LA39_17 == PLUS || LA39_17 == QUESTION_MARK || LA39_17 == RPAREN || LA39_17 == STAR || (LA39_17 >= TILDA && LA39_17 <= TO) || LA39_17 == URI))
                {
                    s = 9;
                }

                input.seek(index39_17);
                if (s >= 0)
                    return s;
                break;

            case 28:
                int LA39_112 = input.LA(1);

                int index39_112 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_112);
                if (s >= 0)
                    return s;
                break;

            case 29:
                int LA39_19 = input.LA(1);

                int index39_19 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_19 == COLON) && (synpred19_FTS()))
                {
                    s = 40;
                }
                else if ((LA39_19 == EOF || (LA39_19 >= AMP && LA39_19 <= BAR) || LA39_19 == CARAT || LA39_19 == COMMA || LA39_19 == DATETIME || LA39_19 == DECIMAL_INTEGER_LITERAL || LA39_19 == DOT || LA39_19 == EQUALS || LA39_19 == EXCLAMATION || LA39_19 == FLOATING_POINT_LITERAL || (LA39_19 >= FTSPHRASE && LA39_19 <= FTSWORD) || LA39_19 == ID || (LA39_19 >= LPAREN && LA39_19 <= LT) || LA39_19 == MINUS || LA39_19 == NOT || (LA39_19 >= OR && LA39_19 <= PERCENT) || LA39_19 == PLUS || LA39_19 == QUESTION_MARK || LA39_19 == RPAREN || LA39_19 == STAR || (LA39_19 >= TILDA && LA39_19 <= TO) || LA39_19 == URI))
                {
                    s = 9;
                }

                input.seek(index39_19);
                if (s >= 0)
                    return s;
                break;

            case 30:
                int LA39_27 = input.LA(1);

                int index39_27 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_27 == COLON) && (synpred16_FTS()))
                {
                    s = 44;
                }
                else if ((LA39_27 == COMMA || LA39_27 == DOT) && (synpred19_FTS()))
                {
                    s = 45;
                }
                else if ((LA39_27 == TILDA) && (synpred19_FTS()))
                {
                    s = 46;
                }
                else if ((LA39_27 == CARAT) && (synpred19_FTS()))
                {
                    s = 47;
                }
                else if ((LA39_27 == AND) && (synpred19_FTS()))
                {
                    s = 48;
                }
                else if ((LA39_27 == AMP) && (synpred19_FTS()))
                {
                    s = 49;
                }
                else if ((LA39_27 == EOF) && (synpred19_FTS()))
                {
                    s = 50;
                }
                else if ((LA39_27 == RPAREN) && (synpred19_FTS()))
                {
                    s = 51;
                }
                else if ((LA39_27 == OR) && (synpred19_FTS()))
                {
                    s = 52;
                }
                else if ((LA39_27 == BAR) && (synpred19_FTS()))
                {
                    s = 53;
                }
                else if ((LA39_27 == NOT) && (synpred19_FTS()))
                {
                    s = 54;
                }
                else if ((LA39_27 == ID) && (synpred19_FTS()))
                {
                    s = 55;
                }
                else if ((LA39_27 == FTSWORD) && (synpred19_FTS()))
                {
                    s = 56;
                }
                else if ((LA39_27 == FTSPRE) && (synpred19_FTS()))
                {
                    s = 57;
                }
                else if ((LA39_27 == FTSWILD) && (synpred19_FTS()))
                {
                    s = 58;
                }
                else if ((LA39_27 == EXCLAMATION) && (synpred19_FTS()))
                {
                    s = 59;
                }
                else if ((LA39_27 == TO) && (synpred19_FTS()))
                {
                    s = 60;
                }
                else if ((LA39_27 == DECIMAL_INTEGER_LITERAL) && (synpred19_FTS()))
                {
                    s = 61;
                }
                else if ((LA39_27 == FLOATING_POINT_LITERAL) && (synpred19_FTS()))
                {
                    s = 62;
                }
                else if ((LA39_27 == DATETIME) && (synpred19_FTS()))
                {
                    s = 63;
                }
                else if ((LA39_27 == STAR) && (synpred19_FTS()))
                {
                    s = 64;
                }
                else if ((LA39_27 == URI) && (synpred19_FTS()))
                {
                    s = 65;
                }
                else if ((LA39_27 == AT) && (synpred19_FTS()))
                {
                    s = 66;
                }
                else if ((LA39_27 == FTSPHRASE) && (synpred19_FTS()))
                {
                    s = 67;
                }
                else if ((LA39_27 == LSQUARE) && (synpred19_FTS()))
                {
                    s = 68;
                }
                else if ((LA39_27 == LT) && (synpred19_FTS()))
                {
                    s = 69;
                }
                else if ((LA39_27 == QUESTION_MARK) && (synpred19_FTS()))
                {
                    s = 70;
                }
                else if ((LA39_27 == EQUALS) && (synpred19_FTS()))
                {
                    s = 71;
                }
                else if ((LA39_27 == LPAREN) && (synpred19_FTS()))
                {
                    s = 72;
                }
                else if ((LA39_27 == PERCENT) && (synpred19_FTS()))
                {
                    s = 73;
                }
                else if ((LA39_27 == PLUS) && (synpred19_FTS()))
                {
                    s = 74;
                }
                else if ((LA39_27 == MINUS) && (synpred19_FTS()))
                {
                    s = 75;
                }

                input.seek(index39_27);
                if (s >= 0)
                    return s;
                break;

            case 31:
                int LA39_215 = input.LA(1);

                int index39_215 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_215);
                if (s >= 0)
                    return s;
                break;

            case 32:
                int LA39_24 = input.LA(1);

                int index39_24 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_24 == COLON) && (synpred16_FTS()))
                {
                    s = 44;
                }
                else if ((LA39_24 == COMMA || LA39_24 == DOT) && (synpred19_FTS()))
                {
                    s = 45;
                }
                else if ((LA39_24 == TILDA) && (synpred19_FTS()))
                {
                    s = 46;
                }
                else if ((LA39_24 == CARAT) && (synpred19_FTS()))
                {
                    s = 47;
                }
                else if ((LA39_24 == AND) && (synpred19_FTS()))
                {
                    s = 48;
                }
                else if ((LA39_24 == AMP) && (synpred19_FTS()))
                {
                    s = 49;
                }
                else if ((LA39_24 == EOF) && (synpred19_FTS()))
                {
                    s = 50;
                }
                else if ((LA39_24 == RPAREN) && (synpred19_FTS()))
                {
                    s = 51;
                }
                else if ((LA39_24 == OR) && (synpred19_FTS()))
                {
                    s = 52;
                }
                else if ((LA39_24 == BAR) && (synpred19_FTS()))
                {
                    s = 53;
                }
                else if ((LA39_24 == NOT) && (synpred19_FTS()))
                {
                    s = 54;
                }
                else if ((LA39_24 == ID) && (synpred19_FTS()))
                {
                    s = 55;
                }
                else if ((LA39_24 == FTSWORD) && (synpred19_FTS()))
                {
                    s = 56;
                }
                else if ((LA39_24 == FTSPRE) && (synpred19_FTS()))
                {
                    s = 57;
                }
                else if ((LA39_24 == FTSWILD) && (synpred19_FTS()))
                {
                    s = 58;
                }
                else if ((LA39_24 == EXCLAMATION) && (synpred19_FTS()))
                {
                    s = 59;
                }
                else if ((LA39_24 == TO) && (synpred19_FTS()))
                {
                    s = 60;
                }
                else if ((LA39_24 == DECIMAL_INTEGER_LITERAL) && (synpred19_FTS()))
                {
                    s = 61;
                }
                else if ((LA39_24 == FLOATING_POINT_LITERAL) && (synpred19_FTS()))
                {
                    s = 62;
                }
                else if ((LA39_24 == DATETIME) && (synpred19_FTS()))
                {
                    s = 63;
                }
                else if ((LA39_24 == STAR) && (synpred19_FTS()))
                {
                    s = 64;
                }
                else if ((LA39_24 == URI) && (synpred19_FTS()))
                {
                    s = 65;
                }
                else if ((LA39_24 == AT) && (synpred19_FTS()))
                {
                    s = 66;
                }
                else if ((LA39_24 == FTSPHRASE) && (synpred19_FTS()))
                {
                    s = 67;
                }
                else if ((LA39_24 == LSQUARE) && (synpred19_FTS()))
                {
                    s = 68;
                }
                else if ((LA39_24 == LT) && (synpred19_FTS()))
                {
                    s = 69;
                }
                else if ((LA39_24 == QUESTION_MARK) && (synpred19_FTS()))
                {
                    s = 70;
                }
                else if ((LA39_24 == EQUALS) && (synpred19_FTS()))
                {
                    s = 71;
                }
                else if ((LA39_24 == LPAREN) && (synpred19_FTS()))
                {
                    s = 72;
                }
                else if ((LA39_24 == PERCENT) && (synpred19_FTS()))
                {
                    s = 73;
                }
                else if ((LA39_24 == PLUS) && (synpred19_FTS()))
                {
                    s = 74;
                }
                else if ((LA39_24 == MINUS) && (synpred19_FTS()))
                {
                    s = 75;
                }

                input.seek(index39_24);
                if (s >= 0)
                    return s;
                break;

            case 33:
                int LA39_151 = input.LA(1);

                int index39_151 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_151);
                if (s >= 0)
                    return s;
                break;

            case 34:
                int LA39_193 = input.LA(1);

                int index39_193 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_193);
                if (s >= 0)
                    return s;
                break;

            case 35:
                int LA39_184 = input.LA(1);

                int index39_184 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_184);
                if (s >= 0)
                    return s;
                break;

            case 36:
                int LA39_223 = input.LA(1);

                int index39_223 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_223);
                if (s >= 0)
                    return s;
                break;

            case 37:
                int LA39_204 = input.LA(1);

                int index39_204 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_204);
                if (s >= 0)
                    return s;
                break;

            case 38:
                int LA39_87 = input.LA(1);

                int index39_87 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_87);
                if (s >= 0)
                    return s;
                break;

            case 39:
                int LA39_142 = input.LA(1);

                int index39_142 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_142);
                if (s >= 0)
                    return s;
                break;

            case 40:
                int LA39_176 = input.LA(1);

                int index39_176 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_176);
                if (s >= 0)
                    return s;
                break;

            case 41:
                int LA39_82 = input.LA(1);

                int index39_82 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_82);
                if (s >= 0)
                    return s;
                break;

            case 42:
                int LA39_135 = input.LA(1);

                int index39_135 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_135);
                if (s >= 0)
                    return s;
                break;

            case 43:
                int LA39_122 = input.LA(1);

                int index39_122 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_122);
                if (s >= 0)
                    return s;
                break;

            case 44:
                int LA39_225 = input.LA(1);

                int index39_225 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_225);
                if (s >= 0)
                    return s;
                break;

            case 45:
                int LA39_20 = input.LA(1);

                int index39_20 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_20 == COLON) && (synpred19_FTS()))
                {
                    s = 40;
                }
                else if ((LA39_20 == EOF || (LA39_20 >= AMP && LA39_20 <= BAR) || LA39_20 == CARAT || LA39_20 == COMMA || LA39_20 == DATETIME || LA39_20 == DECIMAL_INTEGER_LITERAL || LA39_20 == DOT || LA39_20 == EQUALS || LA39_20 == EXCLAMATION || LA39_20 == FLOATING_POINT_LITERAL || (LA39_20 >= FTSPHRASE && LA39_20 <= FTSWORD) || LA39_20 == ID || (LA39_20 >= LPAREN && LA39_20 <= LT) || LA39_20 == MINUS || LA39_20 == NOT || (LA39_20 >= OR && LA39_20 <= PERCENT) || LA39_20 == PLUS || LA39_20 == QUESTION_MARK || LA39_20 == RPAREN || LA39_20 == STAR || (LA39_20 >= TILDA && LA39_20 <= TO) || LA39_20 == URI))
                {
                    s = 9;
                }

                input.seek(index39_20);
                if (s >= 0)
                    return s;
                break;

            case 46:
                int LA39_206 = input.LA(1);

                int index39_206 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_206);
                if (s >= 0)
                    return s;
                break;

            case 47:
                int LA39_121 = input.LA(1);

                int index39_121 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_121);
                if (s >= 0)
                    return s;
                break;

            case 48:
                int LA39_114 = input.LA(1);

                int index39_114 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_114);
                if (s >= 0)
                    return s;
                break;

            case 49:
                int LA39_154 = input.LA(1);

                int index39_154 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_154);
                if (s >= 0)
                    return s;
                break;

            case 50:
                int LA39_205 = input.LA(1);

                int index39_205 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_205);
                if (s >= 0)
                    return s;
                break;

            case 51:
                int LA39_224 = input.LA(1);

                int index39_224 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_224);
                if (s >= 0)
                    return s;
                break;

            case 52:
                int LA39_153 = input.LA(1);

                int index39_153 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_153);
                if (s >= 0)
                    return s;
                break;

            case 53:
                int LA39_152 = input.LA(1);

                int index39_152 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_152);
                if (s >= 0)
                    return s;
                break;

            case 54:
                int LA39_113 = input.LA(1);

                int index39_113 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_113);
                if (s >= 0)
                    return s;
                break;

            case 55:
                int LA39_216 = input.LA(1);

                int index39_216 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_216);
                if (s >= 0)
                    return s;
                break;

            case 56:
                int LA39_15 = input.LA(1);

                int index39_15 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_15 == ID))
                {
                    s = 23;
                }
                else if ((LA39_15 == TO))
                {
                    s = 24;
                }
                else if ((LA39_15 == OR) && (synpred16_FTS()))
                {
                    s = 25;
                }
                else if ((LA39_15 == AND) && (synpred16_FTS()))
                {
                    s = 26;
                }
                else if ((LA39_15 == NOT))
                {
                    s = 27;
                }
                else if ((LA39_15 == FTSPHRASE) && (synpred19_FTS()))
                {
                    s = 28;
                }
                else if ((LA39_15 == COMMA || LA39_15 == DOT) && (synpred19_FTS()))
                {
                    s = 29;
                }
                else if ((LA39_15 == FTSWORD) && (synpred19_FTS()))
                {
                    s = 30;
                }
                else if ((LA39_15 == FTSPRE) && (synpred19_FTS()))
                {
                    s = 31;
                }
                else if ((LA39_15 == FTSWILD) && (synpred19_FTS()))
                {
                    s = 32;
                }
                else if ((LA39_15 == DECIMAL_INTEGER_LITERAL) && (synpred19_FTS()))
                {
                    s = 33;
                }
                else if ((LA39_15 == FLOATING_POINT_LITERAL) && (synpred19_FTS()))
                {
                    s = 34;
                }
                else if ((LA39_15 == STAR) && (synpred19_FTS()))
                {
                    s = 35;
                }
                else if ((LA39_15 == QUESTION_MARK) && (synpred19_FTS()))
                {
                    s = 36;
                }
                else if ((LA39_15 == DATETIME) && (synpred19_FTS()))
                {
                    s = 37;
                }
                else if ((LA39_15 == URI) && (synpred19_FTS()))
                {
                    s = 38;
                }

                input.seek(index39_15);
                if (s >= 0)
                    return s;
                break;

            case 57:
                int LA39_185 = input.LA(1);

                int index39_185 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_185);
                if (s >= 0)
                    return s;
                break;

            case 58:
                int LA39_115 = input.LA(1);

                int index39_115 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_115);
                if (s >= 0)
                    return s;
                break;

            case 59:
                int LA39_88 = input.LA(1);

                int index39_88 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_88);
                if (s >= 0)
                    return s;
                break;

            case 60:
                int LA39_143 = input.LA(1);

                int index39_143 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_143);
                if (s >= 0)
                    return s;
                break;

            case 61:
                int LA39_23 = input.LA(1);

                int index39_23 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_23 == DOT))
                {
                    s = 43;
                }
                else if ((LA39_23 == COLON) && (synpred16_FTS()))
                {
                    s = 44;
                }
                else if ((LA39_23 == COMMA) && (synpred19_FTS()))
                {
                    s = 45;
                }
                else if ((LA39_23 == TILDA) && (synpred19_FTS()))
                {
                    s = 46;
                }
                else if ((LA39_23 == CARAT) && (synpred19_FTS()))
                {
                    s = 47;
                }
                else if ((LA39_23 == AND) && (synpred19_FTS()))
                {
                    s = 48;
                }
                else if ((LA39_23 == AMP) && (synpred19_FTS()))
                {
                    s = 49;
                }
                else if ((LA39_23 == EOF) && (synpred19_FTS()))
                {
                    s = 50;
                }
                else if ((LA39_23 == RPAREN) && (synpred19_FTS()))
                {
                    s = 51;
                }
                else if ((LA39_23 == OR) && (synpred19_FTS()))
                {
                    s = 52;
                }
                else if ((LA39_23 == BAR) && (synpred19_FTS()))
                {
                    s = 53;
                }
                else if ((LA39_23 == NOT) && (synpred19_FTS()))
                {
                    s = 54;
                }
                else if ((LA39_23 == ID) && (synpred19_FTS()))
                {
                    s = 55;
                }
                else if ((LA39_23 == FTSWORD) && (synpred19_FTS()))
                {
                    s = 56;
                }
                else if ((LA39_23 == FTSPRE) && (synpred19_FTS()))
                {
                    s = 57;
                }
                else if ((LA39_23 == FTSWILD) && (synpred19_FTS()))
                {
                    s = 58;
                }
                else if ((LA39_23 == EXCLAMATION) && (synpred19_FTS()))
                {
                    s = 59;
                }
                else if ((LA39_23 == TO) && (synpred19_FTS()))
                {
                    s = 60;
                }
                else if ((LA39_23 == DECIMAL_INTEGER_LITERAL) && (synpred19_FTS()))
                {
                    s = 61;
                }
                else if ((LA39_23 == FLOATING_POINT_LITERAL) && (synpred19_FTS()))
                {
                    s = 62;
                }
                else if ((LA39_23 == DATETIME) && (synpred19_FTS()))
                {
                    s = 63;
                }
                else if ((LA39_23 == STAR) && (synpred19_FTS()))
                {
                    s = 64;
                }
                else if ((LA39_23 == URI) && (synpred19_FTS()))
                {
                    s = 65;
                }
                else if ((LA39_23 == AT) && (synpred19_FTS()))
                {
                    s = 66;
                }
                else if ((LA39_23 == FTSPHRASE) && (synpred19_FTS()))
                {
                    s = 67;
                }
                else if ((LA39_23 == LSQUARE) && (synpred19_FTS()))
                {
                    s = 68;
                }
                else if ((LA39_23 == LT) && (synpred19_FTS()))
                {
                    s = 69;
                }
                else if ((LA39_23 == QUESTION_MARK) && (synpred19_FTS()))
                {
                    s = 70;
                }
                else if ((LA39_23 == EQUALS) && (synpred19_FTS()))
                {
                    s = 71;
                }
                else if ((LA39_23 == LPAREN) && (synpred19_FTS()))
                {
                    s = 72;
                }
                else if ((LA39_23 == PERCENT) && (synpred19_FTS()))
                {
                    s = 73;
                }
                else if ((LA39_23 == PLUS) && (synpred19_FTS()))
                {
                    s = 74;
                }
                else if ((LA39_23 == MINUS) && (synpred19_FTS()))
                {
                    s = 75;
                }

                input.seek(index39_23);
                if (s >= 0)
                    return s;
                break;

            case 62:
                int LA39_177 = input.LA(1);

                int index39_177 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_177);
                if (s >= 0)
                    return s;
                break;

            case 63:
                int LA39_178 = input.LA(1);

                int index39_178 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_178);
                if (s >= 0)
                    return s;
                break;

            case 64:
                int LA39_187 = input.LA(1);

                int index39_187 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_187);
                if (s >= 0)
                    return s;
                break;

            case 65:
                int LA39_207 = input.LA(1);

                int index39_207 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_207);
                if (s >= 0)
                    return s;
                break;

            case 66:
                int LA39_226 = input.LA(1);

                int index39_226 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_226);
                if (s >= 0)
                    return s;
                break;

            case 67:
                int LA39_186 = input.LA(1);

                int index39_186 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_186);
                if (s >= 0)
                    return s;
                break;

            case 68:
                int LA39_169 = input.LA(1);

                int index39_169 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_169);
                if (s >= 0)
                    return s;
                break;

            case 69:
                int LA39_123 = input.LA(1);

                int index39_123 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_123);
                if (s >= 0)
                    return s;
                break;

            case 70:
                int LA39_222 = input.LA(1);

                int index39_222 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_222);
                if (s >= 0)
                    return s;
                break;

            case 71:
                int LA39_167 = input.LA(1);

                int index39_167 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_167);
                if (s >= 0)
                    return s;
                break;

            case 72:
                int LA39_81 = input.LA(1);

                int index39_81 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_81 == COLON) && (synpred16_FTS()))
                {
                    s = 44;
                }
                else if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_81);
                if (s >= 0)
                    return s;
                break;

            case 73:
                int LA39_43 = input.LA(1);

                int index39_43 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_43 == ID))
                {
                    s = 93;
                }
                else if ((LA39_43 == FTSWORD) && (synpred19_FTS()))
                {
                    s = 94;
                }
                else if ((LA39_43 == FTSPRE) && (synpred19_FTS()))
                {
                    s = 95;
                }
                else if ((LA39_43 == FTSWILD) && (synpred19_FTS()))
                {
                    s = 96;
                }
                else if ((LA39_43 == NOT) && (synpred19_FTS()))
                {
                    s = 97;
                }
                else if ((LA39_43 == TO) && (synpred19_FTS()))
                {
                    s = 98;
                }
                else if ((LA39_43 == DECIMAL_INTEGER_LITERAL) && (synpred19_FTS()))
                {
                    s = 99;
                }
                else if ((LA39_43 == FLOATING_POINT_LITERAL) && (synpred19_FTS()))
                {
                    s = 100;
                }
                else if ((LA39_43 == STAR) && (synpred19_FTS()))
                {
                    s = 101;
                }
                else if ((LA39_43 == QUESTION_MARK) && (synpred19_FTS()))
                {
                    s = 102;
                }
                else if ((LA39_43 == DATETIME) && (synpred19_FTS()))
                {
                    s = 103;
                }
                else if ((LA39_43 == URI) && (synpred19_FTS()))
                {
                    s = 104;
                }
                else if ((LA39_43 == TILDA) && (synpred19_FTS()))
                {
                    s = 46;
                }
                else if ((LA39_43 == CARAT) && (synpred19_FTS()))
                {
                    s = 47;
                }
                else if ((LA39_43 == AND) && (synpred19_FTS()))
                {
                    s = 48;
                }
                else if ((LA39_43 == AMP) && (synpred19_FTS()))
                {
                    s = 49;
                }
                else if ((LA39_43 == EOF) && (synpred19_FTS()))
                {
                    s = 50;
                }
                else if ((LA39_43 == RPAREN) && (synpred19_FTS()))
                {
                    s = 51;
                }
                else if ((LA39_43 == OR) && (synpred19_FTS()))
                {
                    s = 52;
                }
                else if ((LA39_43 == BAR) && (synpred19_FTS()))
                {
                    s = 53;
                }
                else if ((LA39_43 == EXCLAMATION) && (synpred19_FTS()))
                {
                    s = 59;
                }
                else if ((LA39_43 == AT) && (synpred19_FTS()))
                {
                    s = 66;
                }
                else if ((LA39_43 == FTSPHRASE) && (synpred19_FTS()))
                {
                    s = 67;
                }
                else if ((LA39_43 == LSQUARE) && (synpred19_FTS()))
                {
                    s = 68;
                }
                else if ((LA39_43 == LT) && (synpred19_FTS()))
                {
                    s = 69;
                }
                else if ((LA39_43 == COMMA || LA39_43 == DOT) && (synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((LA39_43 == EQUALS) && (synpred19_FTS()))
                {
                    s = 71;
                }
                else if ((LA39_43 == LPAREN) && (synpred19_FTS()))
                {
                    s = 72;
                }
                else if ((LA39_43 == PERCENT) && (synpred19_FTS()))
                {
                    s = 73;
                }
                else if ((LA39_43 == PLUS) && (synpred19_FTS()))
                {
                    s = 74;
                }
                else if ((LA39_43 == MINUS) && (synpred19_FTS()))
                {
                    s = 75;
                }

                input.seek(index39_43);
                if (s >= 0)
                    return s;
                break;

            case 74:
                int LA39_155 = input.LA(1);

                int index39_155 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_155);
                if (s >= 0)
                    return s;
                break;

            case 75:
                int LA39_208 = input.LA(1);

                int index39_208 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_208);
                if (s >= 0)
                    return s;
                break;

            case 76:
                int LA39_116 = input.LA(1);

                int index39_116 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_116);
                if (s >= 0)
                    return s;
                break;

            case 77:
                int LA39_77 = input.LA(1);

                int index39_77 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_77 == DOT) && (synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((LA39_77 == COLON) && (synpred16_FTS()))
                {
                    s = 44;
                }
                else if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_77);
                if (s >= 0)
                    return s;
                break;

            case 78:
                int LA39_89 = input.LA(1);

                int index39_89 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_89);
                if (s >= 0)
                    return s;
                break;

            case 79:
                int LA39_144 = input.LA(1);

                int index39_144 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_144);
                if (s >= 0)
                    return s;
                break;

            case 80:
                int LA39_163 = input.LA(1);

                int index39_163 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_163);
                if (s >= 0)
                    return s;
                break;

            case 81:
                int LA39_188 = input.LA(1);

                int index39_188 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_188);
                if (s >= 0)
                    return s;
                break;

            case 82:
                int LA39_78 = input.LA(1);

                int index39_78 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_78 == COLON) && (synpred16_FTS()))
                {
                    s = 44;
                }
                else if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_78);
                if (s >= 0)
                    return s;
                break;

            case 83:
                int LA39_162 = input.LA(1);

                int index39_162 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_162);
                if (s >= 0)
                    return s;
                break;

            case 84:
                int LA39_196 = input.LA(1);

                int index39_196 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_196);
                if (s >= 0)
                    return s;
                break;

            case 85:
                int LA39_16 = input.LA(1);

                int index39_16 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_16 == DOT))
                {
                    s = 39;
                }
                else if ((LA39_16 == COLON) && (synpred19_FTS()))
                {
                    s = 40;
                }
                else if ((LA39_16 == EOF || (LA39_16 >= AMP && LA39_16 <= BAR) || LA39_16 == CARAT || LA39_16 == COMMA || LA39_16 == DATETIME || LA39_16 == DECIMAL_INTEGER_LITERAL || LA39_16 == EQUALS || LA39_16 == EXCLAMATION || LA39_16 == FLOATING_POINT_LITERAL || (LA39_16 >= FTSPHRASE && LA39_16 <= FTSWORD) || LA39_16 == ID || (LA39_16 >= LPAREN && LA39_16 <= LT) || LA39_16 == MINUS || LA39_16 == NOT || (LA39_16 >= OR && LA39_16 <= PERCENT) || LA39_16 == PLUS || LA39_16 == QUESTION_MARK || LA39_16 == RPAREN || LA39_16 == STAR || (LA39_16 >= TILDA && LA39_16 <= TO) || LA39_16 == URI))
                {
                    s = 9;
                }

                input.seek(index39_16);
                if (s >= 0)
                    return s;
                break;

            case 86:
                int LA39_1 = input.LA(1);

                int index39_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA39_1 == ID))
                {
                    s = 10;
                }
                else if ((LA39_1 == TO))
                {
                    s = 11;
                }
                else if ((LA39_1 == OR))
                {
                    s = 4;
                }
                else if ((LA39_1 == AND))
                {
                    s = 5;
                }
                else if ((LA39_1 == NOT))
                {
                    s = 12;
                }
                else if ((LA39_1 == URI) && (synpred19_FTS()))
                {
                    s = 13;
                }

                input.seek(index39_1);
                if (s >= 0)
                    return s;
                break;

            case 87:
                int LA39_124 = input.LA(1);

                int index39_124 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_124);
                if (s >= 0)
                    return s;
                break;

            case 88:
                int LA39_90 = input.LA(1);

                int index39_90 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_90);
                if (s >= 0)
                    return s;
                break;

            case 89:
                int LA39_145 = input.LA(1);

                int index39_145 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_145);
                if (s >= 0)
                    return s;
                break;

            case 90:
                int LA39_195 = input.LA(1);

                int index39_195 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_195);
                if (s >= 0)
                    return s;
                break;

            case 91:
                int LA39_218 = input.LA(1);

                int index39_218 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_218);
                if (s >= 0)
                    return s;
                break;

            case 92:
                int LA39_189 = input.LA(1);

                int index39_189 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_189);
                if (s >= 0)
                    return s;
                break;

            case 93:
                int LA39_156 = input.LA(1);

                int index39_156 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_156);
                if (s >= 0)
                    return s;
                break;

            case 94:
                int LA39_209 = input.LA(1);

                int index39_209 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_209);
                if (s >= 0)
                    return s;
                break;

            case 95:
                int LA39_147 = input.LA(1);

                int index39_147 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_147);
                if (s >= 0)
                    return s;
                break;

            case 96:
                int LA39_198 = input.LA(1);

                int index39_198 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_198);
                if (s >= 0)
                    return s;
                break;

            case 97:
                int LA39_200 = input.LA(1);

                int index39_200 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_200);
                if (s >= 0)
                    return s;
                break;

            case 98:
                int LA39_164 = input.LA(1);

                int index39_164 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_164);
                if (s >= 0)
                    return s;
                break;

            case 99:
                int LA39_136 = input.LA(1);

                int index39_136 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_136);
                if (s >= 0)
                    return s;
                break;

            case 100:
                int LA39_179 = input.LA(1);

                int index39_179 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_179);
                if (s >= 0)
                    return s;
                break;

            case 101:
                int LA39_197 = input.LA(1);

                int index39_197 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_197);
                if (s >= 0)
                    return s;
                break;

            case 102:
                int LA39_117 = input.LA(1);

                int index39_117 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_117);
                if (s >= 0)
                    return s;
                break;

            case 103:
                int LA39_170 = input.LA(1);

                int index39_170 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_170);
                if (s >= 0)
                    return s;
                break;

            case 104:
                int LA39_125 = input.LA(1);

                int index39_125 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_125);
                if (s >= 0)
                    return s;
                break;

            case 105:
                int LA39_165 = input.LA(1);

                int index39_165 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_165);
                if (s >= 0)
                    return s;
                break;

            case 106:
                int LA39_109 = input.LA(1);

                int index39_109 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_109);
                if (s >= 0)
                    return s;
                break;

            case 107:
                int LA39_190 = input.LA(1);

                int index39_190 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_190);
                if (s >= 0)
                    return s;
                break;

            case 108:
                int LA39_157 = input.LA(1);

                int index39_157 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_157);
                if (s >= 0)
                    return s;
                break;

            case 109:
                int LA39_219 = input.LA(1);

                int index39_219 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_219);
                if (s >= 0)
                    return s;
                break;

            case 110:
                int LA39_161 = input.LA(1);

                int index39_161 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_161);
                if (s >= 0)
                    return s;
                break;

            case 111:
                int LA39_212 = input.LA(1);

                int index39_212 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_212);
                if (s >= 0)
                    return s;
                break;

            case 112:
                int LA39_199 = input.LA(1);

                int index39_199 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_199);
                if (s >= 0)
                    return s;
                break;

            case 113:
                int LA39_201 = input.LA(1);

                int index39_201 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_201);
                if (s >= 0)
                    return s;
                break;

            case 114:
                int LA39_173 = input.LA(1);

                int index39_173 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_173);
                if (s >= 0)
                    return s;
                break;

            case 115:
                int LA39_91 = input.LA(1);

                int index39_91 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_91);
                if (s >= 0)
                    return s;
                break;

            case 116:
                int LA39_146 = input.LA(1);

                int index39_146 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_146);
                if (s >= 0)
                    return s;
                break;

            case 117:
                int LA39_171 = input.LA(1);

                int index39_171 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_171);
                if (s >= 0)
                    return s;
                break;

            case 118:
                int LA39_174 = input.LA(1);

                int index39_174 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_174);
                if (s >= 0)
                    return s;
                break;

            case 119:
                int LA39_210 = input.LA(1);

                int index39_210 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((synpred19_FTS()))
                {
                    s = 182;
                }

                input.seek(index39_210);
                if (s >= 0)
                    return s;
                break;

            case 120:
                int LA39_84 = input.LA(1);

                int index39_84 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_84);
                if (s >= 0)
                    return s;
                break;

            case 121:
                int LA39_118 = input.LA(1);

                int index39_118 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_118);
                if (s >= 0)
                    return s;
                break;

            case 122:
                int LA39_137 = input.LA(1);

                int index39_137 = input.index();
                input.rewind();
                s = -1;
                if ((synpred19_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_137);
                if (s >= 0)
                    return s;
                break;

            case 123:
                int LA39_158 = input.LA(1);

                int index39_158 = input.index();
                input.rewind();
                s = -1;
                if ((synpred16_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index39_158);
                if (s >= 0)
                    return s;
                break;
            }
            if (state.backtracking > 0)
            {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA48_eotS = "\u00e3\uffff";
    static final String DFA48_eofS = "\2\uffff\2\11\2\uffff\1\11\7\uffff\1\11\1\uffff\5\11\1\uffff\1\11\2\62" +
            "\2\uffff\1\62\13\uffff\1\11\3\uffff\1\62\40\uffff\1\11\20\uffff\1\62\u0085" +
            "\uffff";
    static final String DFA48_minS = "\2\5\2\4\2\12\1\4\1\5\2\uffff\3\12\1\uffff\1\4\1\5\5\4\1\77\3\4\2\uffff" +
            "\1\4\13\uffff\1\4\1\uffff\1\12\1\5\1\4\40\uffff\1\4\5\12\1\0\1\15\10\0" +
            "\1\5\1\4\14\uffff\1\5\1\uffff\1\13\13\0\1\5\5\0\1\uffff\1\5\7\uffff\15" +
            "\0\1\15\13\0\1\5\5\0\1\uffff\1\0\1\15\13\0\1\5\2\uffff\13\0\1\5\20\0\1" +
            "\5\17\0";
    static final String DFA48_maxS = "\4\150\2\12\1\150\1\146\2\uffff\1\25\2\12\1\uffff\7\150\1\77\3\150\2\uffff" +
            "\1\150\13\uffff\1\150\1\uffff\1\12\2\150\40\uffff\1\150\1\25\4\12\1\0" +
            "\1\150\10\0\1\146\1\150\14\uffff\1\150\1\uffff\1\150\13\0\1\146\5\0\1" +
            "\uffff\1\150\7\uffff\15\0\1\150\13\0\1\146\5\0\1\uffff\1\0\1\150\13\0" +
            "\1\146\2\uffff\13\0\1\146\20\0\1\146\17\0";
    static final String DFA48_acceptS = "\10\uffff\1\3\1\4\3\uffff\1\2\13\uffff\2\1\1\uffff\13\2\1\uffff\1\2\3" +
            "\uffff\1\1\37\2\22\uffff\14\2\1\uffff\1\1\22\uffff\1\2\1\uffff\7\2\37" +
            "\uffff\1\2\16\uffff\2\2\54\uffff";
    static final String DFA48_specialS = "\1\uffff\1\136\15\uffff\1\64\1\34\1\133\1\145\1\144\1\152\2\uffff\1\20" +
            "\1\166\2\uffff\1\165\17\uffff\1\31\41\uffff\1\40\1\52\2\uffff\1\41\1\172" +
            "\1\uffff\1\45\1\77\1\111\1\167\1\16\1\27\1\2\1\53\1\uffff\1\162\17\uffff" +
            "\1\110\1\123\1\113\1\131\1\142\1\160\1\15\1\26\1\61\1\46\1\70\1\uffff" +
            "\1\157\1\164\1\11\1\32\1\24\1\uffff\1\5\7\uffff\1\173\1\63\1\47\1\100" +
            "\1\112\1\134\1\137\1\170\1\17\1\30\1\3\1\54\1\60\1\uffff\1\76\1\115\1" +
            "\125\1\141\1\140\1\161\1\36\1\56\1\102\1\50\1\121\1\uffff\1\71\1\6\1\22" +
            "\1\62\1\107\1\uffff\1\35\1\uffff\1\154\1\23\1\55\1\67\1\51\1\104\1\153" +
            "\1\171\1\7\1\10\1\25\3\uffff\1\132\1\151\1\146\1\163\1\1\1\33\1\66\1\101" +
            "\1\74\1\116\1\126\1\uffff\1\4\1\0\1\21\1\42\1\105\1\43\1\106\1\122\1\135" +
            "\1\130\1\147\1\156\1\13\1\37\1\57\1\44\1\uffff\1\72\1\75\1\117\1\124\1" +
            "\143\1\114\1\65\1\103\1\73\1\120\1\12\1\127\1\150\1\155\1\14}>";
    static final String[] DFA48_transitionS = {
            "\1\5\1\1\4\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11\31\uffff" +
                    "\1\11\2\uffff\1\10\3\11\11\uffff\1\2\16\uffff\1\6\2\uffff\1\4\6\uffff" +
                    "\1\11\7\uffff\1\11\5\uffff\1\3\1\uffff\1\7",
            "\1\5\71\uffff\1\12\16\uffff\1\14\2\uffff\1\4\24\uffff\1\13\1\uffff\1" +
                    "\15",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\16" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\17",
            "\1\17",
            "\4\11\1\uffff\1\11\1\17\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\23\71\uffff\1\20\16\uffff\1\24\2\uffff\1\22\24\uffff\1\21",
            "",
            "",
            "\1\17\12\uffff\1\25",
            "\1\17",
            "\1\17",
            "",
            "\4\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1" +
                    "\11\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\26" +
                    "\3\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\32\5\uffff\1\35\1\uffff\1\45\1\uffff\1\41\5\uffff\1\35\31\uffff\1" +
                    "\42\2\uffff\1\34\1\37\1\40\1\36\11\uffff\1\27\16\uffff\1\33\2\uffff\1" +
                    "\31\6\uffff\1\44\7\uffff\1\43\5\uffff\1\30\1\uffff\1\46",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\47" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\4\11\1\uffff\1\11\1\50\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1\11" +
                    "\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\51",
            "\4\11\1\uffff\1\11\1\52\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\2\11" +
                    "\1\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\54\1\55\1\uffff\1\77\1\uffff\1" +
                    "\75\5\uffff\1\53\2\uffff\1\107\2\uffff\1\73\23\uffff\1\76\2\uffff\1\103" +
                    "\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110\1\104\1\105\2\uffff\1\113" +
                    "\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\106\2\uffff" +
                    "\1\63\4\uffff\1\100\4\uffff\1\56\1\74\1\uffff\1\101",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\54\1\55\1\uffff\1\77\1\uffff\1" +
                    "\75\5\uffff\1\55\2\uffff\1\107\2\uffff\1\73\23\uffff\1\76\2\uffff\1\103" +
                    "\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110\1\104\1\105\2\uffff\1\113" +
                    "\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\106\2\uffff" +
                    "\1\63\4\uffff\1\100\4\uffff\1\56\1\74\1\uffff\1\101",
            "",
            "",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\54\1\55\1\uffff\1\77\1\uffff\1" +
                    "\75\5\uffff\1\55\2\uffff\1\107\2\uffff\1\73\23\uffff\1\76\2\uffff\1\103" +
                    "\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110\1\104\1\105\2\uffff\1\113" +
                    "\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\106\2\uffff" +
                    "\1\63\4\uffff\1\100\4\uffff\1\56\1\74\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\1" +
                    "\11\2\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\114" +
                    "\3\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "",
            "\1\17",
            "\1\120\5\uffff\1\123\1\uffff\1\133\1\uffff\1\127\5\uffff\1\123\31\uffff" +
                    "\1\130\2\uffff\1\122\1\125\1\126\1\124\11\uffff\1\115\3\uffff\3\11\10" +
                    "\uffff\1\121\2\uffff\1\117\6\uffff\1\132\7\uffff\1\131\5\uffff\1\116" +
                    "\1\uffff\1\134",
            "\1\61\1\60\1\102\1\65\1\uffff\1\57\1\uffff\1\151\1\uffff\1\147\1\uffff" +
                    "\1\143\5\uffff\1\151\2\uffff\1\107\2\uffff\1\73\23\uffff\1\144\2\uffff" +
                    "\1\103\1\137\1\140\1\136\11\uffff\1\135\3\uffff\1\110\1\104\1\105\2\uffff" +
                    "\1\113\5\uffff\1\141\2\uffff\1\64\1\111\1\uffff\1\112\3\uffff\1\146\2" +
                    "\uffff\1\63\4\uffff\1\145\4\uffff\1\56\1\142\1\uffff\1\150",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\11\1\uffff\1\11\1\152\1\11\1\uffff\1\11\1\uffff\1\11\5\uffff\2\11" +
                    "\1\uffff\1\11\2\uffff\1\11\23\uffff\1\11\2\uffff\4\11\11\uffff\1\11\3" +
                    "\uffff\3\11\2\uffff\1\11\5\uffff\1\11\2\uffff\2\11\1\uffff\1\11\3\uffff" +
                    "\1\11\2\uffff\1\11\4\uffff\1\11\4\uffff\2\11\1\uffff\1\11",
            "\1\54\12\uffff\1\153",
            "\1\54",
            "\1\154",
            "\1\154",
            "\1\54",
            "\1\uffff",
            "\1\167\1\uffff\1\163\37\uffff\1\164\3\uffff\1\157\1\160\1\156\11\uffff" +
                    "\1\155\16\uffff\1\161\11\uffff\1\166\7\uffff\1\165\5\uffff\1\162\1\uffff" +
                    "\1\170",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\174\71\uffff\1\171\16\uffff\1\175\2\uffff\1\173\24\uffff\1\172",
            "\1\u0084\1\u0083\1\102\1\65\1\uffff\1\u0082\1\177\1\u0080\1\uffff\1" +
                    "\77\1\uffff\1\75\5\uffff\1\176\1\u0086\1\uffff\1\107\2\uffff\1\73\23" +
                    "\uffff\1\76\2\uffff\1\103\1\71\1\72\1\70\11\uffff\1\67\3\uffff\1\110" +
                    "\1\104\1\105\2\uffff\1\113\5\uffff\1\66\2\uffff\1\64\1\111\1\uffff\1" +
                    "\112\3\uffff\1\106\2\uffff\1\63\4\uffff\1\u0085\4\uffff\1\u0081\1\74" +
                    "\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\5\uffff\1\123\1\uffff\1\u0092\1\uffff\1\u008e\5\uffff\1\123\31" +
                    "\uffff\1\u008f\2\uffff\1\u0087\1\u008a\1\u008b\1\u0089\11\uffff\1\u0088" +
                    "\3\uffff\3\11\10\uffff\1\u008c\2\uffff\1\11\6\uffff\1\u0091\7\uffff\1" +
                    "\u0090\5\uffff\1\u008d\1\uffff\1\134",
            "",
            "\1\u0094\1\uffff\1\u009f\1\uffff\1\u009b\5\uffff\1\u0094\31\uffff\1" +
                    "\u009c\2\uffff\1\u0093\1\u0097\1\u0098\1\u0096\11\uffff\1\u0095\3\uffff" +
                    "\3\11\10\uffff\1\u0099\11\uffff\1\u009e\7\uffff\1\u009d\5\uffff\1\u009a" +
                    "\1\uffff\1\u00a0",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a4\71\uffff\1\u00a1\16\uffff\1\u00a5\2\uffff\1\u00a3\24\uffff" +
                    "\1\u00a2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\u00b6\5\uffff\1\u00a8\1\uffff\1\u00b3\1\uffff\1\u00af\5\uffff\1\u00a8" +
                    "\31\uffff\1\u00b0\2\uffff\1\u00a7\1\u00ab\1\u00ac\1\u00aa\11\uffff\1" +
                    "\u00a9\3\uffff\1\u00a6\1\104\1\105\10\uffff\1\u00ad\2\uffff\1\u00b5\6" +
                    "\uffff\1\u00b2\7\uffff\1\u00b1\5\uffff\1\u00ae\1\uffff\1\u00b4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00c1\1\uffff\1\u00bd\37\uffff\1\u00be\3\uffff\1\u00b9\1\u00ba\1" +
                    "\u00b8\11\uffff\1\u00b7\16\uffff\1\u00bb\11\uffff\1\u00c0\7\uffff\1\u00bf" +
                    "\5\uffff\1\u00bc\1\uffff\1\u00c2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00c6\71\uffff\1\u00c3\16\uffff\1\u00c7\2\uffff\1\u00c5\24\uffff" +
                    "\1\u00c4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\u00d2\1\uffff\1\u00ce\37\uffff\1\u00cf\3\uffff\1\u00ca\1\u00cb\1" +
                    "\u00c9\11\uffff\1\u00c8\16\uffff\1\u00cc\11\uffff\1\u00d1\7\uffff\1\u00d0" +
                    "\5\uffff\1\u00cd\1\uffff\1\u00d3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00d7\71\uffff\1\u00d4\16\uffff\1\u00d8\2\uffff\1\u00d6\24\uffff" +
                    "\1\u00d5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00dc\71\uffff\1\u00d9\16\uffff\1\u00dd\2\uffff\1\u00db\24\uffff" +
                    "\1\u00da",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u00e1\71\uffff\1\u00de\16\uffff\1\u00e2\2\uffff\1\u00e0\24\uffff" +
                    "\1\u00df",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static
    {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++)
        {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    protected class DFA48 extends DFA
    {

        public DFA48(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }

        @Override
        public String getDescription()
        {
            return "574:9: ( ( fieldReferenceWithPrefix COLON )=> fieldReferenceWithPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithPrefix ( fuzzy )? ) ) | ( fieldReferenceWithoutPrefix COLON )=> fieldReferenceWithoutPrefix COLON ( FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE fieldReferenceWithoutPrefix ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord fieldReferenceWithoutPrefix ( fuzzy )? ) ) | FTSPHRASE ( ( slop )=> slop )? -> ^( PHRASE FTSPHRASE ( slop )? ) | ftsWord ( ( fuzzy )=> fuzzy )? -> ^( TERM ftsWord ( fuzzy )? ) )";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException
        {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s)
            {
            case 0:
                int LA48_196 = input.LA(1);

                int index48_196 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_196);
                if (s >= 0)
                    return s;
                break;

            case 1:
                int LA48_187 = input.LA(1);

                int index48_187 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_187);
                if (s >= 0)
                    return s;
                break;

            case 2:
                int LA48_90 = input.LA(1);

                int index48_90 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_90);
                if (s >= 0)
                    return s;
                break;

            case 3:
                int LA48_145 = input.LA(1);

                int index48_145 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_145);
                if (s >= 0)
                    return s;
                break;

            case 4:
                int LA48_195 = input.LA(1);

                int index48_195 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_195);
                if (s >= 0)
                    return s;
                break;

            case 5:
                int LA48_127 = input.LA(1);

                int index48_127 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_127 == LPAREN) && (synpred27_FTS()))
                {
                    s = 166;
                }
                else if ((LA48_127 == FTSPHRASE))
                {
                    s = 167;
                }
                else if ((LA48_127 == COMMA || LA48_127 == DOT))
                {
                    s = 168;
                }
                else if ((LA48_127 == ID))
                {
                    s = 169;
                }
                else if ((LA48_127 == FTSWORD))
                {
                    s = 170;
                }
                else if ((LA48_127 == FTSPRE))
                {
                    s = 171;
                }
                else if ((LA48_127 == FTSWILD))
                {
                    s = 172;
                }
                else if ((LA48_127 == NOT))
                {
                    s = 173;
                }
                else if ((LA48_127 == TO))
                {
                    s = 174;
                }
                else if ((LA48_127 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 175;
                }
                else if ((LA48_127 == FLOATING_POINT_LITERAL))
                {
                    s = 176;
                }
                else if ((LA48_127 == STAR))
                {
                    s = 177;
                }
                else if ((LA48_127 == QUESTION_MARK))
                {
                    s = 178;
                }
                else if ((LA48_127 == DATETIME))
                {
                    s = 179;
                }
                else if ((LA48_127 == URI))
                {
                    s = 180;
                }
                else if ((LA48_127 == OR) && (synpred27_FTS()))
                {
                    s = 181;
                }
                else if ((LA48_127 == AND) && (synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((LA48_127 == LSQUARE) && (synpred27_FTS()))
                {
                    s = 68;
                }
                else if ((LA48_127 == LT) && (synpred27_FTS()))
                {
                    s = 69;
                }

                input.seek(index48_127);
                if (s >= 0)
                    return s;
                break;

            case 6:
                int LA48_162 = input.LA(1);

                int index48_162 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_162);
                if (s >= 0)
                    return s;
                break;

            case 7:
                int LA48_177 = input.LA(1);

                int index48_177 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_177);
                if (s >= 0)
                    return s;
                break;

            case 8:
                int LA48_178 = input.LA(1);

                int index48_178 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_178);
                if (s >= 0)
                    return s;
                break;

            case 9:
                int LA48_123 = input.LA(1);

                int index48_123 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_123);
                if (s >= 0)
                    return s;
                break;

            case 10:
                int LA48_222 = input.LA(1);

                int index48_222 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_222);
                if (s >= 0)
                    return s;
                break;

            case 11:
                int LA48_207 = input.LA(1);

                int index48_207 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_207);
                if (s >= 0)
                    return s;
                break;

            case 12:
                int LA48_226 = input.LA(1);

                int index48_226 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_226);
                if (s >= 0)
                    return s;
                break;

            case 13:
                int LA48_115 = input.LA(1);

                int index48_115 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_115);
                if (s >= 0)
                    return s;
                break;

            case 14:
                int LA48_88 = input.LA(1);

                int index48_88 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_88);
                if (s >= 0)
                    return s;
                break;

            case 15:
                int LA48_143 = input.LA(1);

                int index48_143 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_143);
                if (s >= 0)
                    return s;
                break;

            case 16:
                int LA48_23 = input.LA(1);

                int index48_23 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_23 == DOT))
                {
                    s = 43;
                }
                else if ((LA48_23 == COLON) && (synpred24_FTS()))
                {
                    s = 44;
                }
                else if ((LA48_23 == COMMA) && (synpred27_FTS()))
                {
                    s = 45;
                }
                else if ((LA48_23 == TILDA) && (synpred27_FTS()))
                {
                    s = 46;
                }
                else if ((LA48_23 == CARAT) && (synpred27_FTS()))
                {
                    s = 47;
                }
                else if ((LA48_23 == AND) && (synpred27_FTS()))
                {
                    s = 48;
                }
                else if ((LA48_23 == AMP) && (synpred27_FTS()))
                {
                    s = 49;
                }
                else if ((LA48_23 == EOF) && (synpred27_FTS()))
                {
                    s = 50;
                }
                else if ((LA48_23 == RPAREN) && (synpred27_FTS()))
                {
                    s = 51;
                }
                else if ((LA48_23 == OR) && (synpred27_FTS()))
                {
                    s = 52;
                }
                else if ((LA48_23 == BAR) && (synpred27_FTS()))
                {
                    s = 53;
                }
                else if ((LA48_23 == NOT) && (synpred27_FTS()))
                {
                    s = 54;
                }
                else if ((LA48_23 == ID) && (synpred27_FTS()))
                {
                    s = 55;
                }
                else if ((LA48_23 == FTSWORD) && (synpred27_FTS()))
                {
                    s = 56;
                }
                else if ((LA48_23 == FTSPRE) && (synpred27_FTS()))
                {
                    s = 57;
                }
                else if ((LA48_23 == FTSWILD) && (synpred27_FTS()))
                {
                    s = 58;
                }
                else if ((LA48_23 == EXCLAMATION) && (synpred27_FTS()))
                {
                    s = 59;
                }
                else if ((LA48_23 == TO) && (synpred27_FTS()))
                {
                    s = 60;
                }
                else if ((LA48_23 == DECIMAL_INTEGER_LITERAL) && (synpred27_FTS()))
                {
                    s = 61;
                }
                else if ((LA48_23 == FLOATING_POINT_LITERAL) && (synpred27_FTS()))
                {
                    s = 62;
                }
                else if ((LA48_23 == DATETIME) && (synpred27_FTS()))
                {
                    s = 63;
                }
                else if ((LA48_23 == STAR) && (synpred27_FTS()))
                {
                    s = 64;
                }
                else if ((LA48_23 == URI) && (synpred27_FTS()))
                {
                    s = 65;
                }
                else if ((LA48_23 == AT) && (synpred27_FTS()))
                {
                    s = 66;
                }
                else if ((LA48_23 == FTSPHRASE) && (synpred27_FTS()))
                {
                    s = 67;
                }
                else if ((LA48_23 == LSQUARE) && (synpred27_FTS()))
                {
                    s = 68;
                }
                else if ((LA48_23 == LT) && (synpred27_FTS()))
                {
                    s = 69;
                }
                else if ((LA48_23 == QUESTION_MARK) && (synpred27_FTS()))
                {
                    s = 70;
                }
                else if ((LA48_23 == EQUALS) && (synpred27_FTS()))
                {
                    s = 71;
                }
                else if ((LA48_23 == LPAREN) && (synpred27_FTS()))
                {
                    s = 72;
                }
                else if ((LA48_23 == PERCENT) && (synpred27_FTS()))
                {
                    s = 73;
                }
                else if ((LA48_23 == PLUS) && (synpred27_FTS()))
                {
                    s = 74;
                }
                else if ((LA48_23 == MINUS) && (synpred27_FTS()))
                {
                    s = 75;
                }

                input.seek(index48_23);
                if (s >= 0)
                    return s;
                break;

            case 17:
                int LA48_197 = input.LA(1);

                int index48_197 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_197);
                if (s >= 0)
                    return s;
                break;

            case 18:
                int LA48_163 = input.LA(1);

                int index48_163 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_163);
                if (s >= 0)
                    return s;
                break;

            case 19:
                int LA48_170 = input.LA(1);

                int index48_170 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_170);
                if (s >= 0)
                    return s;
                break;

            case 20:
                int LA48_125 = input.LA(1);

                int index48_125 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_125);
                if (s >= 0)
                    return s;
                break;

            case 21:
                int LA48_179 = input.LA(1);

                int index48_179 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_179);
                if (s >= 0)
                    return s;
                break;

            case 22:
                int LA48_116 = input.LA(1);

                int index48_116 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_116);
                if (s >= 0)
                    return s;
                break;

            case 23:
                int LA48_89 = input.LA(1);

                int index48_89 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_89);
                if (s >= 0)
                    return s;
                break;

            case 24:
                int LA48_144 = input.LA(1);

                int index48_144 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_144);
                if (s >= 0)
                    return s;
                break;

            case 25:
                int LA48_43 = input.LA(1);

                int index48_43 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_43 == ID))
                {
                    s = 93;
                }
                else if ((LA48_43 == FTSWORD) && (synpred27_FTS()))
                {
                    s = 94;
                }
                else if ((LA48_43 == FTSPRE) && (synpred27_FTS()))
                {
                    s = 95;
                }
                else if ((LA48_43 == FTSWILD) && (synpred27_FTS()))
                {
                    s = 96;
                }
                else if ((LA48_43 == NOT) && (synpred27_FTS()))
                {
                    s = 97;
                }
                else if ((LA48_43 == TO) && (synpred27_FTS()))
                {
                    s = 98;
                }
                else if ((LA48_43 == DECIMAL_INTEGER_LITERAL) && (synpred27_FTS()))
                {
                    s = 99;
                }
                else if ((LA48_43 == FLOATING_POINT_LITERAL) && (synpred27_FTS()))
                {
                    s = 100;
                }
                else if ((LA48_43 == STAR) && (synpred27_FTS()))
                {
                    s = 101;
                }
                else if ((LA48_43 == QUESTION_MARK) && (synpred27_FTS()))
                {
                    s = 102;
                }
                else if ((LA48_43 == DATETIME) && (synpred27_FTS()))
                {
                    s = 103;
                }
                else if ((LA48_43 == URI) && (synpred27_FTS()))
                {
                    s = 104;
                }
                else if ((LA48_43 == TILDA) && (synpred27_FTS()))
                {
                    s = 46;
                }
                else if ((LA48_43 == CARAT) && (synpred27_FTS()))
                {
                    s = 47;
                }
                else if ((LA48_43 == AND) && (synpred27_FTS()))
                {
                    s = 48;
                }
                else if ((LA48_43 == AMP) && (synpred27_FTS()))
                {
                    s = 49;
                }
                else if ((LA48_43 == EOF) && (synpred27_FTS()))
                {
                    s = 50;
                }
                else if ((LA48_43 == RPAREN) && (synpred27_FTS()))
                {
                    s = 51;
                }
                else if ((LA48_43 == OR) && (synpred27_FTS()))
                {
                    s = 52;
                }
                else if ((LA48_43 == BAR) && (synpred27_FTS()))
                {
                    s = 53;
                }
                else if ((LA48_43 == EXCLAMATION) && (synpred27_FTS()))
                {
                    s = 59;
                }
                else if ((LA48_43 == AT) && (synpred27_FTS()))
                {
                    s = 66;
                }
                else if ((LA48_43 == FTSPHRASE) && (synpred27_FTS()))
                {
                    s = 67;
                }
                else if ((LA48_43 == LSQUARE) && (synpred27_FTS()))
                {
                    s = 68;
                }
                else if ((LA48_43 == LT) && (synpred27_FTS()))
                {
                    s = 69;
                }
                else if ((LA48_43 == COMMA || LA48_43 == DOT) && (synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((LA48_43 == EQUALS) && (synpred27_FTS()))
                {
                    s = 71;
                }
                else if ((LA48_43 == LPAREN) && (synpred27_FTS()))
                {
                    s = 72;
                }
                else if ((LA48_43 == PERCENT) && (synpred27_FTS()))
                {
                    s = 73;
                }
                else if ((LA48_43 == PLUS) && (synpred27_FTS()))
                {
                    s = 74;
                }
                else if ((LA48_43 == MINUS) && (synpred27_FTS()))
                {
                    s = 75;
                }

                input.seek(index48_43);
                if (s >= 0)
                    return s;
                break;

            case 26:
                int LA48_124 = input.LA(1);

                int index48_124 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_124);
                if (s >= 0)
                    return s;
                break;

            case 27:
                int LA48_188 = input.LA(1);

                int index48_188 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_188);
                if (s >= 0)
                    return s;
                break;

            case 28:
                int LA48_16 = input.LA(1);

                int index48_16 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_16 == DOT))
                {
                    s = 39;
                }
                else if ((LA48_16 == COLON) && (synpred27_FTS()))
                {
                    s = 40;
                }
                else if ((LA48_16 == EOF || (LA48_16 >= AMP && LA48_16 <= BAR) || LA48_16 == CARAT || LA48_16 == COMMA || LA48_16 == DATETIME || LA48_16 == DECIMAL_INTEGER_LITERAL || LA48_16 == EQUALS || LA48_16 == EXCLAMATION || LA48_16 == FLOATING_POINT_LITERAL || (LA48_16 >= FTSPHRASE && LA48_16 <= FTSWORD) || LA48_16 == ID || (LA48_16 >= LPAREN && LA48_16 <= LT) || LA48_16 == MINUS || LA48_16 == NOT || (LA48_16 >= OR && LA48_16 <= PERCENT) || LA48_16 == PLUS || LA48_16 == QUESTION_MARK || LA48_16 == RPAREN || LA48_16 == STAR || (LA48_16 >= TILDA && LA48_16 <= TO) || LA48_16 == URI))
                {
                    s = 9;
                }

                input.seek(index48_16);
                if (s >= 0)
                    return s;
                break;

            case 29:
                int LA48_167 = input.LA(1);

                int index48_167 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_167);
                if (s >= 0)
                    return s;
                break;

            case 30:
                int LA48_155 = input.LA(1);

                int index48_155 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_155);
                if (s >= 0)
                    return s;
                break;

            case 31:
                int LA48_208 = input.LA(1);

                int index48_208 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_208);
                if (s >= 0)
                    return s;
                break;

            case 32:
                int LA48_77 = input.LA(1);

                int index48_77 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_77 == DOT) && (synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((LA48_77 == COLON) && (synpred24_FTS()))
                {
                    s = 44;
                }
                else if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_77);
                if (s >= 0)
                    return s;
                break;

            case 33:
                int LA48_81 = input.LA(1);

                int index48_81 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_81 == COLON) && (synpred24_FTS()))
                {
                    s = 44;
                }
                else if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_81);
                if (s >= 0)
                    return s;
                break;

            case 34:
                int LA48_198 = input.LA(1);

                int index48_198 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_198);
                if (s >= 0)
                    return s;
                break;

            case 35:
                int LA48_200 = input.LA(1);

                int index48_200 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_200);
                if (s >= 0)
                    return s;
                break;

            case 36:
                int LA48_210 = input.LA(1);

                int index48_210 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_210);
                if (s >= 0)
                    return s;
                break;

            case 37:
                int LA48_84 = input.LA(1);

                int index48_84 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_84);
                if (s >= 0)
                    return s;
                break;

            case 38:
                int LA48_118 = input.LA(1);

                int index48_118 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_118);
                if (s >= 0)
                    return s;
                break;

            case 39:
                int LA48_137 = input.LA(1);

                int index48_137 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_137);
                if (s >= 0)
                    return s;
                break;

            case 40:
                int LA48_158 = input.LA(1);

                int index48_158 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_158);
                if (s >= 0)
                    return s;
                break;

            case 41:
                int LA48_173 = input.LA(1);

                int index48_173 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_173);
                if (s >= 0)
                    return s;
                break;

            case 42:
                int LA48_78 = input.LA(1);

                int index48_78 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_78 == COLON) && (synpred24_FTS()))
                {
                    s = 44;
                }
                else if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_78);
                if (s >= 0)
                    return s;
                break;

            case 43:
                int LA48_91 = input.LA(1);

                int index48_91 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_91);
                if (s >= 0)
                    return s;
                break;

            case 44:
                int LA48_146 = input.LA(1);

                int index48_146 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_146);
                if (s >= 0)
                    return s;
                break;

            case 45:
                int LA48_171 = input.LA(1);

                int index48_171 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_171);
                if (s >= 0)
                    return s;
                break;

            case 46:
                int LA48_156 = input.LA(1);

                int index48_156 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_156);
                if (s >= 0)
                    return s;
                break;

            case 47:
                int LA48_209 = input.LA(1);

                int index48_209 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_209);
                if (s >= 0)
                    return s;
                break;

            case 48:
                int LA48_147 = input.LA(1);

                int index48_147 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_147);
                if (s >= 0)
                    return s;
                break;

            case 49:
                int LA48_117 = input.LA(1);

                int index48_117 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_117);
                if (s >= 0)
                    return s;
                break;

            case 50:
                int LA48_164 = input.LA(1);

                int index48_164 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_164);
                if (s >= 0)
                    return s;
                break;

            case 51:
                int LA48_136 = input.LA(1);

                int index48_136 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_136);
                if (s >= 0)
                    return s;
                break;

            case 52:
                int LA48_15 = input.LA(1);

                int index48_15 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_15 == ID))
                {
                    s = 23;
                }
                else if ((LA48_15 == TO))
                {
                    s = 24;
                }
                else if ((LA48_15 == OR) && (synpred24_FTS()))
                {
                    s = 25;
                }
                else if ((LA48_15 == AND) && (synpred24_FTS()))
                {
                    s = 26;
                }
                else if ((LA48_15 == NOT))
                {
                    s = 27;
                }
                else if ((LA48_15 == FTSPHRASE) && (synpred27_FTS()))
                {
                    s = 28;
                }
                else if ((LA48_15 == COMMA || LA48_15 == DOT) && (synpred27_FTS()))
                {
                    s = 29;
                }
                else if ((LA48_15 == FTSWORD) && (synpred27_FTS()))
                {
                    s = 30;
                }
                else if ((LA48_15 == FTSPRE) && (synpred27_FTS()))
                {
                    s = 31;
                }
                else if ((LA48_15 == FTSWILD) && (synpred27_FTS()))
                {
                    s = 32;
                }
                else if ((LA48_15 == DECIMAL_INTEGER_LITERAL) && (synpred27_FTS()))
                {
                    s = 33;
                }
                else if ((LA48_15 == FLOATING_POINT_LITERAL) && (synpred27_FTS()))
                {
                    s = 34;
                }
                else if ((LA48_15 == STAR) && (synpred27_FTS()))
                {
                    s = 35;
                }
                else if ((LA48_15 == QUESTION_MARK) && (synpred27_FTS()))
                {
                    s = 36;
                }
                else if ((LA48_15 == DATETIME) && (synpred27_FTS()))
                {
                    s = 37;
                }
                else if ((LA48_15 == URI) && (synpred27_FTS()))
                {
                    s = 38;
                }

                input.seek(index48_15);
                if (s >= 0)
                    return s;
                break;

            case 53:
                int LA48_218 = input.LA(1);

                int index48_218 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_218);
                if (s >= 0)
                    return s;
                break;

            case 54:
                int LA48_189 = input.LA(1);

                int index48_189 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_189);
                if (s >= 0)
                    return s;
                break;

            case 55:
                int LA48_172 = input.LA(1);

                int index48_172 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_172);
                if (s >= 0)
                    return s;
                break;

            case 56:
                int LA48_119 = input.LA(1);

                int index48_119 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_119);
                if (s >= 0)
                    return s;
                break;

            case 57:
                int LA48_161 = input.LA(1);

                int index48_161 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_161);
                if (s >= 0)
                    return s;
                break;

            case 58:
                int LA48_212 = input.LA(1);

                int index48_212 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_212);
                if (s >= 0)
                    return s;
                break;

            case 59:
                int LA48_220 = input.LA(1);

                int index48_220 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_220);
                if (s >= 0)
                    return s;
                break;

            case 60:
                int LA48_191 = input.LA(1);

                int index48_191 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_191);
                if (s >= 0)
                    return s;
                break;

            case 61:
                int LA48_213 = input.LA(1);

                int index48_213 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_213);
                if (s >= 0)
                    return s;
                break;

            case 62:
                int LA48_149 = input.LA(1);

                int index48_149 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_149);
                if (s >= 0)
                    return s;
                break;

            case 63:
                int LA48_85 = input.LA(1);

                int index48_85 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_85);
                if (s >= 0)
                    return s;
                break;

            case 64:
                int LA48_138 = input.LA(1);

                int index48_138 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_138);
                if (s >= 0)
                    return s;
                break;

            case 65:
                int LA48_190 = input.LA(1);

                int index48_190 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_190);
                if (s >= 0)
                    return s;
                break;

            case 66:
                int LA48_157 = input.LA(1);

                int index48_157 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_157);
                if (s >= 0)
                    return s;
                break;

            case 67:
                int LA48_219 = input.LA(1);

                int index48_219 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_219);
                if (s >= 0)
                    return s;
                break;

            case 68:
                int LA48_174 = input.LA(1);

                int index48_174 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_174);
                if (s >= 0)
                    return s;
                break;

            case 69:
                int LA48_199 = input.LA(1);

                int index48_199 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_199);
                if (s >= 0)
                    return s;
                break;

            case 70:
                int LA48_201 = input.LA(1);

                int index48_201 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_201);
                if (s >= 0)
                    return s;
                break;

            case 71:
                int LA48_165 = input.LA(1);

                int index48_165 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_165);
                if (s >= 0)
                    return s;
                break;

            case 72:
                int LA48_109 = input.LA(1);

                int index48_109 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_109);
                if (s >= 0)
                    return s;
                break;

            case 73:
                int LA48_86 = input.LA(1);

                int index48_86 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_86);
                if (s >= 0)
                    return s;
                break;

            case 74:
                int LA48_139 = input.LA(1);

                int index48_139 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_139);
                if (s >= 0)
                    return s;
                break;

            case 75:
                int LA48_111 = input.LA(1);

                int index48_111 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_111);
                if (s >= 0)
                    return s;
                break;

            case 76:
                int LA48_217 = input.LA(1);

                int index48_217 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_217);
                if (s >= 0)
                    return s;
                break;

            case 77:
                int LA48_150 = input.LA(1);

                int index48_150 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_150);
                if (s >= 0)
                    return s;
                break;

            case 78:
                int LA48_192 = input.LA(1);

                int index48_192 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_192);
                if (s >= 0)
                    return s;
                break;

            case 79:
                int LA48_214 = input.LA(1);

                int index48_214 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_214);
                if (s >= 0)
                    return s;
                break;

            case 80:
                int LA48_221 = input.LA(1);

                int index48_221 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_221);
                if (s >= 0)
                    return s;
                break;

            case 81:
                int LA48_159 = input.LA(1);

                int index48_159 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_159);
                if (s >= 0)
                    return s;
                break;

            case 82:
                int LA48_202 = input.LA(1);

                int index48_202 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_202);
                if (s >= 0)
                    return s;
                break;

            case 83:
                int LA48_110 = input.LA(1);

                int index48_110 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_110);
                if (s >= 0)
                    return s;
                break;

            case 84:
                int LA48_215 = input.LA(1);

                int index48_215 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_215);
                if (s >= 0)
                    return s;
                break;

            case 85:
                int LA48_151 = input.LA(1);

                int index48_151 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_151);
                if (s >= 0)
                    return s;
                break;

            case 86:
                int LA48_193 = input.LA(1);

                int index48_193 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_193);
                if (s >= 0)
                    return s;
                break;

            case 87:
                int LA48_223 = input.LA(1);

                int index48_223 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_223);
                if (s >= 0)
                    return s;
                break;

            case 88:
                int LA48_204 = input.LA(1);

                int index48_204 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_204);
                if (s >= 0)
                    return s;
                break;

            case 89:
                int LA48_112 = input.LA(1);

                int index48_112 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_112);
                if (s >= 0)
                    return s;
                break;

            case 90:
                int LA48_183 = input.LA(1);

                int index48_183 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_183);
                if (s >= 0)
                    return s;
                break;

            case 91:
                int LA48_17 = input.LA(1);

                int index48_17 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_17 == COLON) && (synpred27_FTS()))
                {
                    s = 40;
                }
                else if ((LA48_17 == EOF || (LA48_17 >= AMP && LA48_17 <= BAR) || LA48_17 == CARAT || LA48_17 == COMMA || LA48_17 == DATETIME || LA48_17 == DECIMAL_INTEGER_LITERAL || LA48_17 == DOT || LA48_17 == EQUALS || LA48_17 == EXCLAMATION || LA48_17 == FLOATING_POINT_LITERAL || (LA48_17 >= FTSPHRASE && LA48_17 <= FTSWORD) || LA48_17 == ID || (LA48_17 >= LPAREN && LA48_17 <= LT) || LA48_17 == MINUS || LA48_17 == NOT || (LA48_17 >= OR && LA48_17 <= PERCENT) || LA48_17 == PLUS || LA48_17 == QUESTION_MARK || LA48_17 == RPAREN || LA48_17 == STAR || (LA48_17 >= TILDA && LA48_17 <= TO) || LA48_17 == URI))
                {
                    s = 9;
                }

                input.seek(index48_17);
                if (s >= 0)
                    return s;
                break;

            case 92:
                int LA48_140 = input.LA(1);

                int index48_140 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_140);
                if (s >= 0)
                    return s;
                break;

            case 93:
                int LA48_203 = input.LA(1);

                int index48_203 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_203);
                if (s >= 0)
                    return s;
                break;

            case 94:
                int LA48_1 = input.LA(1);

                int index48_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_1 == ID))
                {
                    s = 10;
                }
                else if ((LA48_1 == TO))
                {
                    s = 11;
                }
                else if ((LA48_1 == OR))
                {
                    s = 4;
                }
                else if ((LA48_1 == AND))
                {
                    s = 5;
                }
                else if ((LA48_1 == NOT))
                {
                    s = 12;
                }
                else if ((LA48_1 == URI) && (synpred27_FTS()))
                {
                    s = 13;
                }

                input.seek(index48_1);
                if (s >= 0)
                    return s;
                break;

            case 95:
                int LA48_141 = input.LA(1);

                int index48_141 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_141);
                if (s >= 0)
                    return s;
                break;

            case 96:
                int LA48_153 = input.LA(1);

                int index48_153 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_153);
                if (s >= 0)
                    return s;
                break;

            case 97:
                int LA48_152 = input.LA(1);

                int index48_152 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_152);
                if (s >= 0)
                    return s;
                break;

            case 98:
                int LA48_113 = input.LA(1);

                int index48_113 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_113);
                if (s >= 0)
                    return s;
                break;

            case 99:
                int LA48_216 = input.LA(1);

                int index48_216 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_216);
                if (s >= 0)
                    return s;
                break;

            case 100:
                int LA48_19 = input.LA(1);

                int index48_19 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_19 == COLON) && (synpred27_FTS()))
                {
                    s = 40;
                }
                else if ((LA48_19 == EOF || (LA48_19 >= AMP && LA48_19 <= BAR) || LA48_19 == CARAT || LA48_19 == COMMA || LA48_19 == DATETIME || LA48_19 == DECIMAL_INTEGER_LITERAL || LA48_19 == DOT || LA48_19 == EQUALS || LA48_19 == EXCLAMATION || LA48_19 == FLOATING_POINT_LITERAL || (LA48_19 >= FTSPHRASE && LA48_19 <= FTSWORD) || LA48_19 == ID || (LA48_19 >= LPAREN && LA48_19 <= LT) || LA48_19 == MINUS || LA48_19 == NOT || (LA48_19 >= OR && LA48_19 <= PERCENT) || LA48_19 == PLUS || LA48_19 == QUESTION_MARK || LA48_19 == RPAREN || LA48_19 == STAR || (LA48_19 >= TILDA && LA48_19 <= TO) || LA48_19 == URI))
                {
                    s = 9;
                }

                input.seek(index48_19);
                if (s >= 0)
                    return s;
                break;

            case 101:
                int LA48_18 = input.LA(1);

                int index48_18 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_18 == COLON) && (synpred27_FTS()))
                {
                    s = 40;
                }
                else if ((LA48_18 == EOF || (LA48_18 >= AMP && LA48_18 <= BAR) || LA48_18 == CARAT || LA48_18 == COMMA || LA48_18 == DATETIME || LA48_18 == DECIMAL_INTEGER_LITERAL || LA48_18 == DOT || LA48_18 == EQUALS || LA48_18 == EXCLAMATION || LA48_18 == FLOATING_POINT_LITERAL || (LA48_18 >= FTSPHRASE && LA48_18 <= FTSWORD) || LA48_18 == ID || (LA48_18 >= LPAREN && LA48_18 <= LT) || LA48_18 == MINUS || LA48_18 == NOT || (LA48_18 >= OR && LA48_18 <= PERCENT) || LA48_18 == PLUS || LA48_18 == QUESTION_MARK || LA48_18 == RPAREN || LA48_18 == STAR || (LA48_18 >= TILDA && LA48_18 <= TO) || LA48_18 == URI))
                {
                    s = 9;
                }

                input.seek(index48_18);
                if (s >= 0)
                    return s;
                break;

            case 102:
                int LA48_185 = input.LA(1);

                int index48_185 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_185);
                if (s >= 0)
                    return s;
                break;

            case 103:
                int LA48_205 = input.LA(1);

                int index48_205 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_205);
                if (s >= 0)
                    return s;
                break;

            case 104:
                int LA48_224 = input.LA(1);

                int index48_224 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_224);
                if (s >= 0)
                    return s;
                break;

            case 105:
                int LA48_184 = input.LA(1);

                int index48_184 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_184);
                if (s >= 0)
                    return s;
                break;

            case 106:
                int LA48_20 = input.LA(1);

                int index48_20 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_20 == COLON) && (synpred27_FTS()))
                {
                    s = 40;
                }
                else if ((LA48_20 == EOF || (LA48_20 >= AMP && LA48_20 <= BAR) || LA48_20 == CARAT || LA48_20 == COMMA || LA48_20 == DATETIME || LA48_20 == DECIMAL_INTEGER_LITERAL || LA48_20 == DOT || LA48_20 == EQUALS || LA48_20 == EXCLAMATION || LA48_20 == FLOATING_POINT_LITERAL || (LA48_20 >= FTSPHRASE && LA48_20 <= FTSWORD) || LA48_20 == ID || (LA48_20 >= LPAREN && LA48_20 <= LT) || LA48_20 == MINUS || LA48_20 == NOT || (LA48_20 >= OR && LA48_20 <= PERCENT) || LA48_20 == PLUS || LA48_20 == QUESTION_MARK || LA48_20 == RPAREN || LA48_20 == STAR || (LA48_20 >= TILDA && LA48_20 <= TO) || LA48_20 == URI))
                {
                    s = 9;
                }

                input.seek(index48_20);
                if (s >= 0)
                    return s;
                break;

            case 107:
                int LA48_175 = input.LA(1);

                int index48_175 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_175);
                if (s >= 0)
                    return s;
                break;

            case 108:
                int LA48_169 = input.LA(1);

                int index48_169 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_169);
                if (s >= 0)
                    return s;
                break;

            case 109:
                int LA48_225 = input.LA(1);

                int index48_225 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_225);
                if (s >= 0)
                    return s;
                break;

            case 110:
                int LA48_206 = input.LA(1);

                int index48_206 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_206);
                if (s >= 0)
                    return s;
                break;

            case 111:
                int LA48_121 = input.LA(1);

                int index48_121 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_121);
                if (s >= 0)
                    return s;
                break;

            case 112:
                int LA48_114 = input.LA(1);

                int index48_114 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_114);
                if (s >= 0)
                    return s;
                break;

            case 113:
                int LA48_154 = input.LA(1);

                int index48_154 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_154);
                if (s >= 0)
                    return s;
                break;

            case 114:
                int LA48_93 = input.LA(1);

                int index48_93 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_93 == DOT) && (synpred27_FTS()))
                {
                    s = 126;
                }
                else if ((LA48_93 == COLON))
                {
                    s = 127;
                }
                else if ((LA48_93 == COMMA) && (synpred27_FTS()))
                {
                    s = 128;
                }
                else if ((LA48_93 == TILDA) && (synpred27_FTS()))
                {
                    s = 129;
                }
                else if ((LA48_93 == CARAT) && (synpred27_FTS()))
                {
                    s = 130;
                }
                else if ((LA48_93 == AND) && (synpred27_FTS()))
                {
                    s = 131;
                }
                else if ((LA48_93 == AMP) && (synpred27_FTS()))
                {
                    s = 132;
                }
                else if ((LA48_93 == EOF) && (synpred27_FTS()))
                {
                    s = 50;
                }
                else if ((LA48_93 == RPAREN) && (synpred27_FTS()))
                {
                    s = 51;
                }
                else if ((LA48_93 == OR) && (synpred27_FTS()))
                {
                    s = 52;
                }
                else if ((LA48_93 == BAR) && (synpred27_FTS()))
                {
                    s = 53;
                }
                else if ((LA48_93 == NOT) && (synpred27_FTS()))
                {
                    s = 54;
                }
                else if ((LA48_93 == ID) && (synpred27_FTS()))
                {
                    s = 55;
                }
                else if ((LA48_93 == FTSWORD) && (synpred27_FTS()))
                {
                    s = 56;
                }
                else if ((LA48_93 == FTSPRE) && (synpred27_FTS()))
                {
                    s = 57;
                }
                else if ((LA48_93 == FTSWILD) && (synpred27_FTS()))
                {
                    s = 58;
                }
                else if ((LA48_93 == EXCLAMATION) && (synpred27_FTS()))
                {
                    s = 59;
                }
                else if ((LA48_93 == TO) && (synpred27_FTS()))
                {
                    s = 60;
                }
                else if ((LA48_93 == DECIMAL_INTEGER_LITERAL) && (synpred27_FTS()))
                {
                    s = 61;
                }
                else if ((LA48_93 == FLOATING_POINT_LITERAL) && (synpred27_FTS()))
                {
                    s = 62;
                }
                else if ((LA48_93 == DATETIME) && (synpred27_FTS()))
                {
                    s = 63;
                }
                else if ((LA48_93 == STAR) && (synpred27_FTS()))
                {
                    s = 133;
                }
                else if ((LA48_93 == URI) && (synpred27_FTS()))
                {
                    s = 65;
                }
                else if ((LA48_93 == AT) && (synpred27_FTS()))
                {
                    s = 66;
                }
                else if ((LA48_93 == FTSPHRASE) && (synpred27_FTS()))
                {
                    s = 67;
                }
                else if ((LA48_93 == LSQUARE) && (synpred27_FTS()))
                {
                    s = 68;
                }
                else if ((LA48_93 == LT) && (synpred27_FTS()))
                {
                    s = 69;
                }
                else if ((LA48_93 == QUESTION_MARK) && (synpred27_FTS()))
                {
                    s = 70;
                }
                else if ((LA48_93 == EQUALS) && (synpred27_FTS()))
                {
                    s = 71;
                }
                else if ((LA48_93 == LPAREN) && (synpred27_FTS()))
                {
                    s = 72;
                }
                else if ((LA48_93 == PERCENT) && (synpred27_FTS()))
                {
                    s = 73;
                }
                else if ((LA48_93 == PLUS) && (synpred27_FTS()))
                {
                    s = 74;
                }
                else if ((LA48_93 == MINUS) && (synpred27_FTS()))
                {
                    s = 75;
                }
                else if ((LA48_93 == DOTDOT) && (synpred27_FTS()))
                {
                    s = 134;
                }

                input.seek(index48_93);
                if (s >= 0)
                    return s;
                break;

            case 115:
                int LA48_186 = input.LA(1);

                int index48_186 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_186);
                if (s >= 0)
                    return s;
                break;

            case 116:
                int LA48_122 = input.LA(1);

                int index48_122 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 134;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_122);
                if (s >= 0)
                    return s;
                break;

            case 117:
                int LA48_27 = input.LA(1);

                int index48_27 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_27 == COLON) && (synpred24_FTS()))
                {
                    s = 44;
                }
                else if ((LA48_27 == COMMA || LA48_27 == DOT) && (synpred27_FTS()))
                {
                    s = 45;
                }
                else if ((LA48_27 == TILDA) && (synpred27_FTS()))
                {
                    s = 46;
                }
                else if ((LA48_27 == CARAT) && (synpred27_FTS()))
                {
                    s = 47;
                }
                else if ((LA48_27 == AND) && (synpred27_FTS()))
                {
                    s = 48;
                }
                else if ((LA48_27 == AMP) && (synpred27_FTS()))
                {
                    s = 49;
                }
                else if ((LA48_27 == EOF) && (synpred27_FTS()))
                {
                    s = 50;
                }
                else if ((LA48_27 == RPAREN) && (synpred27_FTS()))
                {
                    s = 51;
                }
                else if ((LA48_27 == OR) && (synpred27_FTS()))
                {
                    s = 52;
                }
                else if ((LA48_27 == BAR) && (synpred27_FTS()))
                {
                    s = 53;
                }
                else if ((LA48_27 == NOT) && (synpred27_FTS()))
                {
                    s = 54;
                }
                else if ((LA48_27 == ID) && (synpred27_FTS()))
                {
                    s = 55;
                }
                else if ((LA48_27 == FTSWORD) && (synpred27_FTS()))
                {
                    s = 56;
                }
                else if ((LA48_27 == FTSPRE) && (synpred27_FTS()))
                {
                    s = 57;
                }
                else if ((LA48_27 == FTSWILD) && (synpred27_FTS()))
                {
                    s = 58;
                }
                else if ((LA48_27 == EXCLAMATION) && (synpred27_FTS()))
                {
                    s = 59;
                }
                else if ((LA48_27 == TO) && (synpred27_FTS()))
                {
                    s = 60;
                }
                else if ((LA48_27 == DECIMAL_INTEGER_LITERAL) && (synpred27_FTS()))
                {
                    s = 61;
                }
                else if ((LA48_27 == FLOATING_POINT_LITERAL) && (synpred27_FTS()))
                {
                    s = 62;
                }
                else if ((LA48_27 == DATETIME) && (synpred27_FTS()))
                {
                    s = 63;
                }
                else if ((LA48_27 == STAR) && (synpred27_FTS()))
                {
                    s = 64;
                }
                else if ((LA48_27 == URI) && (synpred27_FTS()))
                {
                    s = 65;
                }
                else if ((LA48_27 == AT) && (synpred27_FTS()))
                {
                    s = 66;
                }
                else if ((LA48_27 == FTSPHRASE) && (synpred27_FTS()))
                {
                    s = 67;
                }
                else if ((LA48_27 == LSQUARE) && (synpred27_FTS()))
                {
                    s = 68;
                }
                else if ((LA48_27 == LT) && (synpred27_FTS()))
                {
                    s = 69;
                }
                else if ((LA48_27 == QUESTION_MARK) && (synpred27_FTS()))
                {
                    s = 70;
                }
                else if ((LA48_27 == EQUALS) && (synpred27_FTS()))
                {
                    s = 71;
                }
                else if ((LA48_27 == LPAREN) && (synpred27_FTS()))
                {
                    s = 72;
                }
                else if ((LA48_27 == PERCENT) && (synpred27_FTS()))
                {
                    s = 73;
                }
                else if ((LA48_27 == PLUS) && (synpred27_FTS()))
                {
                    s = 74;
                }
                else if ((LA48_27 == MINUS) && (synpred27_FTS()))
                {
                    s = 75;
                }

                input.seek(index48_27);
                if (s >= 0)
                    return s;
                break;

            case 118:
                int LA48_24 = input.LA(1);

                int index48_24 = input.index();
                input.rewind();
                s = -1;
                if ((LA48_24 == COLON) && (synpred24_FTS()))
                {
                    s = 44;
                }
                else if ((LA48_24 == COMMA || LA48_24 == DOT) && (synpred27_FTS()))
                {
                    s = 45;
                }
                else if ((LA48_24 == TILDA) && (synpred27_FTS()))
                {
                    s = 46;
                }
                else if ((LA48_24 == CARAT) && (synpred27_FTS()))
                {
                    s = 47;
                }
                else if ((LA48_24 == AND) && (synpred27_FTS()))
                {
                    s = 48;
                }
                else if ((LA48_24 == AMP) && (synpred27_FTS()))
                {
                    s = 49;
                }
                else if ((LA48_24 == EOF) && (synpred27_FTS()))
                {
                    s = 50;
                }
                else if ((LA48_24 == RPAREN) && (synpred27_FTS()))
                {
                    s = 51;
                }
                else if ((LA48_24 == OR) && (synpred27_FTS()))
                {
                    s = 52;
                }
                else if ((LA48_24 == BAR) && (synpred27_FTS()))
                {
                    s = 53;
                }
                else if ((LA48_24 == NOT) && (synpred27_FTS()))
                {
                    s = 54;
                }
                else if ((LA48_24 == ID) && (synpred27_FTS()))
                {
                    s = 55;
                }
                else if ((LA48_24 == FTSWORD) && (synpred27_FTS()))
                {
                    s = 56;
                }
                else if ((LA48_24 == FTSPRE) && (synpred27_FTS()))
                {
                    s = 57;
                }
                else if ((LA48_24 == FTSWILD) && (synpred27_FTS()))
                {
                    s = 58;
                }
                else if ((LA48_24 == EXCLAMATION) && (synpred27_FTS()))
                {
                    s = 59;
                }
                else if ((LA48_24 == TO) && (synpred27_FTS()))
                {
                    s = 60;
                }
                else if ((LA48_24 == DECIMAL_INTEGER_LITERAL) && (synpred27_FTS()))
                {
                    s = 61;
                }
                else if ((LA48_24 == FLOATING_POINT_LITERAL) && (synpred27_FTS()))
                {
                    s = 62;
                }
                else if ((LA48_24 == DATETIME) && (synpred27_FTS()))
                {
                    s = 63;
                }
                else if ((LA48_24 == STAR) && (synpred27_FTS()))
                {
                    s = 64;
                }
                else if ((LA48_24 == URI) && (synpred27_FTS()))
                {
                    s = 65;
                }
                else if ((LA48_24 == AT) && (synpred27_FTS()))
                {
                    s = 66;
                }
                else if ((LA48_24 == FTSPHRASE) && (synpred27_FTS()))
                {
                    s = 67;
                }
                else if ((LA48_24 == LSQUARE) && (synpred27_FTS()))
                {
                    s = 68;
                }
                else if ((LA48_24 == LT) && (synpred27_FTS()))
                {
                    s = 69;
                }
                else if ((LA48_24 == QUESTION_MARK) && (synpred27_FTS()))
                {
                    s = 70;
                }
                else if ((LA48_24 == EQUALS) && (synpred27_FTS()))
                {
                    s = 71;
                }
                else if ((LA48_24 == LPAREN) && (synpred27_FTS()))
                {
                    s = 72;
                }
                else if ((LA48_24 == PERCENT) && (synpred27_FTS()))
                {
                    s = 73;
                }
                else if ((LA48_24 == PLUS) && (synpred27_FTS()))
                {
                    s = 74;
                }
                else if ((LA48_24 == MINUS) && (synpred27_FTS()))
                {
                    s = 75;
                }

                input.seek(index48_24);
                if (s >= 0)
                    return s;
                break;

            case 119:
                int LA48_87 = input.LA(1);

                int index48_87 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_87);
                if (s >= 0)
                    return s;
                break;

            case 120:
                int LA48_142 = input.LA(1);

                int index48_142 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_142);
                if (s >= 0)
                    return s;
                break;

            case 121:
                int LA48_176 = input.LA(1);

                int index48_176 = input.index();
                input.rewind();
                s = -1;
                if ((synpred24_FTS()))
                {
                    s = 107;
                }
                else if ((synpred27_FTS()))
                {
                    s = 182;
                }

                input.seek(index48_176);
                if (s >= 0)
                    return s;
                break;

            case 122:
                int LA48_82 = input.LA(1);

                int index48_82 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 105;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_82);
                if (s >= 0)
                    return s;
                break;

            case 123:
                int LA48_135 = input.LA(1);

                int index48_135 = input.index();
                input.rewind();
                s = -1;
                if ((synpred27_FTS()))
                {
                    s = 182;
                }
                else if ((true))
                {
                    s = 9;
                }

                input.seek(index48_135);
                if (s >= 0)
                    return s;
                break;
            }
            if (state.backtracking > 0)
            {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA69_eotS = "\u00bb\uffff";
    static final String DFA69_eofS = "\u00bb\uffff";
    static final String DFA69_minS = "\1\13\12\4\1\5\2\uffff\1\13\1\4\1\13\3\uffff\1\4\34\uffff\5\4\70\uffff" +
            "\1\4\12\0\1\5\6\uffff\2\4\32\uffff\6\0\14\uffff\1\4\12\uffff\1\0\1\uffff";
    static final String DFA69_maxS = "\13\150\1\146\2\uffff\3\150\3\uffff\1\150\34\uffff\5\150\70\uffff\1\150" +
            "\12\0\1\146\6\uffff\2\150\32\uffff\6\0\14\uffff\1\150\12\uffff\1\0\1\uffff";
    static final String DFA69_acceptS = "\14\uffff\2\2\3\uffff\2\10\1\11\1\uffff\33\2\1\10\5\uffff\15\3\1\5\34" +
            "\4\1\6\15\7\14\uffff\6\2\2\uffff\1\1\31\2\6\uffff\14\2\1\uffff\12\2\1" +
            "\uffff\1\2";
    static final String DFA69_specialS = "\1\43\1\31\1\30\1\41\1\46\1\42\1\44\1\11\1\4\1\16\1\14\3\uffff\1\27\1" +
            "\32\1\7\3\uffff\1\5\34\uffff\1\37\1\6\1\12\1\22\1\17\70\uffff\1\15\1\0" +
            "\1\20\1\25\1\23\1\34\1\36\1\2\1\13\1\47\1\35\7\uffff\1\40\1\10\32\uffff" +
            "\1\3\1\1\1\21\1\26\1\24\1\50\14\uffff\1\45\12\uffff\1\33\1\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\14\1\uffff\1\11\1\uffff\1\7\5\uffff\1\14\2\uffff\1\16\26\uffff\1\10" +
                    "\2\uffff\1\17\1\3\1\4\1\2\11\uffff\1\1\3\uffff\1\23\1\21\1\22\10\uffff" +
                    "\1\5\11\uffff\1\15\7\uffff\1\12\4\uffff\1\20\1\6\1\uffff\1\13",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\2\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff\1" +
                    "\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\2\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff\1" +
                    "\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\64\71\uffff\1\61\16\uffff\1\65\2\uffff\1\63\24\uffff\1\62",
            "",
            "",
            "\1\66\1\uffff\1\101\1\uffff\1\75\5\uffff\1\66\2\uffff\1\103\26\uffff" +
                    "\1\76\3\uffff\1\71\1\72\1\70\11\uffff\1\67\16\uffff\1\73\11\uffff\1\100" +
                    "\7\uffff\1\77\5\uffff\1\74\1\uffff\1\102",
            "\1\107\1\106\1\uffff\1\112\1\uffff\1\105\1\uffff\1\127\1\uffff\1\124" +
                    "\1\uffff\1\122\5\uffff\1\127\1\60\1\uffff\1\131\2\uffff\1\120\23\uffff" +
                    "\1\123\2\uffff\1\132\1\116\1\117\1\115\11\uffff\1\114\3\uffff\1\135\1" +
                    "\133\1\134\2\uffff\1\137\5\uffff\1\113\2\uffff\1\111\2\uffff\1\136\3" +
                    "\uffff\1\130\2\uffff\1\110\4\uffff\1\125\4\uffff\1\104\1\121\1\uffff" +
                    "\1\126",
            "\1\141\1\uffff\1\154\1\uffff\1\150\5\uffff\1\141\2\uffff\1\140\26\uffff" +
                    "\1\151\3\uffff\1\144\1\145\1\143\11\uffff\1\142\16\uffff\1\146\11\uffff" +
                    "\1\153\7\uffff\1\152\5\uffff\1\147\1\uffff\1\155",
            "",
            "",
            "",
            "\1\176\1\175\1\uffff\1\34\1\uffff\1\174\1\uffff\1\172\1\uffff\1\167" +
                    "\1\uffff\1\165\5\uffff\1\172\1\177\1\uffff\1\51\2\uffff\1\42\23\uffff" +
                    "\1\166\2\uffff\1\52\1\161\1\162\1\160\11\uffff\1\157\3\uffff\1\156\1" +
                    "\53\1\54\2\uffff\1\57\5\uffff\1\163\2\uffff\1\33\2\uffff\1\56\3\uffff" +
                    "\1\50\2\uffff\1\32\4\uffff\1\170\4\uffff\1\173\1\164\1\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\u0080\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2" +
                    "\uffff\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff" +
                    "\1\57\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32" +
                    "\4\uffff\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\25\1\uffff\1\46\1\uffff" +
                    "\1\44\5\uffff\1\25\1\60\1\uffff\1\51\2\uffff\1\42\23\uffff\1\45\2\uffff" +
                    "\1\52\1\40\1\41\1\37\11\uffff\1\36\3\uffff\1\55\1\53\1\54\2\uffff\1\57" +
                    "\5\uffff\1\35\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2\uffff\1\32\4\uffff" +
                    "\1\24\4\uffff\1\26\1\43\1\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0084\1\u0083\1\uffff\1\u0099\3\uffff\1\u0090\1\uffff\1\u008d\1\uffff" +
                    "\1\u0081\5\uffff\1\u0090\2\uffff\1\u0092\2\uffff\1\u008a\23\uffff\1\u008c" +
                    "\2\uffff\1\u0093\1\u0088\1\u0089\1\u0087\11\uffff\1\u0086\3\uffff\1\u0097" +
                    "\1\u0095\1\u0096\2\uffff\1\u009a\5\uffff\1\u0085\2\uffff\1\u009b\2\uffff" +
                    "\1\u0098\3\uffff\1\u0091\2\uffff\1\u0082\4\uffff\1\u008e\4\uffff\1\u0094" +
                    "\1\u008b\1\uffff\1\u008f",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u009f\71\uffff\1\u009c\16\uffff\1\u00a0\2\uffff\1\u009e\24\uffff" +
                    "\1\u009d",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\31\1\30\1\uffff\1\34\1\uffff\1\27\1\uffff\1\u00ad\1\uffff\1\u00ab" +
                    "\1\uffff\1\u00a7\5\uffff\1\u00ad\2\uffff\1\51\2\uffff\1\42\23\uffff\1" +
                    "\u00a8\2\uffff\1\52\1\u00a3\1\u00a4\1\u00a2\11\uffff\1\u00a1\3\uffff" +
                    "\1\55\1\53\1\54\2\uffff\1\57\5\uffff\1\u00a5\2\uffff\1\33\2\uffff\1\56" +
                    "\3\uffff\1\u00aa\2\uffff\1\32\4\uffff\1\u00a9\4\uffff\1\26\1\u00a6\1" +
                    "\uffff\1\u00ac",
            "\1\u00b6\1\u00b5\1\uffff\1\u00b4\1\uffff\1\u00b2\1\uffff\1\u00b0\1\uffff" +
                    "\1\u008d\1\uffff\1\u00b7\5\uffff\1\u00b0\1\u00b8\1\uffff\1\u0092\2\uffff" +
                    "\1\u008a\23\uffff\1\u008c\2\uffff\1\u0093\1\u0088\1\u0089\1\u0087\11" +
                    "\uffff\1\u0086\3\uffff\1\u0097\1\u0095\1\u0096\2\uffff\1\u009a\5\uffff" +
                    "\1\u0085\2\uffff\1\u00b3\2\uffff\1\u0098\3\uffff\1\u0091\2\uffff\1\u00ae" +
                    "\4\uffff\1\u00af\4\uffff\1\u00b1\1\u008b\1\uffff\1\u008f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\176\1\175\1\uffff\1\34\1\uffff\1\174\1\uffff\1\u00ad\1\uffff\1\167" +
                    "\1\uffff\1\165\5\uffff\1\u00ad\2\uffff\1\51\2\uffff\1\42\23\uffff\1\166" +
                    "\2\uffff\1\52\1\161\1\162\1\160\11\uffff\1\157\3\uffff\1\55\1\53\1\54" +
                    "\2\uffff\1\57\5\uffff\1\163\2\uffff\1\33\2\uffff\1\56\3\uffff\1\50\2" +
                    "\uffff\1\32\4\uffff\1\u00b9\4\uffff\1\u00ba\1\164\1\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static
    {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++)
        {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    protected class DFA69 extends DFA
    {

        public DFA69(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }

        @Override
        public String getDescription()
        {
            return "686:1: ftsFieldGroupTest : ( ( ftsFieldGroupProximity )=> ftsFieldGroupProximity -> ^( FG_PROXIMITY ftsFieldGroupProximity ) | ( ftsFieldGroupTerm )=> ftsFieldGroupTerm ( ( fuzzy )=> fuzzy )? -> ^( FG_TERM ftsFieldGroupTerm ( fuzzy )? ) | ( ftsFieldGroupExactTerm )=> ftsFieldGroupExactTerm ( ( fuzzy )=> fuzzy )? -> ^( FG_EXACT_TERM ftsFieldGroupExactTerm ( fuzzy )? ) | ( ftsFieldGroupPhrase )=> ftsFieldGroupPhrase ( ( slop )=> slop )? -> ^( FG_PHRASE ftsFieldGroupPhrase ( slop )? ) | ( ftsFieldGroupExactPhrase )=> ftsFieldGroupExactPhrase ( ( slop )=> slop )? -> ^( FG_EXACT_PHRASE ftsFieldGroupExactPhrase ( slop )? ) | ( ftsFieldGroupTokenisedPhrase )=> ftsFieldGroupTokenisedPhrase ( ( slop )=> slop )? -> ^( FG_PHRASE ftsFieldGroupTokenisedPhrase ( slop )? ) | ( ftsFieldGroupSynonym )=> ftsFieldGroupSynonym ( ( fuzzy )=> fuzzy )? -> ^( FG_SYNONYM ftsFieldGroupSynonym ( fuzzy )? ) | ( ftsFieldGroupRange )=> ftsFieldGroupRange -> ^( FG_RANGE ftsFieldGroupRange ) | LPAREN ftsFieldGroupDisjunction RPAREN -> ftsFieldGroupDisjunction );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException
        {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s)
            {
            case 0:
                int LA69_111 = input.LA(1);

                int index69_111 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_111);
                if (s >= 0)
                    return s;
                break;

            case 1:
                int LA69_157 = input.LA(1);

                int index69_157 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 184;
                }

                input.seek(index69_157);
                if (s >= 0)
                    return s;
                break;

            case 2:
                int LA69_117 = input.LA(1);

                int index69_117 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_117);
                if (s >= 0)
                    return s;
                break;

            case 3:
                int LA69_156 = input.LA(1);

                int index69_156 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 184;
                }

                input.seek(index69_156);
                if (s >= 0)
                    return s;
                break;

            case 4:
                int LA69_8 = input.LA(1);

                int index69_8 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_8 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_8 == COMMA || LA69_8 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_8 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_8 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_8 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_8 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_8 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_8 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_8 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_8 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_8 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_8 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_8 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_8 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_8 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_8 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_8 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_8 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_8 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_8 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_8 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_8 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_8 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_8 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_8 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_8 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_8 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_8 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_8 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_8);
                if (s >= 0)
                    return s;
                break;

            case 5:
                int LA69_20 = input.LA(1);

                int index69_20 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_20 == LPAREN))
                {
                    s = 110;
                }
                else if ((LA69_20 == ID))
                {
                    s = 111;
                }
                else if ((LA69_20 == FTSWORD))
                {
                    s = 112;
                }
                else if ((LA69_20 == FTSPRE))
                {
                    s = 113;
                }
                else if ((LA69_20 == FTSWILD))
                {
                    s = 114;
                }
                else if ((LA69_20 == NOT))
                {
                    s = 115;
                }
                else if ((LA69_20 == TO))
                {
                    s = 116;
                }
                else if ((LA69_20 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 117;
                }
                else if ((LA69_20 == FLOATING_POINT_LITERAL))
                {
                    s = 118;
                }
                else if ((LA69_20 == DATETIME))
                {
                    s = 119;
                }
                else if ((LA69_20 == STAR))
                {
                    s = 120;
                }
                else if ((LA69_20 == URI))
                {
                    s = 121;
                }
                else if ((LA69_20 == COMMA || LA69_20 == DOT) && (synpred34_FTS()))
                {
                    s = 122;
                }
                else if ((LA69_20 == TILDA) && (synpred34_FTS()))
                {
                    s = 123;
                }
                else if ((LA69_20 == CARAT) && (synpred34_FTS()))
                {
                    s = 124;
                }
                else if ((LA69_20 == AND) && (synpred34_FTS()))
                {
                    s = 125;
                }
                else if ((LA69_20 == AMP) && (synpred34_FTS()))
                {
                    s = 126;
                }
                else if ((LA69_20 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_20 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_20 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_20 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_20 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_20 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_20 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_20 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_20 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_20 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_20 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_20 == DOTDOT) && (synpred34_FTS()))
                {
                    s = 127;
                }

                input.seek(index69_20);
                if (s >= 0)
                    return s;
                break;

            case 6:
                int LA69_50 = input.LA(1);

                int index69_50 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_50 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_50 == COMMA || LA69_50 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_50 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_50 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_50 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_50 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_50 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_50 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_50 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_50 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_50 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_50 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_50 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_50 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_50 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_50 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_50 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_50 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_50 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_50 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_50 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_50 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_50 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_50 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_50 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_50 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_50 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_50 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_50 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_50);
                if (s >= 0)
                    return s;
                break;

            case 7:
                int LA69_16 = input.LA(1);

                int index69_16 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_16 == EQUALS) && (synpred42_FTS()))
                {
                    s = 96;
                }
                else if ((LA69_16 == COMMA || LA69_16 == DOT) && (synpred44_FTS()))
                {
                    s = 97;
                }
                else if ((LA69_16 == ID) && (synpred44_FTS()))
                {
                    s = 98;
                }
                else if ((LA69_16 == FTSWORD) && (synpred44_FTS()))
                {
                    s = 99;
                }
                else if ((LA69_16 == FTSPRE) && (synpred44_FTS()))
                {
                    s = 100;
                }
                else if ((LA69_16 == FTSWILD) && (synpred44_FTS()))
                {
                    s = 101;
                }
                else if ((LA69_16 == NOT) && (synpred44_FTS()))
                {
                    s = 102;
                }
                else if ((LA69_16 == TO) && (synpred44_FTS()))
                {
                    s = 103;
                }
                else if ((LA69_16 == DECIMAL_INTEGER_LITERAL) && (synpred44_FTS()))
                {
                    s = 104;
                }
                else if ((LA69_16 == FLOATING_POINT_LITERAL) && (synpred44_FTS()))
                {
                    s = 105;
                }
                else if ((LA69_16 == STAR) && (synpred44_FTS()))
                {
                    s = 106;
                }
                else if ((LA69_16 == QUESTION_MARK) && (synpred44_FTS()))
                {
                    s = 107;
                }
                else if ((LA69_16 == DATETIME) && (synpred44_FTS()))
                {
                    s = 108;
                }
                else if ((LA69_16 == URI) && (synpred44_FTS()))
                {
                    s = 109;
                }

                input.seek(index69_16);
                if (s >= 0)
                    return s;
                break;

            case 8:
                int LA69_129 = input.LA(1);

                int index69_129 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_129 == RPAREN))
                {
                    s = 174;
                }
                else if ((LA69_129 == STAR) && (synpred34_FTS()))
                {
                    s = 175;
                }
                else if ((LA69_129 == COMMA || LA69_129 == DOT) && (synpred34_FTS()))
                {
                    s = 176;
                }
                else if ((LA69_129 == TILDA) && (synpred34_FTS()))
                {
                    s = 177;
                }
                else if ((LA69_129 == CARAT) && (synpred34_FTS()))
                {
                    s = 178;
                }
                else if ((LA69_129 == OR) && (synpred34_FTS()))
                {
                    s = 179;
                }
                else if ((LA69_129 == BAR) && (synpred34_FTS()))
                {
                    s = 180;
                }
                else if ((LA69_129 == AND) && (synpred34_FTS()))
                {
                    s = 181;
                }
                else if ((LA69_129 == AMP) && (synpred34_FTS()))
                {
                    s = 182;
                }
                else if ((LA69_129 == NOT) && (synpred34_FTS()))
                {
                    s = 133;
                }
                else if ((LA69_129 == ID) && (synpred34_FTS()))
                {
                    s = 134;
                }
                else if ((LA69_129 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 135;
                }
                else if ((LA69_129 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 136;
                }
                else if ((LA69_129 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 137;
                }
                else if ((LA69_129 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 138;
                }
                else if ((LA69_129 == TO) && (synpred34_FTS()))
                {
                    s = 139;
                }
                else if ((LA69_129 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 183;
                }
                else if ((LA69_129 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 140;
                }
                else if ((LA69_129 == DATETIME) && (synpred34_FTS()))
                {
                    s = 141;
                }
                else if ((LA69_129 == URI) && (synpred34_FTS()))
                {
                    s = 143;
                }
                else if ((LA69_129 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 145;
                }
                else if ((LA69_129 == EQUALS) && (synpred34_FTS()))
                {
                    s = 146;
                }
                else if ((LA69_129 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 147;
                }
                else if ((LA69_129 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 149;
                }
                else if ((LA69_129 == LT) && (synpred34_FTS()))
                {
                    s = 150;
                }
                else if ((LA69_129 == LPAREN) && (synpred34_FTS()))
                {
                    s = 151;
                }
                else if ((LA69_129 == PLUS) && (synpred34_FTS()))
                {
                    s = 152;
                }
                else if ((LA69_129 == MINUS) && (synpred34_FTS()))
                {
                    s = 154;
                }
                else if ((LA69_129 == DOTDOT) && (synpred34_FTS()))
                {
                    s = 184;
                }

                input.seek(index69_129);
                if (s >= 0)
                    return s;
                break;

            case 9:
                int LA69_7 = input.LA(1);

                int index69_7 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_7 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_7 == COMMA || LA69_7 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_7 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_7 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_7 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_7 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_7 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_7 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_7 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_7 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_7 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_7 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_7 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_7 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_7 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_7 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_7 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_7 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_7 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_7 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_7 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_7 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_7 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_7 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_7 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_7 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_7 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_7 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_7 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_7);
                if (s >= 0)
                    return s;
                break;

            case 10:
                int LA69_51 = input.LA(1);

                int index69_51 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_51 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_51 == COMMA || LA69_51 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_51 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_51 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_51 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_51 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_51 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_51 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_51 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_51 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_51 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_51 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_51 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_51 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_51 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_51 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_51 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_51 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_51 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_51 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_51 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_51 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_51 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_51 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_51 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_51 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_51 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_51 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_51 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_51);
                if (s >= 0)
                    return s;
                break;

            case 11:
                int LA69_118 = input.LA(1);

                int index69_118 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_118);
                if (s >= 0)
                    return s;
                break;

            case 12:
                int LA69_10 = input.LA(1);

                int index69_10 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_10 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_10 == COMMA || LA69_10 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_10 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_10 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_10 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_10 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_10 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_10 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_10 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_10 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_10 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_10 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_10 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_10 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_10 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_10 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_10 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_10 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_10 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_10 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_10 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_10 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_10 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_10 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_10 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_10 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_10 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_10 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_10 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_10);
                if (s >= 0)
                    return s;
                break;

            case 13:
                int LA69_110 = input.LA(1);

                int index69_110 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_110 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 129;
                }
                else if ((LA69_110 == RPAREN) && (synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((LA69_110 == AND) && (synpred34_FTS()))
                {
                    s = 131;
                }
                else if ((LA69_110 == AMP) && (synpred34_FTS()))
                {
                    s = 132;
                }
                else if ((LA69_110 == NOT) && (synpred34_FTS()))
                {
                    s = 133;
                }
                else if ((LA69_110 == ID) && (synpred34_FTS()))
                {
                    s = 134;
                }
                else if ((LA69_110 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 135;
                }
                else if ((LA69_110 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 136;
                }
                else if ((LA69_110 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 137;
                }
                else if ((LA69_110 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 138;
                }
                else if ((LA69_110 == TO) && (synpred34_FTS()))
                {
                    s = 139;
                }
                else if ((LA69_110 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 140;
                }
                else if ((LA69_110 == DATETIME) && (synpred34_FTS()))
                {
                    s = 141;
                }
                else if ((LA69_110 == STAR) && (synpred34_FTS()))
                {
                    s = 142;
                }
                else if ((LA69_110 == URI) && (synpred34_FTS()))
                {
                    s = 143;
                }
                else if ((LA69_110 == COMMA || LA69_110 == DOT) && (synpred34_FTS()))
                {
                    s = 144;
                }
                else if ((LA69_110 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 145;
                }
                else if ((LA69_110 == EQUALS) && (synpred34_FTS()))
                {
                    s = 146;
                }
                else if ((LA69_110 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 147;
                }
                else if ((LA69_110 == TILDA) && (synpred34_FTS()))
                {
                    s = 148;
                }
                else if ((LA69_110 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 149;
                }
                else if ((LA69_110 == LT) && (synpred34_FTS()))
                {
                    s = 150;
                }
                else if ((LA69_110 == LPAREN) && (synpred34_FTS()))
                {
                    s = 151;
                }
                else if ((LA69_110 == PLUS) && (synpred34_FTS()))
                {
                    s = 152;
                }
                else if ((LA69_110 == BAR) && (synpred34_FTS()))
                {
                    s = 153;
                }
                else if ((LA69_110 == MINUS) && (synpred34_FTS()))
                {
                    s = 154;
                }
                else if ((LA69_110 == OR) && (synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_110);
                if (s >= 0)
                    return s;
                break;

            case 14:
                int LA69_9 = input.LA(1);

                int index69_9 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_9 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_9 == COMMA || LA69_9 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_9 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_9 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_9 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_9 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_9 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_9 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_9 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_9 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_9 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_9 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_9 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_9 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_9 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_9 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_9 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_9 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_9 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_9 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_9 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_9 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_9 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_9 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_9 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_9 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_9 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_9 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_9 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_9);
                if (s >= 0)
                    return s;
                break;

            case 15:
                int LA69_53 = input.LA(1);

                int index69_53 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_53 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_53 == COMMA || LA69_53 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_53 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_53 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_53 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_53 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_53 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_53 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_53 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_53 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_53 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_53 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_53 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_53 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_53 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_53 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_53 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_53 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_53 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_53 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_53 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_53 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_53 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_53 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_53 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_53 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_53 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_53 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_53 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_53);
                if (s >= 0)
                    return s;
                break;

            case 16:
                int LA69_112 = input.LA(1);

                int index69_112 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_112);
                if (s >= 0)
                    return s;
                break;

            case 17:
                int LA69_158 = input.LA(1);

                int index69_158 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 184;
                }

                input.seek(index69_158);
                if (s >= 0)
                    return s;
                break;

            case 18:
                int LA69_52 = input.LA(1);

                int index69_52 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_52 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_52 == COMMA || LA69_52 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_52 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_52 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_52 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_52 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_52 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_52 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_52 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_52 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_52 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_52 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_52 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_52 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_52 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_52 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_52 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_52 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_52 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_52 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_52 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_52 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_52 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_52 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_52 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_52 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_52 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_52 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_52 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_52);
                if (s >= 0)
                    return s;
                break;

            case 19:
                int LA69_114 = input.LA(1);

                int index69_114 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_114);
                if (s >= 0)
                    return s;
                break;

            case 20:
                int LA69_160 = input.LA(1);

                int index69_160 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 184;
                }

                input.seek(index69_160);
                if (s >= 0)
                    return s;
                break;

            case 21:
                int LA69_113 = input.LA(1);

                int index69_113 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_113);
                if (s >= 0)
                    return s;
                break;

            case 22:
                int LA69_159 = input.LA(1);

                int index69_159 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 184;
                }

                input.seek(index69_159);
                if (s >= 0)
                    return s;
                break;

            case 23:
                int LA69_14 = input.LA(1);

                int index69_14 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_14 == COMMA || LA69_14 == DOT) && (synpred36_FTS()))
                {
                    s = 54;
                }
                else if ((LA69_14 == ID) && (synpred36_FTS()))
                {
                    s = 55;
                }
                else if ((LA69_14 == FTSWORD) && (synpred36_FTS()))
                {
                    s = 56;
                }
                else if ((LA69_14 == FTSPRE) && (synpred36_FTS()))
                {
                    s = 57;
                }
                else if ((LA69_14 == FTSWILD) && (synpred36_FTS()))
                {
                    s = 58;
                }
                else if ((LA69_14 == NOT) && (synpred36_FTS()))
                {
                    s = 59;
                }
                else if ((LA69_14 == TO) && (synpred36_FTS()))
                {
                    s = 60;
                }
                else if ((LA69_14 == DECIMAL_INTEGER_LITERAL) && (synpred36_FTS()))
                {
                    s = 61;
                }
                else if ((LA69_14 == FLOATING_POINT_LITERAL) && (synpred36_FTS()))
                {
                    s = 62;
                }
                else if ((LA69_14 == STAR) && (synpred36_FTS()))
                {
                    s = 63;
                }
                else if ((LA69_14 == QUESTION_MARK) && (synpred36_FTS()))
                {
                    s = 64;
                }
                else if ((LA69_14 == DATETIME) && (synpred36_FTS()))
                {
                    s = 65;
                }
                else if ((LA69_14 == URI) && (synpred36_FTS()))
                {
                    s = 66;
                }
                else if ((LA69_14 == EQUALS) && (synpred40_FTS()))
                {
                    s = 67;
                }

                input.seek(index69_14);
                if (s >= 0)
                    return s;
                break;

            case 24:
                int LA69_2 = input.LA(1);

                int index69_2 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_2 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_2 == COMMA || LA69_2 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_2 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_2 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_2 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_2 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_2 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_2 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_2 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_2 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_2 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_2 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_2 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_2 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_2 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_2 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_2 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_2 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_2 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_2 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_2 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_2 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_2 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_2 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_2 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_2 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_2 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_2 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_2 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_2);
                if (s >= 0)
                    return s;
                break;

            case 25:
                int LA69_1 = input.LA(1);

                int index69_1 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_1 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_1 == COMMA || LA69_1 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_1 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_1 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_1 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_1 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_1 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_1 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_1 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_1 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_1 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_1 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_1 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_1 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_1 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_1 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_1 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_1 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_1 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_1 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_1 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_1 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_1 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_1 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_1 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_1 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_1 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_1 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_1 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_1);
                if (s >= 0)
                    return s;
                break;

            case 26:
                int LA69_15 = input.LA(1);

                int index69_15 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_15 == TILDA) && (synpred38_FTS()))
                {
                    s = 68;
                }
                else if ((LA69_15 == CARAT) && (synpred38_FTS()))
                {
                    s = 69;
                }
                else if ((LA69_15 == AND) && (synpred38_FTS()))
                {
                    s = 70;
                }
                else if ((LA69_15 == AMP) && (synpred38_FTS()))
                {
                    s = 71;
                }
                else if ((LA69_15 == RPAREN) && (synpred38_FTS()))
                {
                    s = 72;
                }
                else if ((LA69_15 == OR) && (synpred38_FTS()))
                {
                    s = 73;
                }
                else if ((LA69_15 == BAR) && (synpred38_FTS()))
                {
                    s = 74;
                }
                else if ((LA69_15 == NOT) && (synpred38_FTS()))
                {
                    s = 75;
                }
                else if ((LA69_15 == ID) && (synpred38_FTS()))
                {
                    s = 76;
                }
                else if ((LA69_15 == FTSWORD) && (synpred38_FTS()))
                {
                    s = 77;
                }
                else if ((LA69_15 == FTSPRE) && (synpred38_FTS()))
                {
                    s = 78;
                }
                else if ((LA69_15 == FTSWILD) && (synpred38_FTS()))
                {
                    s = 79;
                }
                else if ((LA69_15 == EXCLAMATION) && (synpred38_FTS()))
                {
                    s = 80;
                }
                else if ((LA69_15 == TO) && (synpred38_FTS()))
                {
                    s = 81;
                }
                else if ((LA69_15 == DECIMAL_INTEGER_LITERAL) && (synpred38_FTS()))
                {
                    s = 82;
                }
                else if ((LA69_15 == FLOATING_POINT_LITERAL) && (synpred38_FTS()))
                {
                    s = 83;
                }
                else if ((LA69_15 == DATETIME) && (synpred38_FTS()))
                {
                    s = 84;
                }
                else if ((LA69_15 == STAR) && (synpred38_FTS()))
                {
                    s = 85;
                }
                else if ((LA69_15 == URI) && (synpred38_FTS()))
                {
                    s = 86;
                }
                else if ((LA69_15 == COMMA || LA69_15 == DOT) && (synpred38_FTS()))
                {
                    s = 87;
                }
                else if ((LA69_15 == QUESTION_MARK) && (synpred38_FTS()))
                {
                    s = 88;
                }
                else if ((LA69_15 == EQUALS) && (synpred38_FTS()))
                {
                    s = 89;
                }
                else if ((LA69_15 == FTSPHRASE) && (synpred38_FTS()))
                {
                    s = 90;
                }
                else if ((LA69_15 == LSQUARE) && (synpred38_FTS()))
                {
                    s = 91;
                }
                else if ((LA69_15 == LT) && (synpred38_FTS()))
                {
                    s = 92;
                }
                else if ((LA69_15 == LPAREN) && (synpred38_FTS()))
                {
                    s = 93;
                }
                else if ((LA69_15 == PLUS) && (synpred38_FTS()))
                {
                    s = 94;
                }
                else if ((LA69_15 == MINUS) && (synpred38_FTS()))
                {
                    s = 95;
                }
                else if ((LA69_15 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_15);
                if (s >= 0)
                    return s;
                break;

            case 27:
                int LA69_185 = input.LA(1);

                int index69_185 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 186;
                }

                input.seek(index69_185);
                if (s >= 0)
                    return s;
                break;

            case 28:
                int LA69_115 = input.LA(1);

                int index69_115 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_115);
                if (s >= 0)
                    return s;
                break;

            case 29:
                int LA69_120 = input.LA(1);

                int index69_120 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_120);
                if (s >= 0)
                    return s;
                break;

            case 30:
                int LA69_116 = input.LA(1);

                int index69_116 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_116);
                if (s >= 0)
                    return s;
                break;

            case 31:
                int LA69_49 = input.LA(1);

                int index69_49 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_49 == DOT))
                {
                    s = 128;
                }
                else if ((LA69_49 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_49 == COMMA) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_49 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_49 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_49 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_49 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_49 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_49 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_49 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_49 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_49 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_49 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_49 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_49 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_49 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_49 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_49 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_49 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_49 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_49 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_49 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_49 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_49 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_49 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_49 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_49 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_49 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_49 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_49 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_49);
                if (s >= 0)
                    return s;
                break;

            case 32:
                int LA69_128 = input.LA(1);

                int index69_128 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_128 == ID))
                {
                    s = 161;
                }
                else if ((LA69_128 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 162;
                }
                else if ((LA69_128 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 163;
                }
                else if ((LA69_128 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 164;
                }
                else if ((LA69_128 == NOT) && (synpred34_FTS()))
                {
                    s = 165;
                }
                else if ((LA69_128 == TO) && (synpred34_FTS()))
                {
                    s = 166;
                }
                else if ((LA69_128 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 167;
                }
                else if ((LA69_128 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 168;
                }
                else if ((LA69_128 == STAR) && (synpred34_FTS()))
                {
                    s = 169;
                }
                else if ((LA69_128 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 170;
                }
                else if ((LA69_128 == DATETIME) && (synpred34_FTS()))
                {
                    s = 171;
                }
                else if ((LA69_128 == URI) && (synpred34_FTS()))
                {
                    s = 172;
                }
                else if ((LA69_128 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_128 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_128 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_128 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_128 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_128 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_128 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_128 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_128 == COMMA || LA69_128 == DOT) && (synpred34_FTS()))
                {
                    s = 173;
                }
                else if ((LA69_128 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_128 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_128 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_128 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_128 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_128 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_128 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }

                input.seek(index69_128);
                if (s >= 0)
                    return s;
                break;

            case 33:
                int LA69_3 = input.LA(1);

                int index69_3 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_3 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_3 == COMMA || LA69_3 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_3 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_3 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_3 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_3 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_3 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_3 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_3 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_3 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_3 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_3 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_3 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_3 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_3 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_3 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_3 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_3 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_3 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_3 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_3 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_3 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_3 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_3 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_3 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_3 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_3 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_3 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_3 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_3);
                if (s >= 0)
                    return s;
                break;

            case 34:
                int LA69_5 = input.LA(1);

                int index69_5 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_5 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_5 == COMMA || LA69_5 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_5 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_5 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_5 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_5 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_5 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_5 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_5 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_5 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_5 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_5 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_5 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_5 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_5 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_5 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_5 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_5 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_5 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_5 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_5 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_5 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_5 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_5 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_5 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_5 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_5 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_5 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }

                input.seek(index69_5);
                if (s >= 0)
                    return s;
                break;

            case 35:
                int LA69_0 = input.LA(1);

                int index69_0 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_0 == ID))
                {
                    s = 1;
                }
                else if ((LA69_0 == FTSWORD))
                {
                    s = 2;
                }
                else if ((LA69_0 == FTSPRE))
                {
                    s = 3;
                }
                else if ((LA69_0 == FTSWILD))
                {
                    s = 4;
                }
                else if ((LA69_0 == NOT))
                {
                    s = 5;
                }
                else if ((LA69_0 == TO))
                {
                    s = 6;
                }
                else if ((LA69_0 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 7;
                }
                else if ((LA69_0 == FLOATING_POINT_LITERAL))
                {
                    s = 8;
                }
                else if ((LA69_0 == DATETIME))
                {
                    s = 9;
                }
                else if ((LA69_0 == STAR))
                {
                    s = 10;
                }
                else if ((LA69_0 == URI))
                {
                    s = 11;
                }
                else if ((LA69_0 == COMMA || LA69_0 == DOT) && (synpred34_FTS()))
                {
                    s = 12;
                }
                else if ((LA69_0 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 13;
                }
                else if ((LA69_0 == EQUALS))
                {
                    s = 14;
                }
                else if ((LA69_0 == FTSPHRASE))
                {
                    s = 15;
                }
                else if ((LA69_0 == TILDA))
                {
                    s = 16;
                }
                else if ((LA69_0 == LSQUARE) && (synpred46_FTS()))
                {
                    s = 17;
                }
                else if ((LA69_0 == LT) && (synpred46_FTS()))
                {
                    s = 18;
                }
                else if ((LA69_0 == LPAREN))
                {
                    s = 19;
                }

                input.seek(index69_0);
                if (s >= 0)
                    return s;
                break;

            case 36:
                int LA69_6 = input.LA(1);

                int index69_6 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_6 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_6 == COMMA || LA69_6 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_6 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_6 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_6 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_6 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_6 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_6 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_6 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_6 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_6 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_6 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_6 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_6 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_6 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_6 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_6 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_6 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_6 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_6 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_6 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_6 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_6 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_6 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_6 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_6 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_6 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_6 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }

                input.seek(index69_6);
                if (s >= 0)
                    return s;
                break;

            case 37:
                int LA69_174 = input.LA(1);

                int index69_174 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_174 == ID))
                {
                    s = 111;
                }
                else if ((LA69_174 == FTSWORD))
                {
                    s = 112;
                }
                else if ((LA69_174 == FTSPRE))
                {
                    s = 113;
                }
                else if ((LA69_174 == FTSWILD))
                {
                    s = 114;
                }
                else if ((LA69_174 == NOT))
                {
                    s = 115;
                }
                else if ((LA69_174 == TO))
                {
                    s = 116;
                }
                else if ((LA69_174 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 117;
                }
                else if ((LA69_174 == FLOATING_POINT_LITERAL))
                {
                    s = 118;
                }
                else if ((LA69_174 == DATETIME))
                {
                    s = 119;
                }
                else if ((LA69_174 == STAR))
                {
                    s = 185;
                }
                else if ((LA69_174 == URI))
                {
                    s = 121;
                }
                else if ((LA69_174 == CARAT) && (synpred34_FTS()))
                {
                    s = 124;
                }
                else if ((LA69_174 == AND) && (synpred34_FTS()))
                {
                    s = 125;
                }
                else if ((LA69_174 == AMP) && (synpred34_FTS()))
                {
                    s = 126;
                }
                else if ((LA69_174 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_174 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_174 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_174 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_174 == COMMA || LA69_174 == DOT) && (synpred34_FTS()))
                {
                    s = 173;
                }
                else if ((LA69_174 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_174 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_174 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_174 == TILDA) && (synpred34_FTS()))
                {
                    s = 186;
                }
                else if ((LA69_174 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_174 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_174 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_174 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_174 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }

                input.seek(index69_174);
                if (s >= 0)
                    return s;
                break;

            case 38:
                int LA69_4 = input.LA(1);

                int index69_4 = input.index();
                input.rewind();
                s = -1;
                if ((LA69_4 == STAR))
                {
                    s = 20;
                }
                else if ((LA69_4 == COMMA || LA69_4 == DOT) && (synpred34_FTS()))
                {
                    s = 21;
                }
                else if ((LA69_4 == TILDA) && (synpred34_FTS()))
                {
                    s = 22;
                }
                else if ((LA69_4 == CARAT) && (synpred34_FTS()))
                {
                    s = 23;
                }
                else if ((LA69_4 == AND) && (synpred34_FTS()))
                {
                    s = 24;
                }
                else if ((LA69_4 == AMP) && (synpred34_FTS()))
                {
                    s = 25;
                }
                else if ((LA69_4 == RPAREN) && (synpred34_FTS()))
                {
                    s = 26;
                }
                else if ((LA69_4 == OR) && (synpred34_FTS()))
                {
                    s = 27;
                }
                else if ((LA69_4 == BAR) && (synpred34_FTS()))
                {
                    s = 28;
                }
                else if ((LA69_4 == NOT) && (synpred34_FTS()))
                {
                    s = 29;
                }
                else if ((LA69_4 == ID) && (synpred34_FTS()))
                {
                    s = 30;
                }
                else if ((LA69_4 == FTSWORD) && (synpred34_FTS()))
                {
                    s = 31;
                }
                else if ((LA69_4 == FTSPRE) && (synpred34_FTS()))
                {
                    s = 32;
                }
                else if ((LA69_4 == FTSWILD) && (synpred34_FTS()))
                {
                    s = 33;
                }
                else if ((LA69_4 == EXCLAMATION) && (synpred34_FTS()))
                {
                    s = 34;
                }
                else if ((LA69_4 == TO) && (synpred34_FTS()))
                {
                    s = 35;
                }
                else if ((LA69_4 == DECIMAL_INTEGER_LITERAL) && (synpred34_FTS()))
                {
                    s = 36;
                }
                else if ((LA69_4 == FLOATING_POINT_LITERAL) && (synpred34_FTS()))
                {
                    s = 37;
                }
                else if ((LA69_4 == DATETIME) && (synpred34_FTS()))
                {
                    s = 38;
                }
                else if ((LA69_4 == URI) && (synpred34_FTS()))
                {
                    s = 39;
                }
                else if ((LA69_4 == QUESTION_MARK) && (synpred34_FTS()))
                {
                    s = 40;
                }
                else if ((LA69_4 == EQUALS) && (synpred34_FTS()))
                {
                    s = 41;
                }
                else if ((LA69_4 == FTSPHRASE) && (synpred34_FTS()))
                {
                    s = 42;
                }
                else if ((LA69_4 == LSQUARE) && (synpred34_FTS()))
                {
                    s = 43;
                }
                else if ((LA69_4 == LT) && (synpred34_FTS()))
                {
                    s = 44;
                }
                else if ((LA69_4 == LPAREN) && (synpred34_FTS()))
                {
                    s = 45;
                }
                else if ((LA69_4 == PLUS) && (synpred34_FTS()))
                {
                    s = 46;
                }
                else if ((LA69_4 == MINUS) && (synpred34_FTS()))
                {
                    s = 47;
                }
                else if ((LA69_4 == DOTDOT) && (synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_4);
                if (s >= 0)
                    return s;
                break;

            case 39:
                int LA69_119 = input.LA(1);

                int index69_119 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 155;
                }

                input.seek(index69_119);
                if (s >= 0)
                    return s;
                break;

            case 40:
                int LA69_161 = input.LA(1);

                int index69_161 = input.index();
                input.rewind();
                s = -1;
                if ((synpred33_FTS()))
                {
                    s = 130;
                }
                else if ((synpred34_FTS()))
                {
                    s = 184;
                }
                else if ((synpred46_FTS()))
                {
                    s = 48;
                }

                input.seek(index69_161);
                if (s >= 0)
                    return s;
                break;
            }
            if (state.backtracking > 0)
            {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    static final String DFA84_eotS = "\u01ca\uffff";
    static final String DFA84_eofS = "\2\uffff\13\33\1\uffff\13\42\1\uffff\1\70\1\uffff\5\33\1\130\1\uffff\5" +
            "\42\37\uffff\1\70\37\uffff\1\130\1\u009c\21\uffff\1\u00c1\60\uffff\1\u009c" +
            "\44\uffff\1\u00c1\5\uffff\1\u00f4\6\uffff\1\u0115\45\uffff\2\u00f4\37" +
            "\uffff\2\u0115\1\u015c\22\uffff\1\u0182\61\uffff\2\u015c\44\uffff\2\u0182" +
            "\27\uffff\1\u015c\22\uffff\1\u0182\14\uffff";
    static final String DFA84_minS = "\1\13\1\15\13\4\1\5\13\4\1\5\1\4\1\uffff\6\4\1\uffff\5\4\13\13\1\5\23" +
            "\uffff\1\4\13\13\1\5\23\uffff\2\4\1\uffff\5\13\1\0\12\13\1\4\1\uffff\5" +
            "\13\1\0\25\13\1\5\23\uffff\1\4\5\uffff\13\13\1\5\23\uffff\1\4\5\uffff" +
            "\1\4\6\13\1\4\21\13\1\5\23\uffff\2\4\13\13\1\5\23\uffff\3\4\21\13\1\5" +
            "\1\4\21\13\1\5\13\0\1\5\23\uffff\2\4\5\13\13\0\1\5\23\uffff\2\4\5\13\21" +
            "\0\1\5\1\4\21\0\1\5\1\4\14\0";
    static final String DFA84_maxS = "\15\150\1\146\13\150\1\146\1\150\1\uffff\6\150\1\uffff\5\150\13\25\1\146" +
            "\23\uffff\1\150\13\25\1\146\23\uffff\2\150\1\uffff\5\25\1\0\12\25\1\150" +
            "\1\uffff\5\25\1\0\25\25\1\146\23\uffff\1\150\5\uffff\13\25\1\146\23\uffff" +
            "\1\150\5\uffff\1\150\6\25\1\150\21\25\1\146\23\uffff\2\150\13\25\1\146" +
            "\23\uffff\3\150\21\25\1\146\1\150\21\25\1\146\13\0\1\146\23\uffff\2\150" +
            "\5\25\13\0\1\146\23\uffff\2\150\5\25\21\0\1\146\1\150\21\0\1\146\1\150" +
            "\14\0";
    static final String DFA84_acceptS = "\33\uffff\1\22\6\uffff\1\21\21\uffff\23\20\15\uffff\23\17\2\uffff\1\16" +
            "\21\uffff\1\15\34\uffff\23\14\1\uffff\1\2\1\4\1\6\1\10\1\12\14\uffff\23" +
            "\13\1\uffff\1\1\1\3\1\5\1\7\1\11\32\uffff\23\10\16\uffff\23\7\64\uffff" +
            "\23\4\23\uffff\23\3\71\uffff";
    static final String DFA84_specialS = "\32\uffff\1\u00f3\6\uffff\1\u00eb\6\uffff\1\u0087\1\u0096\1\u00d9\1\u00c5" +
            "\1\u00bc\1\21\1\u00a6\1\u00d5\1\u00d0\1\u009e\1\160\24\uffff\1\162\1\u0088" +
            "\1\u00ad\1\u00e6\1\33\1\64\1\17\1\170\1\u00e1\1\43\1\164\1\110\24\uffff" +
            "\1\u008e\1\104\1\uffff\1\u00ec\1\24\1\121\1\u0082\1\u00ba\1\u00a7\1\u0097" +
            "\1\u00da\1\u00c6\1\u00bd\1\22\1\u00a8\1\u00d6\1\u00d1\1\u009f\1\161\1" +
            "\146\1\uffff\1\116\1\u00cc\1\6\1\103\1\u00b3\1\60\1\u00ae\1\u00e7\1\34" +
            "\1\65\1\20\1\171\1\u00e2\1\44\1\165\1\111\1\172\1\u00aa\1\u00cb\1\u00e0" +
            "\1\26\1\u00cf\1\41\1\100\1\131\1\73\1\u00a4\24\uffff\1\122\5\uffff\1\51" +
            "\1\101\1\130\1\u0083\1\47\1\151\1\u00e5\1\14\1\55\1\u00e9\1\115\24\uffff" +
            "\1\166\5\uffff\1\106\1\15\1\135\1\u0080\1\u009b\1\u00c0\1\107\1\163\1" +
            "\147\1\u00f1\1\32\1\74\1\127\1\u00d3\1\136\1\u00b6\1\u00df\1\4\1\u00f2" +
            "\1\u009a\1\153\1\133\1\173\1\u008a\1\u00ca\24\uffff\1\u00e3\1\u00f0\1" +
            "\12\1\176\1\u00a5\1\u00c3\1\u0084\1\77\1\2\1\53\1\113\1\126\1\u008d\24" +
            "\uffff\1\114\1\3\1\u0092\1\u00c4\1\u00d4\1\u00ef\1\27\1\70\1\7\1\1\1\u008c" +
            "\1\u00ab\1\u0095\1\u00a1\1\150\1\11\1\52\1\112\1\35\1\u008f\1\uffff\1" +
            "\u00ea\1\36\1\117\1\157\1\u0090\1\u00b1\1\167\1\u00b0\1\62\1\42\1\102" +
            "\1\134\1\u00dc\1\u00a0\1\u00c1\1\u00de\1\u00ee\1\71\1\uffff\1\140\1\61" +
            "\1\120\1\154\1\174\1\u00c7\1\u009d\1\u00ce\1\u00e8\1\16\1\13\24\uffff" +
            "\1\u00d8\1\u00a3\1\66\1\144\1\u0089\1\u00a9\1\u00be\1\67\1\u00db\1\23" +
            "\1\75\1\u009c\1\132\1\141\1\177\1\u0098\1\u00b5\1\u00b8\24\uffff\1\76" +
            "\1\5\1\142\1\u00c2\1\u00dd\1\10\1\50\1\u0093\1\123\1\145\1\u0086\1\u00a2" +
            "\1\57\1\45\1\u00e4\1\31\1\63\1\105\1\u0085\1\137\1\175\1\u0099\1\u00c8" +
            "\1\u00b9\1\uffff\1\155\1\37\1\u00bb\1\u00d7\1\0\1\54\1\u00c9\1\u00bf\1" +
            "\u00ac\1\u0094\1\u00b4\1\25\1\46\1\56\1\125\1\156\1\u008b\1\u0081\1\uffff" +
            "\1\u00af\1\u00cd\1\30\1\72\1\124\1\152\1\u00b7\1\40\1\u0091\1\u00b2\1" +
            "\u00d2\1\u00ed\1\143}>";
    static final String[] DFA84_transitionS = {
            "\1\1\1\uffff\1\14\1\uffff\1\10\5\uffff\1\1\31\uffff\1\11\3\uffff\1\4" +
                    "\1\5\1\3\11\uffff\1\2\16\uffff\1\6\11\uffff\1\13\7\uffff\1\12\5\uffff" +
                    "\1\7\1\uffff\1\15",
            "\1\30\1\uffff\1\24\37\uffff\1\25\3\uffff\1\20\1\21\1\17\11\uffff\1\16" +
                    "\16\uffff\1\22\11\uffff\1\27\7\uffff\1\26\5\uffff\1\23\1\uffff\1\31",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\1\37\71\uffff\1\34\16\uffff\1\40\2\uffff\1\36\24\uffff\1\35",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\1\46\71\uffff\1\43\16\uffff\1\47\2\uffff\1\45\24\uffff\1\44",
            "\1\67\1\66\1\75\1\73\1\uffff\1\65\1\uffff\1\101\1\uffff\1\62\1\uffff" +
                    "\1\56\5\uffff\1\101\2\uffff\1\102\2\uffff\1\74\23\uffff\1\57\2\uffff" +
                    "\1\76\1\52\1\53\1\51\11\uffff\1\50\3\uffff\1\103\1\77\1\100\2\uffff\1" +
                    "\106\5\uffff\1\54\2\uffff\1\72\1\104\1\uffff\1\105\3\uffff\1\61\2\uffff" +
                    "\1\71\4\uffff\1\60\4\uffff\1\64\1\55\1\uffff\1\63",
            "",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\107\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1" +
                    "\33\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33" +
                    "\3\uffff\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\4\33\1\uffff\1\33\1\uffff\1\32\1\uffff\1\33\1\uffff\1\33\5\uffff\1" +
                    "\32\2\uffff\1\33\2\uffff\1\33\23\uffff\1\33\2\uffff\4\33\11\uffff\1\33" +
                    "\3\uffff\3\33\2\uffff\1\33\5\uffff\1\33\2\uffff\2\33\1\uffff\1\33\3\uffff" +
                    "\1\33\2\uffff\1\33\4\uffff\1\33\4\uffff\2\33\1\uffff\1\33",
            "\1\127\1\126\1\135\1\133\1\uffff\1\125\1\uffff\1\141\1\uffff\1\122\1" +
                    "\uffff\1\116\5\uffff\1\141\2\uffff\1\142\2\uffff\1\134\23\uffff\1\117" +
                    "\2\uffff\1\136\1\112\1\113\1\111\11\uffff\1\110\3\uffff\1\143\1\137\1" +
                    "\140\2\uffff\1\146\5\uffff\1\114\2\uffff\1\132\1\144\1\uffff\1\145\3" +
                    "\uffff\1\121\2\uffff\1\131\4\uffff\1\120\4\uffff\1\124\1\115\1\uffff" +
                    "\1\123",
            "",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\147\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1" +
                    "\42\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42" +
                    "\3\uffff\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\4\42\1\uffff\1\42\1\uffff\1\41\1\uffff\1\42\1\uffff\1\42\5\uffff\1" +
                    "\41\2\uffff\1\42\2\uffff\1\42\23\uffff\1\42\2\uffff\4\42\11\uffff\1\42" +
                    "\3\uffff\3\42\2\uffff\1\42\5\uffff\1\42\2\uffff\2\42\1\uffff\1\42\3\uffff" +
                    "\1\42\2\uffff\1\42\4\uffff\1\42\4\uffff\2\42\1\uffff\1\42",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\155\71\uffff\1\152\16\uffff\1\156\2\uffff\1\154\24\uffff\1\153",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\67\1\66\1\75\1\73\1\uffff\1\65\1\uffff\1\101\1\uffff\1\171\1\uffff" +
                    "\1\165\5\uffff\1\101\2\uffff\1\102\2\uffff\1\74\23\uffff\1\166\2\uffff" +
                    "\1\76\1\161\1\162\1\160\11\uffff\1\157\3\uffff\1\103\1\77\1\100\2\uffff" +
                    "\1\106\5\uffff\1\163\2\uffff\1\72\1\104\1\uffff\1\105\3\uffff\1\170\2" +
                    "\uffff\1\71\4\uffff\1\167\4\uffff\1\64\1\164\1\uffff\1\63",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\177\71\uffff\1\174\16\uffff\1\u0080\2\uffff\1\176\24\uffff\1\175",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\127\1\126\1\135\1\133\1\uffff\1\125\1\uffff\1\141\1\uffff\1\u008b" +
                    "\1\uffff\1\u0087\5\uffff\1\141\2\uffff\1\142\2\uffff\1\134\23\uffff\1" +
                    "\u0088\2\uffff\1\136\1\u0083\1\u0084\1\u0082\11\uffff\1\u0081\3\uffff" +
                    "\1\143\1\137\1\140\2\uffff\1\146\5\uffff\1\u0085\2\uffff\1\132\1\144" +
                    "\1\uffff\1\145\3\uffff\1\u008a\2\uffff\1\131\4\uffff\1\u0089\4\uffff" +
                    "\1\124\1\u0086\1\uffff\1\123",
            "\1\u009b\1\u009a\1\u00a1\1\u009f\1\uffff\1\u0099\1\uffff\1\u00a5\1\uffff" +
                    "\1\u0096\1\uffff\1\u0092\5\uffff\1\u00a5\2\uffff\1\u00a6\2\uffff\1\u00a0" +
                    "\23\uffff\1\u0093\2\uffff\1\u00a2\1\u008e\1\u008f\1\u008d\11\uffff\1" +
                    "\u008c\3\uffff\1\u00a7\1\u00a3\1\u00a4\2\uffff\1\u00aa\5\uffff\1\u0090" +
                    "\2\uffff\1\u009e\1\u00a8\1\uffff\1\u00a9\3\uffff\1\u0095\2\uffff\1\u009d" +
                    "\4\uffff\1\u0094\4\uffff\1\u0098\1\u0091\1\uffff\1\u0097",
            "",
            "\1\150\11\uffff\1\u00ab",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\uffff",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\150\11\uffff\1\150",
            "\1\u00c0\1\u00bf\1\u00c6\1\u00c4\1\uffff\1\u00be\1\uffff\1\u00ca\1\uffff" +
                    "\1\u00bb\1\uffff\1\u00b7\5\uffff\1\u00ca\2\uffff\1\u00cb\2\uffff\1\u00c5" +
                    "\23\uffff\1\u00b8\2\uffff\1\u00c7\1\u00b3\1\u00b4\1\u00b2\11\uffff\1" +
                    "\u00b1\3\uffff\1\u00cc\1\u00c8\1\u00c9\2\uffff\1\u00cf\5\uffff\1\u00b5" +
                    "\2\uffff\1\u00c3\1\u00cd\1\uffff\1\u00ce\3\uffff\1\u00ba\2\uffff\1\u00c2" +
                    "\4\uffff\1\u00b9\4\uffff\1\u00bd\1\u00b6\1\uffff\1\u00bc",
            "",
            "\1\172\11\uffff\1\u00d0",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\uffff",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\172\11\uffff\1\172",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00da\71\uffff\1\u00d7\16\uffff\1\u00db\2\uffff\1\u00d9\24\uffff" +
                    "\1\u00d8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\1\u009a\1\u00a1\1\u009f\1\uffff\1\u0099\1\uffff\1\u00a5\1\uffff" +
                    "\1\u0096\1\uffff\1\u0092\5\uffff\1\u00a5\2\uffff\1\u00a6\2\uffff\1\u00a0" +
                    "\23\uffff\1\u0093\2\uffff\1\u00a2\1\u008e\1\u008f\1\u008d\11\uffff\1" +
                    "\u00dc\3\uffff\1\u00a7\1\u00a3\1\u00a4\2\uffff\1\u00aa\5\uffff\1\u0090" +
                    "\2\uffff\1\u009e\1\u00a8\1\uffff\1\u00a9\3\uffff\1\u0095\2\uffff\1\u009d" +
                    "\4\uffff\1\u0094\4\uffff\1\u0098\1\u0091\1\uffff\1\u0097",
            "",
            "",
            "",
            "",
            "",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00e1\71\uffff\1\u00de\16\uffff\1\u00e2\2\uffff\1\u00e0\24\uffff" +
                    "\1\u00df",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c0\1\u00bf\1\u00c6\1\u00c4\1\uffff\1\u00be\1\uffff\1\u00ca\1\uffff" +
                    "\1\u00bb\1\uffff\1\u00b7\5\uffff\1\u00ca\2\uffff\1\u00cb\2\uffff\1\u00c5" +
                    "\23\uffff\1\u00b8\2\uffff\1\u00c7\1\u00b3\1\u00b4\1\u00b2\11\uffff\1" +
                    "\u00e3\3\uffff\1\u00cc\1\u00c8\1\u00c9\2\uffff\1\u00cf\5\uffff\1\u00b5" +
                    "\2\uffff\1\u00c3\1\u00cd\1\uffff\1\u00ce\3\uffff\1\u00ba\2\uffff\1\u00c2" +
                    "\4\uffff\1\u00b9\4\uffff\1\u00bd\1\u00b6\1\uffff\1\u00bc",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f3\1\u00f2\1\u00f9\1\u00f7\1\uffff\1\u00f1\1\uffff\1\u00fd\1\uffff" +
                    "\1\u00ee\1\uffff\1\u00ea\5\uffff\1\u00fd\2\uffff\1\u00fe\2\uffff\1\u00f8" +
                    "\23\uffff\1\u00eb\2\uffff\1\u00fa\1\u00e6\1\u00e7\1\u00e5\11\uffff\1" +
                    "\u00e4\3\uffff\1\u00ff\1\u00fb\1\u00fc\2\uffff\1\u0102\5\uffff\1\u00e8" +
                    "\2\uffff\1\u00f6\1\u0100\1\uffff\1\u0101\3\uffff\1\u00ed\2\uffff\1\u00f5" +
                    "\4\uffff\1\u00ec\4\uffff\1\u00f0\1\u00e9\1\uffff\1\u00ef",
            "\1\u00d6\11\uffff\1\u0103",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u00d6\11\uffff\1\u00d6",
            "\1\u0104\11\uffff\1\u0104",
            "\1\u0114\1\u0113\1\u011a\1\u0118\1\uffff\1\u0112\1\uffff\1\u011e\1\uffff" +
                    "\1\u010f\1\uffff\1\u010b\5\uffff\1\u011e\2\uffff\1\u011f\2\uffff\1\u0119" +
                    "\23\uffff\1\u010c\2\uffff\1\u011b\1\u0107\1\u0108\1\u0106\11\uffff\1" +
                    "\u0105\3\uffff\1\u0120\1\u011c\1\u011d\2\uffff\1\u0123\5\uffff\1\u0109" +
                    "\2\uffff\1\u0117\1\u0121\1\uffff\1\u0122\3\uffff\1\u010e\2\uffff\1\u0116" +
                    "\4\uffff\1\u010d\4\uffff\1\u0111\1\u010a\1\uffff\1\u0110",
            "\1\u00dd\11\uffff\1\u0124",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u00dd\11\uffff\1\u00dd",
            "\1\u0125\11\uffff\1\u0125",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u012a\71\uffff\1\u0127\16\uffff\1\u012b\2\uffff\1\u0129\24\uffff" +
                    "\1\u0128",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f3\1\u00f2\1\u00f9\1\u00f7\1\uffff\1\u00f1\1\uffff\1\u00fd\1\uffff" +
                    "\1\u00ee\1\uffff\1\u00ea\5\uffff\1\u00fd\2\uffff\1\u00fe\2\uffff\1\u00f8" +
                    "\23\uffff\1\u00eb\2\uffff\1\u00fa\1\u00e6\1\u00e7\1\u00e5\11\uffff\1" +
                    "\u012c\3\uffff\1\u00ff\1\u00fb\1\u00fc\2\uffff\1\u0102\5\uffff\1\u00e8" +
                    "\2\uffff\1\u00f6\1\u0100\1\uffff\1\u0101\3\uffff\1\u00ed\2\uffff\1\u00f5" +
                    "\4\uffff\1\u00ec\4\uffff\1\u00f0\1\u00e9\1\uffff\1\u00ef",
            "\1\u00f3\1\u00f2\1\u00f9\1\u00f7\1\uffff\1\u00f1\1\uffff\1\u00fd\1\uffff" +
                    "\1\u0137\1\uffff\1\u0133\5\uffff\1\u00fd\2\uffff\1\u00fe\2\uffff\1\u00f8" +
                    "\23\uffff\1\u0134\2\uffff\1\u00fa\1\u012f\1\u0130\1\u012e\11\uffff\1" +
                    "\u012d\3\uffff\1\u00ff\1\u00fb\1\u00fc\2\uffff\1\u0102\5\uffff\1\u0131" +
                    "\2\uffff\1\u00f6\1\u0100\1\uffff\1\u0101\3\uffff\1\u0136\2\uffff\1\u00f5" +
                    "\4\uffff\1\u0135\4\uffff\1\u00f0\1\u0132\1\uffff\1\u0138",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u013d\71\uffff\1\u013a\16\uffff\1\u013e\2\uffff\1\u013c\24\uffff" +
                    "\1\u013b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0114\1\u0113\1\u011a\1\u0118\1\uffff\1\u0112\1\uffff\1\u011e\1\uffff" +
                    "\1\u010f\1\uffff\1\u010b\5\uffff\1\u011e\2\uffff\1\u011f\2\uffff\1\u0119" +
                    "\23\uffff\1\u010c\2\uffff\1\u011b\1\u0107\1\u0108\1\u0106\11\uffff\1" +
                    "\u013f\3\uffff\1\u0120\1\u011c\1\u011d\2\uffff\1\u0123\5\uffff\1\u0109" +
                    "\2\uffff\1\u0117\1\u0121\1\uffff\1\u0122\3\uffff\1\u010e\2\uffff\1\u0116" +
                    "\4\uffff\1\u010d\4\uffff\1\u0111\1\u010a\1\uffff\1\u0110",
            "\1\u0114\1\u0113\1\u011a\1\u0118\1\uffff\1\u0112\1\uffff\1\u011e\1\uffff" +
                    "\1\u014a\1\uffff\1\u0146\5\uffff\1\u011e\2\uffff\1\u011f\2\uffff\1\u0119" +
                    "\23\uffff\1\u0147\2\uffff\1\u011b\1\u0142\1\u0143\1\u0141\11\uffff\1" +
                    "\u0140\3\uffff\1\u0120\1\u011c\1\u011d\2\uffff\1\u0123\5\uffff\1\u0144" +
                    "\2\uffff\1\u0117\1\u0121\1\uffff\1\u0122\3\uffff\1\u0149\2\uffff\1\u0116" +
                    "\4\uffff\1\u0148\4\uffff\1\u0111\1\u0145\1\uffff\1\u014b",
            "\1\u015b\1\u015a\1\u0161\1\u015f\1\uffff\1\u0159\1\uffff\1\u0165\1\uffff" +
                    "\1\u0156\1\uffff\1\u0152\5\uffff\1\u0165\2\uffff\1\u0166\2\uffff\1\u0160" +
                    "\23\uffff\1\u0153\2\uffff\1\u0162\1\u014e\1\u014f\1\u014d\11\uffff\1" +
                    "\u014c\3\uffff\1\u0167\1\u0163\1\u0164\2\uffff\1\u016a\5\uffff\1\u0150" +
                    "\2\uffff\1\u015e\1\u0168\1\uffff\1\u0169\3\uffff\1\u0155\2\uffff\1\u015d" +
                    "\4\uffff\1\u0154\4\uffff\1\u0158\1\u0151\1\uffff\1\u0157",
            "\1\u0126\11\uffff\1\u016b",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u0126\11\uffff\1\u0126",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u0170\71\uffff\1\u016d\16\uffff\1\u0171\2\uffff\1\u016f\24\uffff" +
                    "\1\u016e",
            "\1\u0181\1\u0180\1\u0187\1\u0185\1\uffff\1\u017f\1\uffff\1\u018b\1\uffff" +
                    "\1\u017c\1\uffff\1\u0178\5\uffff\1\u018b\2\uffff\1\u018c\2\uffff\1\u0186" +
                    "\23\uffff\1\u0179\2\uffff\1\u0188\1\u0174\1\u0175\1\u0173\11\uffff\1" +
                    "\u0172\3\uffff\1\u018d\1\u0189\1\u018a\2\uffff\1\u0190\5\uffff\1\u0176" +
                    "\2\uffff\1\u0184\1\u018e\1\uffff\1\u018f\3\uffff\1\u017b\2\uffff\1\u0183" +
                    "\4\uffff\1\u017a\4\uffff\1\u017e\1\u0177\1\uffff\1\u017d",
            "\1\u0139\11\uffff\1\u0191",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0139\11\uffff\1\u0139",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0196\71\uffff\1\u0193\16\uffff\1\u0197\2\uffff\1\u0195\24\uffff" +
                    "\1\u0194",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u019b\71\uffff\1\u0198\16\uffff\1\u019c\2\uffff\1\u019a\24\uffff" +
                    "\1\u0199",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015b\1\u015a\1\u0161\1\u015f\1\uffff\1\u0159\1\uffff\1\u0165\1\uffff" +
                    "\1\u0156\1\uffff\1\u0152\5\uffff\1\u0165\2\uffff\1\u0166\2\uffff\1\u0160" +
                    "\23\uffff\1\u0153\2\uffff\1\u0162\1\u014e\1\u014f\1\u014d\11\uffff\1" +
                    "\u019d\3\uffff\1\u0167\1\u0163\1\u0164\2\uffff\1\u016a\5\uffff\1\u0150" +
                    "\2\uffff\1\u015e\1\u0168\1\uffff\1\u0169\3\uffff\1\u0155\2\uffff\1\u015d" +
                    "\4\uffff\1\u0154\4\uffff\1\u0158\1\u0151\1\uffff\1\u0157",
            "\1\u015b\1\u015a\1\u0161\1\u015f\1\uffff\1\u0159\1\uffff\1\u0165\1\uffff" +
                    "\1\u01a8\1\uffff\1\u01a4\5\uffff\1\u0165\2\uffff\1\u0166\2\uffff\1\u0160" +
                    "\23\uffff\1\u01a5\2\uffff\1\u0162\1\u01a0\1\u01a1\1\u019f\11\uffff\1" +
                    "\u019e\3\uffff\1\u0167\1\u0163\1\u0164\2\uffff\1\u016a\5\uffff\1\u01a2" +
                    "\2\uffff\1\u015e\1\u0168\1\uffff\1\u0169\3\uffff\1\u01a7\2\uffff\1\u015d" +
                    "\4\uffff\1\u01a6\4\uffff\1\u0158\1\u01a3\1\uffff\1\u01a9",
            "\1\u016c\11\uffff\1\u01aa",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\u016c\11\uffff\1\u016c",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u01ae\71\uffff\1\u01ab\16\uffff\1\u01af\2\uffff\1\u01ad\24\uffff" +
                    "\1\u01ac",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0181\1\u0180\1\u0187\1\u0185\1\uffff\1\u017f\1\uffff\1\u018b\1\uffff" +
                    "\1\u017c\1\uffff\1\u0178\5\uffff\1\u018b\2\uffff\1\u018c\2\uffff\1\u0186" +
                    "\23\uffff\1\u0179\2\uffff\1\u0188\1\u0174\1\u0175\1\u0173\11\uffff\1" +
                    "\u01b0\3\uffff\1\u018d\1\u0189\1\u018a\2\uffff\1\u0190\5\uffff\1\u0176" +
                    "\2\uffff\1\u0184\1\u018e\1\uffff\1\u018f\3\uffff\1\u017b\2\uffff\1\u0183" +
                    "\4\uffff\1\u017a\4\uffff\1\u017e\1\u0177\1\uffff\1\u017d",
            "\1\u0181\1\u0180\1\u0187\1\u0185\1\uffff\1\u017f\1\uffff\1\u018b\1\uffff" +
                    "\1\u01bb\1\uffff\1\u01b7\5\uffff\1\u018b\2\uffff\1\u018c\2\uffff\1\u0186" +
                    "\23\uffff\1\u01b8\2\uffff\1\u0188\1\u01b3\1\u01b4\1\u01b2\11\uffff\1" +
                    "\u01b1\3\uffff\1\u018d\1\u0189\1\u018a\2\uffff\1\u0190\5\uffff\1\u01b5" +
                    "\2\uffff\1\u0184\1\u018e\1\uffff\1\u018f\3\uffff\1\u01ba\2\uffff\1\u0183" +
                    "\4\uffff\1\u01b9\4\uffff\1\u017e\1\u01b6\1\uffff\1\u01bc",
            "\1\u0192\11\uffff\1\u01bd",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\u0192\11\uffff\1\u0192",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u01c1\71\uffff\1\u01be\16\uffff\1\u01c2\2\uffff\1\u01c0\24\uffff" +
                    "\1\u01bf",
            "\1\u015b\1\u015a\1\u0161\1\u015f\1\uffff\1\u0159\1\uffff\1\u0165\1\uffff" +
                    "\1\u01a8\1\uffff\1\u01a4\5\uffff\1\u0165\2\uffff\1\u0166\2\uffff\1\u0160" +
                    "\23\uffff\1\u01a5\2\uffff\1\u0162\1\u01a0\1\u01a1\1\u019f\11\uffff\1" +
                    "\u01c3\3\uffff\1\u0167\1\u0163\1\u0164\2\uffff\1\u016a\5\uffff\1\u01a2" +
                    "\2\uffff\1\u015e\1\u0168\1\uffff\1\u0169\3\uffff\1\u01a7\2\uffff\1\u015d" +
                    "\4\uffff\1\u01a6\4\uffff\1\u0158\1\u01a3\1\uffff\1\u01a9",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u01c7\71\uffff\1\u01c4\16\uffff\1\u01c8\2\uffff\1\u01c6\24\uffff" +
                    "\1\u01c5",
            "\1\u0181\1\u0180\1\u0187\1\u0185\1\uffff\1\u017f\1\uffff\1\u018b\1\uffff" +
                    "\1\u01bb\1\uffff\1\u01b7\5\uffff\1\u018b\2\uffff\1\u018c\2\uffff\1\u0186" +
                    "\23\uffff\1\u01b8\2\uffff\1\u0188\1\u01b3\1\u01b4\1\u01b2\11\uffff\1" +
                    "\u01c9\3\uffff\1\u018d\1\u0189\1\u018a\2\uffff\1\u0190\5\uffff\1\u01b5" +
                    "\2\uffff\1\u0184\1\u018e\1\uffff\1\u018f\3\uffff\1\u01ba\2\uffff\1\u0183" +
                    "\4\uffff\1\u01b9\4\uffff\1\u017e\1\u01b6\1\uffff\1\u01bc",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static
    {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i = 0; i < numStates; i++)
        {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    protected class DFA84 extends DFA
    {

        public DFA84(BaseRecognizer recognizer)
        {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }

        @Override
        public String getDescription()
        {
            return "870:1: ftsWord : ( ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase DOT | COMMA ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ftsWordBase ( DOT | COMMA ) ftsWordBase )=> ftsWordBase ( DOT | COMMA ) ftsWordBase | ( ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) )=> ( DOT | COMMA ) ftsWordBase ( DOT | COMMA ) | ( ftsWordBase ( DOT | COMMA ) )=> ftsWordBase ( DOT | COMMA ) | ( DOT | COMMA ) ftsWordBase | ftsWordBase );";
        }

        @Override
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException
        {
            TokenStream input = (TokenStream) _input;
            int _s = s;
            switch (s)
            {
            case 0:
                int LA84_430 = input.LA(1);

                int index84_430 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_430);
                if (s >= 0)
                    return s;
                break;

            case 1:
                int LA84_301 = input.LA(1);

                int index84_301 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_301 == COMMA || LA84_301 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_301);
                if (s >= 0)
                    return s;
                break;

            case 2:
                int LA84_267 = input.LA(1);

                int index84_267 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_267 == COMMA || LA84_267 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_267);
                if (s >= 0)
                    return s;
                break;

            case 3:
                int LA84_293 = input.LA(1);

                int index84_293 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_293 == ID))
                {
                    s = 320;
                }
                else if ((LA84_293 == FTSWORD))
                {
                    s = 321;
                }
                else if ((LA84_293 == FTSPRE))
                {
                    s = 322;
                }
                else if ((LA84_293 == FTSWILD))
                {
                    s = 323;
                }
                else if ((LA84_293 == NOT))
                {
                    s = 324;
                }
                else if ((LA84_293 == TO))
                {
                    s = 325;
                }
                else if ((LA84_293 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 326;
                }
                else if ((LA84_293 == FLOATING_POINT_LITERAL))
                {
                    s = 327;
                }
                else if ((LA84_293 == STAR))
                {
                    s = 328;
                }
                else if ((LA84_293 == QUESTION_MARK))
                {
                    s = 329;
                }
                else if ((LA84_293 == DATETIME))
                {
                    s = 330;
                }
                else if ((LA84_293 == URI))
                {
                    s = 331;
                }
                else if ((LA84_293 == TILDA) && (synpred55_FTS()))
                {
                    s = 273;
                }
                else if ((LA84_293 == CARAT) && (synpred55_FTS()))
                {
                    s = 274;
                }
                else if ((LA84_293 == AND) && (synpred55_FTS()))
                {
                    s = 275;
                }
                else if ((LA84_293 == AMP) && (synpred55_FTS()))
                {
                    s = 276;
                }
                else if ((LA84_293 == EOF) && (synpred55_FTS()))
                {
                    s = 277;
                }
                else if ((LA84_293 == RPAREN) && (synpred55_FTS()))
                {
                    s = 278;
                }
                else if ((LA84_293 == OR) && (synpred55_FTS()))
                {
                    s = 279;
                }
                else if ((LA84_293 == BAR) && (synpred55_FTS()))
                {
                    s = 280;
                }
                else if ((LA84_293 == EXCLAMATION) && (synpred55_FTS()))
                {
                    s = 281;
                }
                else if ((LA84_293 == AT) && (synpred55_FTS()))
                {
                    s = 282;
                }
                else if ((LA84_293 == FTSPHRASE) && (synpred55_FTS()))
                {
                    s = 283;
                }
                else if ((LA84_293 == LSQUARE) && (synpred55_FTS()))
                {
                    s = 284;
                }
                else if ((LA84_293 == LT) && (synpred55_FTS()))
                {
                    s = 285;
                }
                else if ((LA84_293 == COMMA || LA84_293 == DOT) && (synpred55_FTS()))
                {
                    s = 286;
                }
                else if ((LA84_293 == EQUALS) && (synpred55_FTS()))
                {
                    s = 287;
                }
                else if ((LA84_293 == LPAREN) && (synpred55_FTS()))
                {
                    s = 288;
                }
                else if ((LA84_293 == PERCENT) && (synpred55_FTS()))
                {
                    s = 289;
                }
                else if ((LA84_293 == PLUS) && (synpred55_FTS()))
                {
                    s = 290;
                }
                else if ((LA84_293 == MINUS) && (synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_293);
                if (s >= 0)
                    return s;
                break;

            case 4:
                int LA84_231 = input.LA(1);

                int index84_231 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_231 == COMMA || LA84_231 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_231);
                if (s >= 0)
                    return s;
                break;

            case 5:
                int LA84_402 = input.LA(1);

                int index84_402 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_402 == ID))
                {
                    s = 433;
                }
                else if ((LA84_402 == FTSWORD))
                {
                    s = 434;
                }
                else if ((LA84_402 == FTSPRE))
                {
                    s = 435;
                }
                else if ((LA84_402 == FTSWILD))
                {
                    s = 436;
                }
                else if ((LA84_402 == NOT))
                {
                    s = 437;
                }
                else if ((LA84_402 == TO))
                {
                    s = 438;
                }
                else if ((LA84_402 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 439;
                }
                else if ((LA84_402 == FLOATING_POINT_LITERAL))
                {
                    s = 440;
                }
                else if ((LA84_402 == STAR))
                {
                    s = 441;
                }
                else if ((LA84_402 == QUESTION_MARK))
                {
                    s = 442;
                }
                else if ((LA84_402 == DATETIME))
                {
                    s = 443;
                }
                else if ((LA84_402 == URI))
                {
                    s = 444;
                }
                else if ((LA84_402 == TILDA) && (synpred51_FTS()))
                {
                    s = 382;
                }
                else if ((LA84_402 == CARAT) && (synpred51_FTS()))
                {
                    s = 383;
                }
                else if ((LA84_402 == AND) && (synpred51_FTS()))
                {
                    s = 384;
                }
                else if ((LA84_402 == AMP) && (synpred51_FTS()))
                {
                    s = 385;
                }
                else if ((LA84_402 == EOF) && (synpred51_FTS()))
                {
                    s = 386;
                }
                else if ((LA84_402 == RPAREN) && (synpred51_FTS()))
                {
                    s = 387;
                }
                else if ((LA84_402 == OR) && (synpred51_FTS()))
                {
                    s = 388;
                }
                else if ((LA84_402 == BAR) && (synpred51_FTS()))
                {
                    s = 389;
                }
                else if ((LA84_402 == EXCLAMATION) && (synpred51_FTS()))
                {
                    s = 390;
                }
                else if ((LA84_402 == AT) && (synpred51_FTS()))
                {
                    s = 391;
                }
                else if ((LA84_402 == FTSPHRASE) && (synpred51_FTS()))
                {
                    s = 392;
                }
                else if ((LA84_402 == LSQUARE) && (synpred51_FTS()))
                {
                    s = 393;
                }
                else if ((LA84_402 == LT) && (synpred51_FTS()))
                {
                    s = 394;
                }
                else if ((LA84_402 == COMMA || LA84_402 == DOT) && (synpred51_FTS()))
                {
                    s = 395;
                }
                else if ((LA84_402 == EQUALS) && (synpred51_FTS()))
                {
                    s = 396;
                }
                else if ((LA84_402 == LPAREN) && (synpred51_FTS()))
                {
                    s = 397;
                }
                else if ((LA84_402 == PERCENT) && (synpred51_FTS()))
                {
                    s = 398;
                }
                else if ((LA84_402 == PLUS) && (synpred51_FTS()))
                {
                    s = 399;
                }
                else if ((LA84_402 == MINUS) && (synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_402);
                if (s >= 0)
                    return s;
                break;

            case 6:
                int LA84_126 = input.LA(1);

                int index84_126 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_126 == COMMA || LA84_126 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_126);
                if (s >= 0)
                    return s;
                break;

            case 7:
                int LA84_300 = input.LA(1);

                int index84_300 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_300 == COMMA || LA84_300 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_300);
                if (s >= 0)
                    return s;
                break;

            case 8:
                int LA84_406 = input.LA(1);

                int index84_406 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_406 == COMMA || LA84_406 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_406);
                if (s >= 0)
                    return s;
                break;

            case 9:
                int LA84_307 = input.LA(1);

                int index84_307 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_307 == COMMA || LA84_307 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_307);
                if (s >= 0)
                    return s;
                break;

            case 10:
                int LA84_261 = input.LA(1);

                int index84_261 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_261 == COMMA || LA84_261 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_261);
                if (s >= 0)
                    return s;
                break;

            case 11:
                int LA84_342 = input.LA(1);

                int index84_342 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_342);
                if (s >= 0)
                    return s;
                break;

            case 12:
                int LA84_184 = input.LA(1);

                int index84_184 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_184 == COMMA || LA84_184 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_184);
                if (s >= 0)
                    return s;
                break;

            case 13:
                int LA84_215 = input.LA(1);

                int index84_215 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_215 == DOT))
                {
                    s = 259;
                }
                else if ((LA84_215 == COMMA))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_215);
                if (s >= 0)
                    return s;
                break;

            case 14:
                int LA84_341 = input.LA(1);

                int index84_341 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_341);
                if (s >= 0)
                    return s;
                break;

            case 15:
                int LA84_77 = input.LA(1);

                int index84_77 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_77 == COMMA || LA84_77 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_77);
                if (s >= 0)
                    return s;
                break;

            case 16:
                int LA84_134 = input.LA(1);

                int index84_134 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_134 == COMMA || LA84_134 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_134);
                if (s >= 0)
                    return s;
                break;

            case 17:
                int LA84_45 = input.LA(1);

                int index84_45 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_45 == COMMA || LA84_45 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_45);
                if (s >= 0)
                    return s;
                break;

            case 18:
                int LA84_116 = input.LA(1);

                int index84_116 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_116 == COMMA || LA84_116 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_116);
                if (s >= 0)
                    return s;
                break;

            case 19:
                int LA84_372 = input.LA(1);

                int index84_372 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_372);
                if (s >= 0)
                    return s;
                break;

            case 20:
                int LA84_107 = input.LA(1);

                int index84_107 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_107 == COMMA || LA84_107 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_107);
                if (s >= 0)
                    return s;
                break;

            case 21:
                int LA84_437 = input.LA(1);

                int index84_437 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_437);
                if (s >= 0)
                    return s;
                break;

            case 22:
                int LA84_144 = input.LA(1);

                int index84_144 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_144 == COMMA || LA84_144 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_144);
                if (s >= 0)
                    return s;
                break;

            case 23:
                int LA84_298 = input.LA(1);

                int index84_298 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_298 == COMMA || LA84_298 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_298);
                if (s >= 0)
                    return s;
                break;

            case 24:
                int LA84_447 = input.LA(1);

                int index84_447 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_447);
                if (s >= 0)
                    return s;
                break;

            case 25:
                int LA84_416 = input.LA(1);

                int index84_416 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_416);
                if (s >= 0)
                    return s;
                break;

            case 26:
                int LA84_224 = input.LA(1);

                int index84_224 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_224 == COMMA || LA84_224 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_224);
                if (s >= 0)
                    return s;
                break;

            case 27:
                int LA84_75 = input.LA(1);

                int index84_75 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_75 == COMMA || LA84_75 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_75);
                if (s >= 0)
                    return s;
                break;

            case 28:
                int LA84_132 = input.LA(1);

                int index84_132 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_132 == COMMA || LA84_132 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_132);
                if (s >= 0)
                    return s;
                break;

            case 29:
                int LA84_310 = input.LA(1);

                int index84_310 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_310 == COMMA || LA84_310 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_310);
                if (s >= 0)
                    return s;
                break;

            case 30:
                int LA84_314 = input.LA(1);

                int index84_314 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_314 == DOT))
                {
                    s = 401;
                }
                else if ((LA84_314 == COMMA))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_314);
                if (s >= 0)
                    return s;
                break;

            case 31:
                int LA84_427 = input.LA(1);

                int index84_427 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_427);
                if (s >= 0)
                    return s;
                break;

            case 32:
                int LA84_452 = input.LA(1);

                int index84_452 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_452);
                if (s >= 0)
                    return s;
                break;

            case 33:
                int LA84_146 = input.LA(1);

                int index84_146 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_146 == COMMA || LA84_146 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_146);
                if (s >= 0)
                    return s;
                break;

            case 34:
                int LA84_322 = input.LA(1);

                int index84_322 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_322 == COMMA || LA84_322 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_322);
                if (s >= 0)
                    return s;
                break;

            case 35:
                int LA84_80 = input.LA(1);

                int index84_80 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_80 == COMMA || LA84_80 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_80);
                if (s >= 0)
                    return s;
                break;

            case 36:
                int LA84_137 = input.LA(1);

                int index84_137 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_137 == COMMA || LA84_137 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_137);
                if (s >= 0)
                    return s;
                break;

            case 37:
                int LA84_414 = input.LA(1);

                int index84_414 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_414);
                if (s >= 0)
                    return s;
                break;

            case 38:
                int LA84_438 = input.LA(1);

                int index84_438 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_438);
                if (s >= 0)
                    return s;
                break;

            case 39:
                int LA84_181 = input.LA(1);

                int index84_181 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_181 == COMMA || LA84_181 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_181);
                if (s >= 0)
                    return s;
                break;

            case 40:
                int LA84_407 = input.LA(1);

                int index84_407 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_407 == COMMA || LA84_407 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_407);
                if (s >= 0)
                    return s;
                break;

            case 41:
                int LA84_177 = input.LA(1);

                int index84_177 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_177 == COMMA || LA84_177 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_177);
                if (s >= 0)
                    return s;
                break;

            case 42:
                int LA84_308 = input.LA(1);

                int index84_308 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_308 == COMMA || LA84_308 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_308);
                if (s >= 0)
                    return s;
                break;

            case 43:
                int LA84_268 = input.LA(1);

                int index84_268 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_268 == COMMA || LA84_268 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_268);
                if (s >= 0)
                    return s;
                break;

            case 44:
                int LA84_431 = input.LA(1);

                int index84_431 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_431);
                if (s >= 0)
                    return s;
                break;

            case 45:
                int LA84_185 = input.LA(1);

                int index84_185 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_185 == COMMA || LA84_185 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_185);
                if (s >= 0)
                    return s;
                break;

            case 46:
                int LA84_439 = input.LA(1);

                int index84_439 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_439);
                if (s >= 0)
                    return s;
                break;

            case 47:
                int LA84_413 = input.LA(1);

                int index84_413 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_413);
                if (s >= 0)
                    return s;
                break;

            case 48:
                int LA84_129 = input.LA(1);

                int index84_129 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 210;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 212;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_129);
                if (s >= 0)
                    return s;
                break;

            case 49:
                int LA84_333 = input.LA(1);

                int index84_333 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_333);
                if (s >= 0)
                    return s;
                break;

            case 50:
                int LA84_321 = input.LA(1);

                int index84_321 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_321 == COMMA || LA84_321 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_321);
                if (s >= 0)
                    return s;
                break;

            case 51:
                int LA84_417 = input.LA(1);

                int index84_417 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_417);
                if (s >= 0)
                    return s;
                break;

            case 52:
                int LA84_76 = input.LA(1);

                int index84_76 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_76 == COMMA || LA84_76 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_76);
                if (s >= 0)
                    return s;
                break;

            case 53:
                int LA84_133 = input.LA(1);

                int index84_133 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_133 == COMMA || LA84_133 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_133);
                if (s >= 0)
                    return s;
                break;

            case 54:
                int LA84_365 = input.LA(1);

                int index84_365 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_365 == DOT))
                {
                    s = 426;
                }
                else if ((LA84_365 == COMMA))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_365);
                if (s >= 0)
                    return s;
                break;

            case 55:
                int LA84_370 = input.LA(1);

                int index84_370 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_370);
                if (s >= 0)
                    return s;
                break;

            case 56:
                int LA84_299 = input.LA(1);

                int index84_299 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_299 == COMMA || LA84_299 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_299);
                if (s >= 0)
                    return s;
                break;

            case 57:
                int LA84_330 = input.LA(1);

                int index84_330 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_330 == COMMA || LA84_330 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_330);
                if (s >= 0)
                    return s;
                break;

            case 58:
                int LA84_448 = input.LA(1);

                int index84_448 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_448);
                if (s >= 0)
                    return s;
                break;

            case 59:
                int LA84_149 = input.LA(1);

                int index84_149 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_149 == COMMA || LA84_149 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_149);
                if (s >= 0)
                    return s;
                break;

            case 60:
                int LA84_225 = input.LA(1);

                int index84_225 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_225 == COMMA || LA84_225 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_225);
                if (s >= 0)
                    return s;
                break;

            case 61:
                int LA84_373 = input.LA(1);

                int index84_373 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_373);
                if (s >= 0)
                    return s;
                break;

            case 62:
                int LA84_401 = input.LA(1);

                int index84_401 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_401 == ID))
                {
                    s = 432;
                }
                else if ((LA84_401 == FTSWORD))
                {
                    s = 371;
                }
                else if ((LA84_401 == FTSPRE))
                {
                    s = 372;
                }
                else if ((LA84_401 == FTSWILD))
                {
                    s = 373;
                }
                else if ((LA84_401 == NOT))
                {
                    s = 374;
                }
                else if ((LA84_401 == TO))
                {
                    s = 375;
                }
                else if ((LA84_401 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 376;
                }
                else if ((LA84_401 == FLOATING_POINT_LITERAL))
                {
                    s = 377;
                }
                else if ((LA84_401 == STAR))
                {
                    s = 378;
                }
                else if ((LA84_401 == QUESTION_MARK))
                {
                    s = 379;
                }
                else if ((LA84_401 == DATETIME))
                {
                    s = 380;
                }
                else if ((LA84_401 == URI))
                {
                    s = 381;
                }
                else if ((LA84_401 == TILDA) && (synpred51_FTS()))
                {
                    s = 382;
                }
                else if ((LA84_401 == CARAT) && (synpred51_FTS()))
                {
                    s = 383;
                }
                else if ((LA84_401 == AND) && (synpred51_FTS()))
                {
                    s = 384;
                }
                else if ((LA84_401 == AMP) && (synpred51_FTS()))
                {
                    s = 385;
                }
                else if ((LA84_401 == EOF) && (synpred51_FTS()))
                {
                    s = 386;
                }
                else if ((LA84_401 == RPAREN) && (synpred51_FTS()))
                {
                    s = 387;
                }
                else if ((LA84_401 == OR) && (synpred51_FTS()))
                {
                    s = 388;
                }
                else if ((LA84_401 == BAR) && (synpred51_FTS()))
                {
                    s = 389;
                }
                else if ((LA84_401 == EXCLAMATION) && (synpred51_FTS()))
                {
                    s = 390;
                }
                else if ((LA84_401 == AT) && (synpred51_FTS()))
                {
                    s = 391;
                }
                else if ((LA84_401 == FTSPHRASE) && (synpred51_FTS()))
                {
                    s = 392;
                }
                else if ((LA84_401 == LSQUARE) && (synpred51_FTS()))
                {
                    s = 393;
                }
                else if ((LA84_401 == LT) && (synpred51_FTS()))
                {
                    s = 394;
                }
                else if ((LA84_401 == COMMA || LA84_401 == DOT) && (synpred51_FTS()))
                {
                    s = 395;
                }
                else if ((LA84_401 == EQUALS) && (synpred51_FTS()))
                {
                    s = 396;
                }
                else if ((LA84_401 == LPAREN) && (synpred51_FTS()))
                {
                    s = 397;
                }
                else if ((LA84_401 == PERCENT) && (synpred51_FTS()))
                {
                    s = 398;
                }
                else if ((LA84_401 == PLUS) && (synpred51_FTS()))
                {
                    s = 399;
                }
                else if ((LA84_401 == MINUS) && (synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_401);
                if (s >= 0)
                    return s;
                break;

            case 63:
                int LA84_266 = input.LA(1);

                int index84_266 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_266 == COMMA || LA84_266 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_266);
                if (s >= 0)
                    return s;
                break;

            case 64:
                int LA84_147 = input.LA(1);

                int index84_147 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_147 == COMMA || LA84_147 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_147);
                if (s >= 0)
                    return s;
                break;

            case 65:
                int LA84_178 = input.LA(1);

                int index84_178 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_178 == COMMA || LA84_178 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_178);
                if (s >= 0)
                    return s;
                break;

            case 66:
                int LA84_323 = input.LA(1);

                int index84_323 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_323 == COMMA || LA84_323 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_323);
                if (s >= 0)
                    return s;
                break;

            case 67:
                int LA84_127 = input.LA(1);

                int index84_127 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_127 == COMMA || LA84_127 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_127);
                if (s >= 0)
                    return s;
                break;

            case 68:
                int LA84_104 = input.LA(1);

                int index84_104 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_104 == ID))
                {
                    s = 140;
                }
                else if ((LA84_104 == FTSWORD))
                {
                    s = 141;
                }
                else if ((LA84_104 == FTSPRE))
                {
                    s = 142;
                }
                else if ((LA84_104 == FTSWILD))
                {
                    s = 143;
                }
                else if ((LA84_104 == NOT))
                {
                    s = 144;
                }
                else if ((LA84_104 == TO))
                {
                    s = 145;
                }
                else if ((LA84_104 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 146;
                }
                else if ((LA84_104 == FLOATING_POINT_LITERAL))
                {
                    s = 147;
                }
                else if ((LA84_104 == STAR))
                {
                    s = 148;
                }
                else if ((LA84_104 == QUESTION_MARK))
                {
                    s = 149;
                }
                else if ((LA84_104 == DATETIME))
                {
                    s = 150;
                }
                else if ((LA84_104 == URI))
                {
                    s = 151;
                }
                else if ((LA84_104 == TILDA) && (synpred60_FTS()))
                {
                    s = 152;
                }
                else if ((LA84_104 == CARAT) && (synpred60_FTS()))
                {
                    s = 153;
                }
                else if ((LA84_104 == AND) && (synpred60_FTS()))
                {
                    s = 154;
                }
                else if ((LA84_104 == AMP) && (synpred60_FTS()))
                {
                    s = 155;
                }
                else if ((LA84_104 == EOF) && (synpred60_FTS()))
                {
                    s = 156;
                }
                else if ((LA84_104 == RPAREN) && (synpred60_FTS()))
                {
                    s = 157;
                }
                else if ((LA84_104 == OR) && (synpred60_FTS()))
                {
                    s = 158;
                }
                else if ((LA84_104 == BAR) && (synpred60_FTS()))
                {
                    s = 159;
                }
                else if ((LA84_104 == EXCLAMATION) && (synpred60_FTS()))
                {
                    s = 160;
                }
                else if ((LA84_104 == AT) && (synpred60_FTS()))
                {
                    s = 161;
                }
                else if ((LA84_104 == FTSPHRASE) && (synpred60_FTS()))
                {
                    s = 162;
                }
                else if ((LA84_104 == LSQUARE) && (synpred60_FTS()))
                {
                    s = 163;
                }
                else if ((LA84_104 == LT) && (synpred60_FTS()))
                {
                    s = 164;
                }
                else if ((LA84_104 == COMMA || LA84_104 == DOT) && (synpred60_FTS()))
                {
                    s = 165;
                }
                else if ((LA84_104 == EQUALS) && (synpred60_FTS()))
                {
                    s = 166;
                }
                else if ((LA84_104 == LPAREN) && (synpred60_FTS()))
                {
                    s = 167;
                }
                else if ((LA84_104 == PERCENT) && (synpred60_FTS()))
                {
                    s = 168;
                }
                else if ((LA84_104 == PLUS) && (synpred60_FTS()))
                {
                    s = 169;
                }
                else if ((LA84_104 == MINUS) && (synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_104);
                if (s >= 0)
                    return s;
                break;

            case 69:
                int LA84_418 = input.LA(1);

                int index84_418 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_418);
                if (s >= 0)
                    return s;
                break;

            case 70:
                int LA84_214 = input.LA(1);

                int index84_214 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_214 == ID))
                {
                    s = 228;
                }
                else if ((LA84_214 == FTSWORD))
                {
                    s = 229;
                }
                else if ((LA84_214 == FTSPRE))
                {
                    s = 230;
                }
                else if ((LA84_214 == FTSWILD))
                {
                    s = 231;
                }
                else if ((LA84_214 == NOT))
                {
                    s = 232;
                }
                else if ((LA84_214 == TO))
                {
                    s = 233;
                }
                else if ((LA84_214 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 234;
                }
                else if ((LA84_214 == FLOATING_POINT_LITERAL))
                {
                    s = 235;
                }
                else if ((LA84_214 == STAR))
                {
                    s = 236;
                }
                else if ((LA84_214 == QUESTION_MARK))
                {
                    s = 237;
                }
                else if ((LA84_214 == DATETIME))
                {
                    s = 238;
                }
                else if ((LA84_214 == URI))
                {
                    s = 239;
                }
                else if ((LA84_214 == TILDA) && (synpred56_FTS()))
                {
                    s = 240;
                }
                else if ((LA84_214 == CARAT) && (synpred56_FTS()))
                {
                    s = 241;
                }
                else if ((LA84_214 == AND) && (synpred56_FTS()))
                {
                    s = 242;
                }
                else if ((LA84_214 == AMP) && (synpred56_FTS()))
                {
                    s = 243;
                }
                else if ((LA84_214 == EOF) && (synpred56_FTS()))
                {
                    s = 244;
                }
                else if ((LA84_214 == RPAREN) && (synpred56_FTS()))
                {
                    s = 245;
                }
                else if ((LA84_214 == OR) && (synpred56_FTS()))
                {
                    s = 246;
                }
                else if ((LA84_214 == BAR) && (synpred56_FTS()))
                {
                    s = 247;
                }
                else if ((LA84_214 == EXCLAMATION) && (synpred56_FTS()))
                {
                    s = 248;
                }
                else if ((LA84_214 == AT) && (synpred56_FTS()))
                {
                    s = 249;
                }
                else if ((LA84_214 == FTSPHRASE) && (synpred56_FTS()))
                {
                    s = 250;
                }
                else if ((LA84_214 == LSQUARE) && (synpred56_FTS()))
                {
                    s = 251;
                }
                else if ((LA84_214 == LT) && (synpred56_FTS()))
                {
                    s = 252;
                }
                else if ((LA84_214 == COMMA || LA84_214 == DOT) && (synpred56_FTS()))
                {
                    s = 253;
                }
                else if ((LA84_214 == EQUALS) && (synpred56_FTS()))
                {
                    s = 254;
                }
                else if ((LA84_214 == LPAREN) && (synpred56_FTS()))
                {
                    s = 255;
                }
                else if ((LA84_214 == PERCENT) && (synpred56_FTS()))
                {
                    s = 256;
                }
                else if ((LA84_214 == PLUS) && (synpred56_FTS()))
                {
                    s = 257;
                }
                else if ((LA84_214 == MINUS) && (synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_214);
                if (s >= 0)
                    return s;
                break;

            case 71:
                int LA84_220 = input.LA(1);

                int index84_220 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_220 == COMMA || LA84_220 == DOT))
                {
                    s = 260;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_220);
                if (s >= 0)
                    return s;
                break;

            case 72:
                int LA84_82 = input.LA(1);

                int index84_82 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_82 == COMMA || LA84_82 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_82);
                if (s >= 0)
                    return s;
                break;

            case 73:
                int LA84_139 = input.LA(1);

                int index84_139 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_139 == COMMA || LA84_139 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_139);
                if (s >= 0)
                    return s;
                break;

            case 74:
                int LA84_309 = input.LA(1);

                int index84_309 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_309 == COMMA || LA84_309 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_309);
                if (s >= 0)
                    return s;
                break;

            case 75:
                int LA84_269 = input.LA(1);

                int index84_269 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_269 == COMMA || LA84_269 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_269);
                if (s >= 0)
                    return s;
                break;

            case 76:
                int LA84_292 = input.LA(1);

                int index84_292 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_292 == ID))
                {
                    s = 319;
                }
                else if ((LA84_292 == FTSWORD))
                {
                    s = 262;
                }
                else if ((LA84_292 == FTSPRE))
                {
                    s = 263;
                }
                else if ((LA84_292 == FTSWILD))
                {
                    s = 264;
                }
                else if ((LA84_292 == NOT))
                {
                    s = 265;
                }
                else if ((LA84_292 == TO))
                {
                    s = 266;
                }
                else if ((LA84_292 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 267;
                }
                else if ((LA84_292 == FLOATING_POINT_LITERAL))
                {
                    s = 268;
                }
                else if ((LA84_292 == STAR))
                {
                    s = 269;
                }
                else if ((LA84_292 == QUESTION_MARK))
                {
                    s = 270;
                }
                else if ((LA84_292 == DATETIME))
                {
                    s = 271;
                }
                else if ((LA84_292 == URI))
                {
                    s = 272;
                }
                else if ((LA84_292 == TILDA) && (synpred55_FTS()))
                {
                    s = 273;
                }
                else if ((LA84_292 == CARAT) && (synpred55_FTS()))
                {
                    s = 274;
                }
                else if ((LA84_292 == AND) && (synpred55_FTS()))
                {
                    s = 275;
                }
                else if ((LA84_292 == AMP) && (synpred55_FTS()))
                {
                    s = 276;
                }
                else if ((LA84_292 == EOF) && (synpred55_FTS()))
                {
                    s = 277;
                }
                else if ((LA84_292 == RPAREN) && (synpred55_FTS()))
                {
                    s = 278;
                }
                else if ((LA84_292 == OR) && (synpred55_FTS()))
                {
                    s = 279;
                }
                else if ((LA84_292 == BAR) && (synpred55_FTS()))
                {
                    s = 280;
                }
                else if ((LA84_292 == EXCLAMATION) && (synpred55_FTS()))
                {
                    s = 281;
                }
                else if ((LA84_292 == AT) && (synpred55_FTS()))
                {
                    s = 282;
                }
                else if ((LA84_292 == FTSPHRASE) && (synpred55_FTS()))
                {
                    s = 283;
                }
                else if ((LA84_292 == LSQUARE) && (synpred55_FTS()))
                {
                    s = 284;
                }
                else if ((LA84_292 == LT) && (synpred55_FTS()))
                {
                    s = 285;
                }
                else if ((LA84_292 == COMMA || LA84_292 == DOT) && (synpred55_FTS()))
                {
                    s = 286;
                }
                else if ((LA84_292 == EQUALS) && (synpred55_FTS()))
                {
                    s = 287;
                }
                else if ((LA84_292 == LPAREN) && (synpred55_FTS()))
                {
                    s = 288;
                }
                else if ((LA84_292 == PERCENT) && (synpred55_FTS()))
                {
                    s = 289;
                }
                else if ((LA84_292 == PLUS) && (synpred55_FTS()))
                {
                    s = 290;
                }
                else if ((LA84_292 == MINUS) && (synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_292);
                if (s >= 0)
                    return s;
                break;

            case 77:
                int LA84_187 = input.LA(1);

                int index84_187 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_187 == COMMA || LA84_187 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_187);
                if (s >= 0)
                    return s;
                break;

            case 78:
                int LA84_124 = input.LA(1);

                int index84_124 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_124 == DOT))
                {
                    s = 208;
                }
                else if ((LA84_124 == COMMA))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_124);
                if (s >= 0)
                    return s;
                break;

            case 79:
                int LA84_315 = input.LA(1);

                int index84_315 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_315 == COMMA || LA84_315 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_315);
                if (s >= 0)
                    return s;
                break;

            case 80:
                int LA84_334 = input.LA(1);

                int index84_334 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_334);
                if (s >= 0)
                    return s;
                break;

            case 81:
                int LA84_108 = input.LA(1);

                int index84_108 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_108 == COMMA || LA84_108 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_108);
                if (s >= 0)
                    return s;
                break;

            case 82:
                int LA84_171 = input.LA(1);

                int index84_171 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_171 == ID))
                {
                    s = 220;
                }
                else if ((LA84_171 == FTSWORD))
                {
                    s = 141;
                }
                else if ((LA84_171 == FTSPRE))
                {
                    s = 142;
                }
                else if ((LA84_171 == FTSWILD))
                {
                    s = 143;
                }
                else if ((LA84_171 == NOT))
                {
                    s = 144;
                }
                else if ((LA84_171 == TO))
                {
                    s = 145;
                }
                else if ((LA84_171 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 146;
                }
                else if ((LA84_171 == FLOATING_POINT_LITERAL))
                {
                    s = 147;
                }
                else if ((LA84_171 == STAR))
                {
                    s = 148;
                }
                else if ((LA84_171 == QUESTION_MARK))
                {
                    s = 149;
                }
                else if ((LA84_171 == DATETIME))
                {
                    s = 150;
                }
                else if ((LA84_171 == URI))
                {
                    s = 151;
                }
                else if ((LA84_171 == TILDA) && (synpred60_FTS()))
                {
                    s = 152;
                }
                else if ((LA84_171 == CARAT) && (synpred60_FTS()))
                {
                    s = 153;
                }
                else if ((LA84_171 == AND) && (synpred60_FTS()))
                {
                    s = 154;
                }
                else if ((LA84_171 == AMP) && (synpred60_FTS()))
                {
                    s = 155;
                }
                else if ((LA84_171 == EOF) && (synpred60_FTS()))
                {
                    s = 156;
                }
                else if ((LA84_171 == RPAREN) && (synpred60_FTS()))
                {
                    s = 157;
                }
                else if ((LA84_171 == OR) && (synpred60_FTS()))
                {
                    s = 158;
                }
                else if ((LA84_171 == BAR) && (synpred60_FTS()))
                {
                    s = 159;
                }
                else if ((LA84_171 == EXCLAMATION) && (synpred60_FTS()))
                {
                    s = 160;
                }
                else if ((LA84_171 == AT) && (synpred60_FTS()))
                {
                    s = 161;
                }
                else if ((LA84_171 == FTSPHRASE) && (synpred60_FTS()))
                {
                    s = 162;
                }
                else if ((LA84_171 == LSQUARE) && (synpred60_FTS()))
                {
                    s = 163;
                }
                else if ((LA84_171 == LT) && (synpred60_FTS()))
                {
                    s = 164;
                }
                else if ((LA84_171 == COMMA || LA84_171 == DOT) && (synpred60_FTS()))
                {
                    s = 165;
                }
                else if ((LA84_171 == EQUALS) && (synpred60_FTS()))
                {
                    s = 166;
                }
                else if ((LA84_171 == LPAREN) && (synpred60_FTS()))
                {
                    s = 167;
                }
                else if ((LA84_171 == PERCENT) && (synpred60_FTS()))
                {
                    s = 168;
                }
                else if ((LA84_171 == PLUS) && (synpred60_FTS()))
                {
                    s = 169;
                }
                else if ((LA84_171 == MINUS) && (synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_171);
                if (s >= 0)
                    return s;
                break;

            case 83:
                int LA84_409 = input.LA(1);

                int index84_409 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_409);
                if (s >= 0)
                    return s;
                break;

            case 84:
                int LA84_449 = input.LA(1);

                int index84_449 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_449);
                if (s >= 0)
                    return s;
                break;

            case 85:
                int LA84_440 = input.LA(1);

                int index84_440 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_440);
                if (s >= 0)
                    return s;
                break;

            case 86:
                int LA84_270 = input.LA(1);

                int index84_270 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_270 == COMMA || LA84_270 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_270);
                if (s >= 0)
                    return s;
                break;

            case 87:
                int LA84_226 = input.LA(1);

                int index84_226 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_226 == COMMA || LA84_226 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_226);
                if (s >= 0)
                    return s;
                break;

            case 88:
                int LA84_179 = input.LA(1);

                int index84_179 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_179 == COMMA || LA84_179 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_179);
                if (s >= 0)
                    return s;
                break;

            case 89:
                int LA84_148 = input.LA(1);

                int index84_148 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_148 == COMMA || LA84_148 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_148);
                if (s >= 0)
                    return s;
                break;

            case 90:
                int LA84_375 = input.LA(1);

                int index84_375 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_375);
                if (s >= 0)
                    return s;
                break;

            case 91:
                int LA84_235 = input.LA(1);

                int index84_235 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_235 == COMMA || LA84_235 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_235);
                if (s >= 0)
                    return s;
                break;

            case 92:
                int LA84_324 = input.LA(1);

                int index84_324 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_324 == COMMA || LA84_324 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_324);
                if (s >= 0)
                    return s;
                break;

            case 93:
                int LA84_216 = input.LA(1);

                int index84_216 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_216 == COMMA || LA84_216 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_216);
                if (s >= 0)
                    return s;
                break;

            case 94:
                int LA84_228 = input.LA(1);

                int index84_228 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_228 == COMMA || LA84_228 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_228);
                if (s >= 0)
                    return s;
                break;

            case 95:
                int LA84_420 = input.LA(1);

                int index84_420 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_420);
                if (s >= 0)
                    return s;
                break;

            case 96:
                int LA84_332 = input.LA(1);

                int index84_332 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_332);
                if (s >= 0)
                    return s;
                break;

            case 97:
                int LA84_376 = input.LA(1);

                int index84_376 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_376);
                if (s >= 0)
                    return s;
                break;

            case 98:
                int LA84_403 = input.LA(1);

                int index84_403 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_403 == DOT))
                {
                    s = 445;
                }
                else if ((LA84_403 == COMMA))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_403);
                if (s >= 0)
                    return s;
                break;

            case 99:
                int LA84_457 = input.LA(1);

                int index84_457 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_457);
                if (s >= 0)
                    return s;
                break;

            case 100:
                int LA84_366 = input.LA(1);

                int index84_366 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_366 == COMMA || LA84_366 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_366);
                if (s >= 0)
                    return s;
                break;

            case 101:
                int LA84_410 = input.LA(1);

                int index84_410 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_410);
                if (s >= 0)
                    return s;
                break;

            case 102:
                int LA84_122 = input.LA(1);

                int index84_122 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_122 == ID))
                {
                    s = 177;
                }
                else if ((LA84_122 == FTSWORD))
                {
                    s = 178;
                }
                else if ((LA84_122 == FTSPRE))
                {
                    s = 179;
                }
                else if ((LA84_122 == FTSWILD))
                {
                    s = 180;
                }
                else if ((LA84_122 == NOT))
                {
                    s = 181;
                }
                else if ((LA84_122 == TO))
                {
                    s = 182;
                }
                else if ((LA84_122 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 183;
                }
                else if ((LA84_122 == FLOATING_POINT_LITERAL))
                {
                    s = 184;
                }
                else if ((LA84_122 == STAR))
                {
                    s = 185;
                }
                else if ((LA84_122 == QUESTION_MARK))
                {
                    s = 186;
                }
                else if ((LA84_122 == DATETIME))
                {
                    s = 187;
                }
                else if ((LA84_122 == URI))
                {
                    s = 188;
                }
                else if ((LA84_122 == TILDA) && (synpred59_FTS()))
                {
                    s = 189;
                }
                else if ((LA84_122 == CARAT) && (synpred59_FTS()))
                {
                    s = 190;
                }
                else if ((LA84_122 == AND) && (synpred59_FTS()))
                {
                    s = 191;
                }
                else if ((LA84_122 == AMP) && (synpred59_FTS()))
                {
                    s = 192;
                }
                else if ((LA84_122 == EOF) && (synpred59_FTS()))
                {
                    s = 193;
                }
                else if ((LA84_122 == RPAREN) && (synpred59_FTS()))
                {
                    s = 194;
                }
                else if ((LA84_122 == OR) && (synpred59_FTS()))
                {
                    s = 195;
                }
                else if ((LA84_122 == BAR) && (synpred59_FTS()))
                {
                    s = 196;
                }
                else if ((LA84_122 == EXCLAMATION) && (synpred59_FTS()))
                {
                    s = 197;
                }
                else if ((LA84_122 == AT) && (synpred59_FTS()))
                {
                    s = 198;
                }
                else if ((LA84_122 == FTSPHRASE) && (synpred59_FTS()))
                {
                    s = 199;
                }
                else if ((LA84_122 == LSQUARE) && (synpred59_FTS()))
                {
                    s = 200;
                }
                else if ((LA84_122 == LT) && (synpred59_FTS()))
                {
                    s = 201;
                }
                else if ((LA84_122 == COMMA || LA84_122 == DOT) && (synpred59_FTS()))
                {
                    s = 202;
                }
                else if ((LA84_122 == EQUALS) && (synpred59_FTS()))
                {
                    s = 203;
                }
                else if ((LA84_122 == LPAREN) && (synpred59_FTS()))
                {
                    s = 204;
                }
                else if ((LA84_122 == PERCENT) && (synpred59_FTS()))
                {
                    s = 205;
                }
                else if ((LA84_122 == PLUS) && (synpred59_FTS()))
                {
                    s = 206;
                }
                else if ((LA84_122 == MINUS) && (synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_122);
                if (s >= 0)
                    return s;
                break;

            case 103:
                int LA84_222 = input.LA(1);

                int index84_222 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_222 == DOT))
                {
                    s = 292;
                }
                else if ((LA84_222 == COMMA))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_222);
                if (s >= 0)
                    return s;
                break;

            case 104:
                int LA84_306 = input.LA(1);

                int index84_306 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_306 == COMMA || LA84_306 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_306);
                if (s >= 0)
                    return s;
                break;

            case 105:
                int LA84_182 = input.LA(1);

                int index84_182 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_182 == COMMA || LA84_182 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_182);
                if (s >= 0)
                    return s;
                break;

            case 106:
                int LA84_450 = input.LA(1);

                int index84_450 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_450);
                if (s >= 0)
                    return s;
                break;

            case 107:
                int LA84_234 = input.LA(1);

                int index84_234 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_234 == COMMA || LA84_234 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_234);
                if (s >= 0)
                    return s;
                break;

            case 108:
                int LA84_335 = input.LA(1);

                int index84_335 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_335);
                if (s >= 0)
                    return s;
                break;

            case 109:
                int LA84_426 = input.LA(1);

                int index84_426 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_426 == ID))
                {
                    s = 451;
                }
                else if ((LA84_426 == FTSWORD))
                {
                    s = 415;
                }
                else if ((LA84_426 == FTSPRE))
                {
                    s = 416;
                }
                else if ((LA84_426 == FTSWILD))
                {
                    s = 417;
                }
                else if ((LA84_426 == NOT))
                {
                    s = 418;
                }
                else if ((LA84_426 == TO))
                {
                    s = 419;
                }
                else if ((LA84_426 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 420;
                }
                else if ((LA84_426 == FLOATING_POINT_LITERAL))
                {
                    s = 421;
                }
                else if ((LA84_426 == STAR))
                {
                    s = 422;
                }
                else if ((LA84_426 == QUESTION_MARK))
                {
                    s = 423;
                }
                else if ((LA84_426 == DATETIME))
                {
                    s = 424;
                }
                else if ((LA84_426 == URI))
                {
                    s = 425;
                }
                else if ((LA84_426 == TILDA) && (synpred52_FTS()))
                {
                    s = 344;
                }
                else if ((LA84_426 == CARAT) && (synpred52_FTS()))
                {
                    s = 345;
                }
                else if ((LA84_426 == AND) && (synpred52_FTS()))
                {
                    s = 346;
                }
                else if ((LA84_426 == AMP) && (synpred52_FTS()))
                {
                    s = 347;
                }
                else if ((LA84_426 == EOF) && (synpred52_FTS()))
                {
                    s = 348;
                }
                else if ((LA84_426 == RPAREN) && (synpred52_FTS()))
                {
                    s = 349;
                }
                else if ((LA84_426 == OR) && (synpred52_FTS()))
                {
                    s = 350;
                }
                else if ((LA84_426 == BAR) && (synpred52_FTS()))
                {
                    s = 351;
                }
                else if ((LA84_426 == EXCLAMATION) && (synpred52_FTS()))
                {
                    s = 352;
                }
                else if ((LA84_426 == AT) && (synpred52_FTS()))
                {
                    s = 353;
                }
                else if ((LA84_426 == FTSPHRASE) && (synpred52_FTS()))
                {
                    s = 354;
                }
                else if ((LA84_426 == LSQUARE) && (synpred52_FTS()))
                {
                    s = 355;
                }
                else if ((LA84_426 == LT) && (synpred52_FTS()))
                {
                    s = 356;
                }
                else if ((LA84_426 == COMMA || LA84_426 == DOT) && (synpred52_FTS()))
                {
                    s = 357;
                }
                else if ((LA84_426 == EQUALS) && (synpred52_FTS()))
                {
                    s = 358;
                }
                else if ((LA84_426 == LPAREN) && (synpred52_FTS()))
                {
                    s = 359;
                }
                else if ((LA84_426 == PERCENT) && (synpred52_FTS()))
                {
                    s = 360;
                }
                else if ((LA84_426 == PLUS) && (synpred52_FTS()))
                {
                    s = 361;
                }
                else if ((LA84_426 == MINUS) && (synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_426);
                if (s >= 0)
                    return s;
                break;

            case 110:
                int LA84_441 = input.LA(1);

                int index84_441 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_441);
                if (s >= 0)
                    return s;
                break;

            case 111:
                int LA84_316 = input.LA(1);

                int index84_316 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_316 == COMMA || LA84_316 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_316);
                if (s >= 0)
                    return s;
                break;

            case 112:
                int LA84_50 = input.LA(1);

                int index84_50 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_50 == COMMA || LA84_50 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_50);
                if (s >= 0)
                    return s;
                break;

            case 113:
                int LA84_121 = input.LA(1);

                int index84_121 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_121 == COMMA || LA84_121 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_121);
                if (s >= 0)
                    return s;
                break;

            case 114:
                int LA84_71 = input.LA(1);

                int index84_71 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_71 == ID))
                {
                    s = 111;
                }
                else if ((LA84_71 == FTSWORD))
                {
                    s = 112;
                }
                else if ((LA84_71 == FTSPRE))
                {
                    s = 113;
                }
                else if ((LA84_71 == FTSWILD))
                {
                    s = 114;
                }
                else if ((LA84_71 == NOT))
                {
                    s = 115;
                }
                else if ((LA84_71 == TO))
                {
                    s = 116;
                }
                else if ((LA84_71 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 117;
                }
                else if ((LA84_71 == FLOATING_POINT_LITERAL))
                {
                    s = 118;
                }
                else if ((LA84_71 == STAR))
                {
                    s = 119;
                }
                else if ((LA84_71 == QUESTION_MARK))
                {
                    s = 120;
                }
                else if ((LA84_71 == DATETIME))
                {
                    s = 121;
                }
                else if ((LA84_71 == URI))
                {
                    s = 51;
                }
                else if ((LA84_71 == TILDA) && (synpred64_FTS()))
                {
                    s = 52;
                }
                else if ((LA84_71 == CARAT) && (synpred64_FTS()))
                {
                    s = 53;
                }
                else if ((LA84_71 == AND) && (synpred64_FTS()))
                {
                    s = 54;
                }
                else if ((LA84_71 == AMP) && (synpred64_FTS()))
                {
                    s = 55;
                }
                else if ((LA84_71 == EOF) && (synpred64_FTS()))
                {
                    s = 56;
                }
                else if ((LA84_71 == RPAREN) && (synpred64_FTS()))
                {
                    s = 57;
                }
                else if ((LA84_71 == OR) && (synpred64_FTS()))
                {
                    s = 58;
                }
                else if ((LA84_71 == BAR) && (synpred64_FTS()))
                {
                    s = 59;
                }
                else if ((LA84_71 == EXCLAMATION) && (synpred64_FTS()))
                {
                    s = 60;
                }
                else if ((LA84_71 == AT) && (synpred64_FTS()))
                {
                    s = 61;
                }
                else if ((LA84_71 == FTSPHRASE) && (synpred64_FTS()))
                {
                    s = 62;
                }
                else if ((LA84_71 == LSQUARE) && (synpred64_FTS()))
                {
                    s = 63;
                }
                else if ((LA84_71 == LT) && (synpred64_FTS()))
                {
                    s = 64;
                }
                else if ((LA84_71 == COMMA || LA84_71 == DOT) && (synpred64_FTS()))
                {
                    s = 65;
                }
                else if ((LA84_71 == EQUALS) && (synpred64_FTS()))
                {
                    s = 66;
                }
                else if ((LA84_71 == LPAREN) && (synpred64_FTS()))
                {
                    s = 67;
                }
                else if ((LA84_71 == PERCENT) && (synpred64_FTS()))
                {
                    s = 68;
                }
                else if ((LA84_71 == PLUS) && (synpred64_FTS()))
                {
                    s = 69;
                }
                else if ((LA84_71 == MINUS) && (synpred64_FTS()))
                {
                    s = 70;
                }

                input.seek(index84_71);
                if (s >= 0)
                    return s;
                break;

            case 115:
                int LA84_221 = input.LA(1);

                int index84_221 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_221 == ID))
                {
                    s = 261;
                }
                else if ((LA84_221 == FTSWORD))
                {
                    s = 262;
                }
                else if ((LA84_221 == FTSPRE))
                {
                    s = 263;
                }
                else if ((LA84_221 == FTSWILD))
                {
                    s = 264;
                }
                else if ((LA84_221 == NOT))
                {
                    s = 265;
                }
                else if ((LA84_221 == TO))
                {
                    s = 266;
                }
                else if ((LA84_221 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 267;
                }
                else if ((LA84_221 == FLOATING_POINT_LITERAL))
                {
                    s = 268;
                }
                else if ((LA84_221 == STAR))
                {
                    s = 269;
                }
                else if ((LA84_221 == QUESTION_MARK))
                {
                    s = 270;
                }
                else if ((LA84_221 == DATETIME))
                {
                    s = 271;
                }
                else if ((LA84_221 == URI))
                {
                    s = 272;
                }
                else if ((LA84_221 == TILDA) && (synpred55_FTS()))
                {
                    s = 273;
                }
                else if ((LA84_221 == CARAT) && (synpred55_FTS()))
                {
                    s = 274;
                }
                else if ((LA84_221 == AND) && (synpred55_FTS()))
                {
                    s = 275;
                }
                else if ((LA84_221 == AMP) && (synpred55_FTS()))
                {
                    s = 276;
                }
                else if ((LA84_221 == EOF) && (synpred55_FTS()))
                {
                    s = 277;
                }
                else if ((LA84_221 == RPAREN) && (synpred55_FTS()))
                {
                    s = 278;
                }
                else if ((LA84_221 == OR) && (synpred55_FTS()))
                {
                    s = 279;
                }
                else if ((LA84_221 == BAR) && (synpred55_FTS()))
                {
                    s = 280;
                }
                else if ((LA84_221 == EXCLAMATION) && (synpred55_FTS()))
                {
                    s = 281;
                }
                else if ((LA84_221 == AT) && (synpred55_FTS()))
                {
                    s = 282;
                }
                else if ((LA84_221 == FTSPHRASE) && (synpred55_FTS()))
                {
                    s = 283;
                }
                else if ((LA84_221 == LSQUARE) && (synpred55_FTS()))
                {
                    s = 284;
                }
                else if ((LA84_221 == LT) && (synpred55_FTS()))
                {
                    s = 285;
                }
                else if ((LA84_221 == COMMA || LA84_221 == DOT) && (synpred55_FTS()))
                {
                    s = 286;
                }
                else if ((LA84_221 == EQUALS) && (synpred55_FTS()))
                {
                    s = 287;
                }
                else if ((LA84_221 == LPAREN) && (synpred55_FTS()))
                {
                    s = 288;
                }
                else if ((LA84_221 == PERCENT) && (synpred55_FTS()))
                {
                    s = 289;
                }
                else if ((LA84_221 == PLUS) && (synpred55_FTS()))
                {
                    s = 290;
                }
                else if ((LA84_221 == MINUS) && (synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_221);
                if (s >= 0)
                    return s;
                break;

            case 116:
                int LA84_81 = input.LA(1);

                int index84_81 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_81 == COMMA || LA84_81 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_81);
                if (s >= 0)
                    return s;
                break;

            case 117:
                int LA84_138 = input.LA(1);

                int index84_138 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_138 == COMMA || LA84_138 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_138);
                if (s >= 0)
                    return s;
                break;

            case 118:
                int LA84_208 = input.LA(1);

                int index84_208 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_208 == ID))
                {
                    s = 227;
                }
                else if ((LA84_208 == FTSWORD))
                {
                    s = 178;
                }
                else if ((LA84_208 == FTSPRE))
                {
                    s = 179;
                }
                else if ((LA84_208 == FTSWILD))
                {
                    s = 180;
                }
                else if ((LA84_208 == NOT))
                {
                    s = 181;
                }
                else if ((LA84_208 == TO))
                {
                    s = 182;
                }
                else if ((LA84_208 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 183;
                }
                else if ((LA84_208 == FLOATING_POINT_LITERAL))
                {
                    s = 184;
                }
                else if ((LA84_208 == STAR))
                {
                    s = 185;
                }
                else if ((LA84_208 == QUESTION_MARK))
                {
                    s = 186;
                }
                else if ((LA84_208 == DATETIME))
                {
                    s = 187;
                }
                else if ((LA84_208 == URI))
                {
                    s = 188;
                }
                else if ((LA84_208 == TILDA) && (synpred59_FTS()))
                {
                    s = 189;
                }
                else if ((LA84_208 == CARAT) && (synpred59_FTS()))
                {
                    s = 190;
                }
                else if ((LA84_208 == AND) && (synpred59_FTS()))
                {
                    s = 191;
                }
                else if ((LA84_208 == AMP) && (synpred59_FTS()))
                {
                    s = 192;
                }
                else if ((LA84_208 == EOF) && (synpred59_FTS()))
                {
                    s = 193;
                }
                else if ((LA84_208 == RPAREN) && (synpred59_FTS()))
                {
                    s = 194;
                }
                else if ((LA84_208 == OR) && (synpred59_FTS()))
                {
                    s = 195;
                }
                else if ((LA84_208 == BAR) && (synpred59_FTS()))
                {
                    s = 196;
                }
                else if ((LA84_208 == EXCLAMATION) && (synpred59_FTS()))
                {
                    s = 197;
                }
                else if ((LA84_208 == AT) && (synpred59_FTS()))
                {
                    s = 198;
                }
                else if ((LA84_208 == FTSPHRASE) && (synpred59_FTS()))
                {
                    s = 199;
                }
                else if ((LA84_208 == LSQUARE) && (synpred59_FTS()))
                {
                    s = 200;
                }
                else if ((LA84_208 == LT) && (synpred59_FTS()))
                {
                    s = 201;
                }
                else if ((LA84_208 == COMMA || LA84_208 == DOT) && (synpred59_FTS()))
                {
                    s = 202;
                }
                else if ((LA84_208 == EQUALS) && (synpred59_FTS()))
                {
                    s = 203;
                }
                else if ((LA84_208 == LPAREN) && (synpred59_FTS()))
                {
                    s = 204;
                }
                else if ((LA84_208 == PERCENT) && (synpred59_FTS()))
                {
                    s = 205;
                }
                else if ((LA84_208 == PLUS) && (synpred59_FTS()))
                {
                    s = 206;
                }
                else if ((LA84_208 == MINUS) && (synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_208);
                if (s >= 0)
                    return s;
                break;

            case 119:
                int LA84_319 = input.LA(1);

                int index84_319 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_319 == COMMA || LA84_319 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_319);
                if (s >= 0)
                    return s;
                break;

            case 120:
                int LA84_78 = input.LA(1);

                int index84_78 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_78 == COMMA || LA84_78 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_78);
                if (s >= 0)
                    return s;
                break;

            case 121:
                int LA84_135 = input.LA(1);

                int index84_135 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_135 == COMMA || LA84_135 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_135);
                if (s >= 0)
                    return s;
                break;

            case 122:
                int LA84_140 = input.LA(1);

                int index84_140 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_140 == COMMA || LA84_140 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_140);
                if (s >= 0)
                    return s;
                break;

            case 123:
                int LA84_236 = input.LA(1);

                int index84_236 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_236 == COMMA || LA84_236 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_236);
                if (s >= 0)
                    return s;
                break;

            case 124:
                int LA84_336 = input.LA(1);

                int index84_336 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_336);
                if (s >= 0)
                    return s;
                break;

            case 125:
                int LA84_421 = input.LA(1);

                int index84_421 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_421);
                if (s >= 0)
                    return s;
                break;

            case 126:
                int LA84_262 = input.LA(1);

                int index84_262 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_262 == COMMA || LA84_262 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_262);
                if (s >= 0)
                    return s;
                break;

            case 127:
                int LA84_377 = input.LA(1);

                int index84_377 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_377);
                if (s >= 0)
                    return s;
                break;

            case 128:
                int LA84_217 = input.LA(1);

                int index84_217 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_217 == COMMA || LA84_217 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_217);
                if (s >= 0)
                    return s;
                break;

            case 129:
                int LA84_443 = input.LA(1);

                int index84_443 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_443);
                if (s >= 0)
                    return s;
                break;

            case 130:
                int LA84_109 = input.LA(1);

                int index84_109 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_109 == COMMA || LA84_109 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_109);
                if (s >= 0)
                    return s;
                break;

            case 131:
                int LA84_180 = input.LA(1);

                int index84_180 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_180 == COMMA || LA84_180 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_180);
                if (s >= 0)
                    return s;
                break;

            case 132:
                int LA84_265 = input.LA(1);

                int index84_265 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_265 == COMMA || LA84_265 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_265);
                if (s >= 0)
                    return s;
                break;

            case 133:
                int LA84_419 = input.LA(1);

                int index84_419 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_419);
                if (s >= 0)
                    return s;
                break;

            case 134:
                int LA84_411 = input.LA(1);

                int index84_411 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_411);
                if (s >= 0)
                    return s;
                break;

            case 135:
                int LA84_40 = input.LA(1);

                int index84_40 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_40 == COMMA || LA84_40 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_40);
                if (s >= 0)
                    return s;
                break;

            case 136:
                int LA84_72 = input.LA(1);

                int index84_72 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_72 == COMMA || LA84_72 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_72);
                if (s >= 0)
                    return s;
                break;

            case 137:
                int LA84_367 = input.LA(1);

                int index84_367 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_367 == COMMA || LA84_367 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_367);
                if (s >= 0)
                    return s;
                break;

            case 138:
                int LA84_237 = input.LA(1);

                int index84_237 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_237 == COMMA || LA84_237 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_237);
                if (s >= 0)
                    return s;
                break;

            case 139:
                int LA84_442 = input.LA(1);

                int index84_442 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_442);
                if (s >= 0)
                    return s;
                break;

            case 140:
                int LA84_302 = input.LA(1);

                int index84_302 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_302 == COMMA || LA84_302 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_302);
                if (s >= 0)
                    return s;
                break;

            case 141:
                int LA84_271 = input.LA(1);

                int index84_271 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_271 == COMMA || LA84_271 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_271);
                if (s >= 0)
                    return s;
                break;

            case 142:
                int LA84_103 = input.LA(1);

                int index84_103 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_103 == ID))
                {
                    s = 129;
                }
                else if ((LA84_103 == FTSWORD))
                {
                    s = 130;
                }
                else if ((LA84_103 == FTSPRE))
                {
                    s = 131;
                }
                else if ((LA84_103 == FTSWILD))
                {
                    s = 132;
                }
                else if ((LA84_103 == NOT))
                {
                    s = 133;
                }
                else if ((LA84_103 == TO))
                {
                    s = 134;
                }
                else if ((LA84_103 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 135;
                }
                else if ((LA84_103 == FLOATING_POINT_LITERAL))
                {
                    s = 136;
                }
                else if ((LA84_103 == STAR))
                {
                    s = 137;
                }
                else if ((LA84_103 == QUESTION_MARK))
                {
                    s = 138;
                }
                else if ((LA84_103 == DATETIME))
                {
                    s = 139;
                }
                else if ((LA84_103 == URI))
                {
                    s = 83;
                }
                else if ((LA84_103 == TILDA) && (synpred63_FTS()))
                {
                    s = 84;
                }
                else if ((LA84_103 == CARAT) && (synpred63_FTS()))
                {
                    s = 85;
                }
                else if ((LA84_103 == AND) && (synpred63_FTS()))
                {
                    s = 86;
                }
                else if ((LA84_103 == AMP) && (synpred63_FTS()))
                {
                    s = 87;
                }
                else if ((LA84_103 == EOF) && (synpred63_FTS()))
                {
                    s = 88;
                }
                else if ((LA84_103 == RPAREN) && (synpred63_FTS()))
                {
                    s = 89;
                }
                else if ((LA84_103 == OR) && (synpred63_FTS()))
                {
                    s = 90;
                }
                else if ((LA84_103 == BAR) && (synpred63_FTS()))
                {
                    s = 91;
                }
                else if ((LA84_103 == EXCLAMATION) && (synpred63_FTS()))
                {
                    s = 92;
                }
                else if ((LA84_103 == AT) && (synpred63_FTS()))
                {
                    s = 93;
                }
                else if ((LA84_103 == FTSPHRASE) && (synpred63_FTS()))
                {
                    s = 94;
                }
                else if ((LA84_103 == LSQUARE) && (synpred63_FTS()))
                {
                    s = 95;
                }
                else if ((LA84_103 == LT) && (synpred63_FTS()))
                {
                    s = 96;
                }
                else if ((LA84_103 == COMMA || LA84_103 == DOT) && (synpred63_FTS()))
                {
                    s = 97;
                }
                else if ((LA84_103 == EQUALS) && (synpred63_FTS()))
                {
                    s = 98;
                }
                else if ((LA84_103 == LPAREN) && (synpred63_FTS()))
                {
                    s = 99;
                }
                else if ((LA84_103 == PERCENT) && (synpred63_FTS()))
                {
                    s = 100;
                }
                else if ((LA84_103 == PLUS) && (synpred63_FTS()))
                {
                    s = 101;
                }
                else if ((LA84_103 == MINUS) && (synpred63_FTS()))
                {
                    s = 102;
                }

                input.seek(index84_103);
                if (s >= 0)
                    return s;
                break;

            case 143:
                int LA84_311 = input.LA(1);

                int index84_311 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_311 == COMMA || LA84_311 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_311);
                if (s >= 0)
                    return s;
                break;

            case 144:
                int LA84_317 = input.LA(1);

                int index84_317 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_317 == COMMA || LA84_317 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_317);
                if (s >= 0)
                    return s;
                break;

            case 145:
                int LA84_453 = input.LA(1);

                int index84_453 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_453);
                if (s >= 0)
                    return s;
                break;

            case 146:
                int LA84_294 = input.LA(1);

                int index84_294 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_294 == ID))
                {
                    s = 332;
                }
                else if ((LA84_294 == FTSWORD))
                {
                    s = 333;
                }
                else if ((LA84_294 == FTSPRE))
                {
                    s = 334;
                }
                else if ((LA84_294 == FTSWILD))
                {
                    s = 335;
                }
                else if ((LA84_294 == NOT))
                {
                    s = 336;
                }
                else if ((LA84_294 == TO))
                {
                    s = 337;
                }
                else if ((LA84_294 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 338;
                }
                else if ((LA84_294 == FLOATING_POINT_LITERAL))
                {
                    s = 339;
                }
                else if ((LA84_294 == STAR))
                {
                    s = 340;
                }
                else if ((LA84_294 == QUESTION_MARK))
                {
                    s = 341;
                }
                else if ((LA84_294 == DATETIME))
                {
                    s = 342;
                }
                else if ((LA84_294 == URI))
                {
                    s = 343;
                }
                else if ((LA84_294 == TILDA) && (synpred52_FTS()))
                {
                    s = 344;
                }
                else if ((LA84_294 == CARAT) && (synpred52_FTS()))
                {
                    s = 345;
                }
                else if ((LA84_294 == AND) && (synpred52_FTS()))
                {
                    s = 346;
                }
                else if ((LA84_294 == AMP) && (synpred52_FTS()))
                {
                    s = 347;
                }
                else if ((LA84_294 == EOF) && (synpred52_FTS()))
                {
                    s = 348;
                }
                else if ((LA84_294 == RPAREN) && (synpred52_FTS()))
                {
                    s = 349;
                }
                else if ((LA84_294 == OR) && (synpred52_FTS()))
                {
                    s = 350;
                }
                else if ((LA84_294 == BAR) && (synpred52_FTS()))
                {
                    s = 351;
                }
                else if ((LA84_294 == EXCLAMATION) && (synpred52_FTS()))
                {
                    s = 352;
                }
                else if ((LA84_294 == AT) && (synpred52_FTS()))
                {
                    s = 353;
                }
                else if ((LA84_294 == FTSPHRASE) && (synpred52_FTS()))
                {
                    s = 354;
                }
                else if ((LA84_294 == LSQUARE) && (synpred52_FTS()))
                {
                    s = 355;
                }
                else if ((LA84_294 == LT) && (synpred52_FTS()))
                {
                    s = 356;
                }
                else if ((LA84_294 == COMMA || LA84_294 == DOT) && (synpred52_FTS()))
                {
                    s = 357;
                }
                else if ((LA84_294 == EQUALS) && (synpred52_FTS()))
                {
                    s = 358;
                }
                else if ((LA84_294 == LPAREN) && (synpred52_FTS()))
                {
                    s = 359;
                }
                else if ((LA84_294 == PERCENT) && (synpred52_FTS()))
                {
                    s = 360;
                }
                else if ((LA84_294 == PLUS) && (synpred52_FTS()))
                {
                    s = 361;
                }
                else if ((LA84_294 == MINUS) && (synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_294);
                if (s >= 0)
                    return s;
                break;

            case 147:
                int LA84_408 = input.LA(1);

                int index84_408 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_408);
                if (s >= 0)
                    return s;
                break;

            case 148:
                int LA84_435 = input.LA(1);

                int index84_435 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_435);
                if (s >= 0)
                    return s;
                break;

            case 149:
                int LA84_304 = input.LA(1);

                int index84_304 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_304 == COMMA || LA84_304 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_304);
                if (s >= 0)
                    return s;
                break;

            case 150:
                int LA84_41 = input.LA(1);

                int index84_41 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_41 == COMMA || LA84_41 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_41);
                if (s >= 0)
                    return s;
                break;

            case 151:
                int LA84_112 = input.LA(1);

                int index84_112 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_112 == COMMA || LA84_112 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_112);
                if (s >= 0)
                    return s;
                break;

            case 152:
                int LA84_378 = input.LA(1);

                int index84_378 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_378);
                if (s >= 0)
                    return s;
                break;

            case 153:
                int LA84_422 = input.LA(1);

                int index84_422 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_422);
                if (s >= 0)
                    return s;
                break;

            case 154:
                int LA84_233 = input.LA(1);

                int index84_233 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_233 == COMMA || LA84_233 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_233);
                if (s >= 0)
                    return s;
                break;

            case 155:
                int LA84_218 = input.LA(1);

                int index84_218 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_218 == COMMA || LA84_218 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_218);
                if (s >= 0)
                    return s;
                break;

            case 156:
                int LA84_374 = input.LA(1);

                int index84_374 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_374);
                if (s >= 0)
                    return s;
                break;

            case 157:
                int LA84_338 = input.LA(1);

                int index84_338 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_338);
                if (s >= 0)
                    return s;
                break;

            case 158:
                int LA84_49 = input.LA(1);

                int index84_49 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_49 == COMMA || LA84_49 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_49);
                if (s >= 0)
                    return s;
                break;

            case 159:
                int LA84_120 = input.LA(1);

                int index84_120 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_120 == COMMA || LA84_120 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_120);
                if (s >= 0)
                    return s;
                break;

            case 160:
                int LA84_326 = input.LA(1);

                int index84_326 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_326 == COMMA || LA84_326 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_326);
                if (s >= 0)
                    return s;
                break;

            case 161:
                int LA84_305 = input.LA(1);

                int index84_305 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_305 == COMMA || LA84_305 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_305);
                if (s >= 0)
                    return s;
                break;

            case 162:
                int LA84_412 = input.LA(1);

                int index84_412 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_412);
                if (s >= 0)
                    return s;
                break;

            case 163:
                int LA84_364 = input.LA(1);

                int index84_364 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_364 == ID))
                {
                    s = 414;
                }
                else if ((LA84_364 == FTSWORD))
                {
                    s = 415;
                }
                else if ((LA84_364 == FTSPRE))
                {
                    s = 416;
                }
                else if ((LA84_364 == FTSWILD))
                {
                    s = 417;
                }
                else if ((LA84_364 == NOT))
                {
                    s = 418;
                }
                else if ((LA84_364 == TO))
                {
                    s = 419;
                }
                else if ((LA84_364 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 420;
                }
                else if ((LA84_364 == FLOATING_POINT_LITERAL))
                {
                    s = 421;
                }
                else if ((LA84_364 == STAR))
                {
                    s = 422;
                }
                else if ((LA84_364 == QUESTION_MARK))
                {
                    s = 423;
                }
                else if ((LA84_364 == DATETIME))
                {
                    s = 424;
                }
                else if ((LA84_364 == URI))
                {
                    s = 425;
                }
                else if ((LA84_364 == TILDA) && (synpred52_FTS()))
                {
                    s = 344;
                }
                else if ((LA84_364 == CARAT) && (synpred52_FTS()))
                {
                    s = 345;
                }
                else if ((LA84_364 == AND) && (synpred52_FTS()))
                {
                    s = 346;
                }
                else if ((LA84_364 == AMP) && (synpred52_FTS()))
                {
                    s = 347;
                }
                else if ((LA84_364 == EOF) && (synpred52_FTS()))
                {
                    s = 348;
                }
                else if ((LA84_364 == RPAREN) && (synpred52_FTS()))
                {
                    s = 349;
                }
                else if ((LA84_364 == OR) && (synpred52_FTS()))
                {
                    s = 350;
                }
                else if ((LA84_364 == BAR) && (synpred52_FTS()))
                {
                    s = 351;
                }
                else if ((LA84_364 == EXCLAMATION) && (synpred52_FTS()))
                {
                    s = 352;
                }
                else if ((LA84_364 == AT) && (synpred52_FTS()))
                {
                    s = 353;
                }
                else if ((LA84_364 == FTSPHRASE) && (synpred52_FTS()))
                {
                    s = 354;
                }
                else if ((LA84_364 == LSQUARE) && (synpred52_FTS()))
                {
                    s = 355;
                }
                else if ((LA84_364 == LT) && (synpred52_FTS()))
                {
                    s = 356;
                }
                else if ((LA84_364 == COMMA || LA84_364 == DOT) && (synpred52_FTS()))
                {
                    s = 357;
                }
                else if ((LA84_364 == EQUALS) && (synpred52_FTS()))
                {
                    s = 358;
                }
                else if ((LA84_364 == LPAREN) && (synpred52_FTS()))
                {
                    s = 359;
                }
                else if ((LA84_364 == PERCENT) && (synpred52_FTS()))
                {
                    s = 360;
                }
                else if ((LA84_364 == PLUS) && (synpred52_FTS()))
                {
                    s = 361;
                }
                else if ((LA84_364 == MINUS) && (synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_364);
                if (s >= 0)
                    return s;
                break;

            case 164:
                int LA84_150 = input.LA(1);

                int index84_150 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_150 == COMMA || LA84_150 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_150);
                if (s >= 0)
                    return s;
                break;

            case 165:
                int LA84_263 = input.LA(1);

                int index84_263 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_263 == COMMA || LA84_263 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_263);
                if (s >= 0)
                    return s;
                break;

            case 166:
                int LA84_46 = input.LA(1);

                int index84_46 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_46 == COMMA || LA84_46 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_46);
                if (s >= 0)
                    return s;
                break;

            case 167:
                int LA84_111 = input.LA(1);

                int index84_111 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 173;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 175;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_111);
                if (s >= 0)
                    return s;
                break;

            case 168:
                int LA84_117 = input.LA(1);

                int index84_117 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_117 == COMMA || LA84_117 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_117);
                if (s >= 0)
                    return s;
                break;

            case 169:
                int LA84_368 = input.LA(1);

                int index84_368 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_368 == COMMA || LA84_368 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_368);
                if (s >= 0)
                    return s;
                break;

            case 170:
                int LA84_141 = input.LA(1);

                int index84_141 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_141 == COMMA || LA84_141 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_141);
                if (s >= 0)
                    return s;
                break;

            case 171:
                int LA84_303 = input.LA(1);

                int index84_303 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_303 == COMMA || LA84_303 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_303);
                if (s >= 0)
                    return s;
                break;

            case 172:
                int LA84_434 = input.LA(1);

                int index84_434 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_434);
                if (s >= 0)
                    return s;
                break;

            case 173:
                int LA84_73 = input.LA(1);

                int index84_73 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_73 == COMMA || LA84_73 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_73);
                if (s >= 0)
                    return s;
                break;

            case 174:
                int LA84_130 = input.LA(1);

                int index84_130 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_130 == COMMA || LA84_130 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_130);
                if (s >= 0)
                    return s;
                break;

            case 175:
                int LA84_445 = input.LA(1);

                int index84_445 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_445 == ID))
                {
                    s = 457;
                }
                else if ((LA84_445 == FTSWORD))
                {
                    s = 434;
                }
                else if ((LA84_445 == FTSPRE))
                {
                    s = 435;
                }
                else if ((LA84_445 == FTSWILD))
                {
                    s = 436;
                }
                else if ((LA84_445 == NOT))
                {
                    s = 437;
                }
                else if ((LA84_445 == TO))
                {
                    s = 438;
                }
                else if ((LA84_445 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 439;
                }
                else if ((LA84_445 == FLOATING_POINT_LITERAL))
                {
                    s = 440;
                }
                else if ((LA84_445 == STAR))
                {
                    s = 441;
                }
                else if ((LA84_445 == QUESTION_MARK))
                {
                    s = 442;
                }
                else if ((LA84_445 == DATETIME))
                {
                    s = 443;
                }
                else if ((LA84_445 == URI))
                {
                    s = 444;
                }
                else if ((LA84_445 == TILDA) && (synpred51_FTS()))
                {
                    s = 382;
                }
                else if ((LA84_445 == CARAT) && (synpred51_FTS()))
                {
                    s = 383;
                }
                else if ((LA84_445 == AND) && (synpred51_FTS()))
                {
                    s = 384;
                }
                else if ((LA84_445 == AMP) && (synpred51_FTS()))
                {
                    s = 385;
                }
                else if ((LA84_445 == EOF) && (synpred51_FTS()))
                {
                    s = 386;
                }
                else if ((LA84_445 == RPAREN) && (synpred51_FTS()))
                {
                    s = 387;
                }
                else if ((LA84_445 == OR) && (synpred51_FTS()))
                {
                    s = 388;
                }
                else if ((LA84_445 == BAR) && (synpred51_FTS()))
                {
                    s = 389;
                }
                else if ((LA84_445 == EXCLAMATION) && (synpred51_FTS()))
                {
                    s = 390;
                }
                else if ((LA84_445 == AT) && (synpred51_FTS()))
                {
                    s = 391;
                }
                else if ((LA84_445 == FTSPHRASE) && (synpred51_FTS()))
                {
                    s = 392;
                }
                else if ((LA84_445 == LSQUARE) && (synpred51_FTS()))
                {
                    s = 393;
                }
                else if ((LA84_445 == LT) && (synpred51_FTS()))
                {
                    s = 394;
                }
                else if ((LA84_445 == COMMA || LA84_445 == DOT) && (synpred51_FTS()))
                {
                    s = 395;
                }
                else if ((LA84_445 == EQUALS) && (synpred51_FTS()))
                {
                    s = 396;
                }
                else if ((LA84_445 == LPAREN) && (synpred51_FTS()))
                {
                    s = 397;
                }
                else if ((LA84_445 == PERCENT) && (synpred51_FTS()))
                {
                    s = 398;
                }
                else if ((LA84_445 == PLUS) && (synpred51_FTS()))
                {
                    s = 399;
                }
                else if ((LA84_445 == MINUS) && (synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_445);
                if (s >= 0)
                    return s;
                break;

            case 176:
                int LA84_320 = input.LA(1);

                int index84_320 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_320 == COMMA || LA84_320 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_320);
                if (s >= 0)
                    return s;
                break;

            case 177:
                int LA84_318 = input.LA(1);

                int index84_318 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_318 == COMMA || LA84_318 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_318);
                if (s >= 0)
                    return s;
                break;

            case 178:
                int LA84_454 = input.LA(1);

                int index84_454 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_454);
                if (s >= 0)
                    return s;
                break;

            case 179:
                int LA84_128 = input.LA(1);

                int index84_128 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_128 == COMMA || LA84_128 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_128);
                if (s >= 0)
                    return s;
                break;

            case 180:
                int LA84_436 = input.LA(1);

                int index84_436 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_436);
                if (s >= 0)
                    return s;
                break;

            case 181:
                int LA84_379 = input.LA(1);

                int index84_379 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_379);
                if (s >= 0)
                    return s;
                break;

            case 182:
                int LA84_229 = input.LA(1);

                int index84_229 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_229 == COMMA || LA84_229 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_229);
                if (s >= 0)
                    return s;
                break;

            case 183:
                int LA84_451 = input.LA(1);

                int index84_451 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_451);
                if (s >= 0)
                    return s;
                break;

            case 184:
                int LA84_380 = input.LA(1);

                int index84_380 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_380);
                if (s >= 0)
                    return s;
                break;

            case 185:
                int LA84_424 = input.LA(1);

                int index84_424 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_424);
                if (s >= 0)
                    return s;
                break;

            case 186:
                int LA84_110 = input.LA(1);

                int index84_110 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_110 == COMMA || LA84_110 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_110);
                if (s >= 0)
                    return s;
                break;

            case 187:
                int LA84_428 = input.LA(1);

                int index84_428 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_428);
                if (s >= 0)
                    return s;
                break;

            case 188:
                int LA84_44 = input.LA(1);

                int index84_44 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_44 == COMMA || LA84_44 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_44);
                if (s >= 0)
                    return s;
                break;

            case 189:
                int LA84_115 = input.LA(1);

                int index84_115 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_115 == COMMA || LA84_115 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_115);
                if (s >= 0)
                    return s;
                break;

            case 190:
                int LA84_369 = input.LA(1);

                int index84_369 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_369 == COMMA || LA84_369 == DOT))
                {
                    s = 364;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_369);
                if (s >= 0)
                    return s;
                break;

            case 191:
                int LA84_433 = input.LA(1);

                int index84_433 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_433);
                if (s >= 0)
                    return s;
                break;

            case 192:
                int LA84_219 = input.LA(1);

                int index84_219 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_219 == COMMA || LA84_219 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_219);
                if (s >= 0)
                    return s;
                break;

            case 193:
                int LA84_327 = input.LA(1);

                int index84_327 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_327 == COMMA || LA84_327 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_327);
                if (s >= 0)
                    return s;
                break;

            case 194:
                int LA84_404 = input.LA(1);

                int index84_404 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_404 == COMMA || LA84_404 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_404);
                if (s >= 0)
                    return s;
                break;

            case 195:
                int LA84_264 = input.LA(1);

                int index84_264 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_264 == COMMA || LA84_264 == DOT))
                {
                    s = 313;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_264);
                if (s >= 0)
                    return s;
                break;

            case 196:
                int LA84_295 = input.LA(1);

                int index84_295 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_295 == DOT))
                {
                    s = 363;
                }
                else if ((LA84_295 == COMMA))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_295);
                if (s >= 0)
                    return s;
                break;

            case 197:
                int LA84_43 = input.LA(1);

                int index84_43 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_43 == COMMA || LA84_43 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_43);
                if (s >= 0)
                    return s;
                break;

            case 198:
                int LA84_114 = input.LA(1);

                int index84_114 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_114 == COMMA || LA84_114 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_114);
                if (s >= 0)
                    return s;
                break;

            case 199:
                int LA84_337 = input.LA(1);

                int index84_337 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_337);
                if (s >= 0)
                    return s;
                break;

            case 200:
                int LA84_423 = input.LA(1);

                int index84_423 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_423);
                if (s >= 0)
                    return s;
                break;

            case 201:
                int LA84_432 = input.LA(1);

                int index84_432 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_432);
                if (s >= 0)
                    return s;
                break;

            case 202:
                int LA84_238 = input.LA(1);

                int index84_238 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_238 == COMMA || LA84_238 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_238);
                if (s >= 0)
                    return s;
                break;

            case 203:
                int LA84_142 = input.LA(1);

                int index84_142 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_142 == COMMA || LA84_142 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_142);
                if (s >= 0)
                    return s;
                break;

            case 204:
                int LA84_125 = input.LA(1);

                int index84_125 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_125 == COMMA || LA84_125 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_125);
                if (s >= 0)
                    return s;
                break;

            case 205:
                int LA84_446 = input.LA(1);

                int index84_446 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_446);
                if (s >= 0)
                    return s;
                break;

            case 206:
                int LA84_339 = input.LA(1);

                int index84_339 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_339);
                if (s >= 0)
                    return s;
                break;

            case 207:
                int LA84_145 = input.LA(1);

                int index84_145 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_145 == COMMA || LA84_145 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_145);
                if (s >= 0)
                    return s;
                break;

            case 208:
                int LA84_48 = input.LA(1);

                int index84_48 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_48 == COMMA || LA84_48 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_48);
                if (s >= 0)
                    return s;
                break;

            case 209:
                int LA84_119 = input.LA(1);

                int index84_119 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_119 == COMMA || LA84_119 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_119);
                if (s >= 0)
                    return s;
                break;

            case 210:
                int LA84_455 = input.LA(1);

                int index84_455 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_455);
                if (s >= 0)
                    return s;
                break;

            case 211:
                int LA84_227 = input.LA(1);

                int index84_227 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_227 == COMMA || LA84_227 == DOT))
                {
                    s = 293;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_227);
                if (s >= 0)
                    return s;
                break;

            case 212:
                int LA84_296 = input.LA(1);

                int index84_296 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_296 == COMMA || LA84_296 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_296);
                if (s >= 0)
                    return s;
                break;

            case 213:
                int LA84_47 = input.LA(1);

                int index84_47 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_47 == COMMA || LA84_47 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_47);
                if (s >= 0)
                    return s;
                break;

            case 214:
                int LA84_118 = input.LA(1);

                int index84_118 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_118 == COMMA || LA84_118 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_118);
                if (s >= 0)
                    return s;
                break;

            case 215:
                int LA84_429 = input.LA(1);

                int index84_429 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_429);
                if (s >= 0)
                    return s;
                break;

            case 216:
                int LA84_363 = input.LA(1);

                int index84_363 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_363 == ID))
                {
                    s = 413;
                }
                else if ((LA84_363 == FTSWORD))
                {
                    s = 333;
                }
                else if ((LA84_363 == FTSPRE))
                {
                    s = 334;
                }
                else if ((LA84_363 == FTSWILD))
                {
                    s = 335;
                }
                else if ((LA84_363 == NOT))
                {
                    s = 336;
                }
                else if ((LA84_363 == TO))
                {
                    s = 337;
                }
                else if ((LA84_363 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 338;
                }
                else if ((LA84_363 == FLOATING_POINT_LITERAL))
                {
                    s = 339;
                }
                else if ((LA84_363 == STAR))
                {
                    s = 340;
                }
                else if ((LA84_363 == QUESTION_MARK))
                {
                    s = 341;
                }
                else if ((LA84_363 == DATETIME))
                {
                    s = 342;
                }
                else if ((LA84_363 == URI))
                {
                    s = 343;
                }
                else if ((LA84_363 == TILDA) && (synpred52_FTS()))
                {
                    s = 344;
                }
                else if ((LA84_363 == CARAT) && (synpred52_FTS()))
                {
                    s = 345;
                }
                else if ((LA84_363 == AND) && (synpred52_FTS()))
                {
                    s = 346;
                }
                else if ((LA84_363 == AMP) && (synpred52_FTS()))
                {
                    s = 347;
                }
                else if ((LA84_363 == EOF) && (synpred52_FTS()))
                {
                    s = 348;
                }
                else if ((LA84_363 == RPAREN) && (synpred52_FTS()))
                {
                    s = 349;
                }
                else if ((LA84_363 == OR) && (synpred52_FTS()))
                {
                    s = 350;
                }
                else if ((LA84_363 == BAR) && (synpred52_FTS()))
                {
                    s = 351;
                }
                else if ((LA84_363 == EXCLAMATION) && (synpred52_FTS()))
                {
                    s = 352;
                }
                else if ((LA84_363 == AT) && (synpred52_FTS()))
                {
                    s = 353;
                }
                else if ((LA84_363 == FTSPHRASE) && (synpred52_FTS()))
                {
                    s = 354;
                }
                else if ((LA84_363 == LSQUARE) && (synpred52_FTS()))
                {
                    s = 355;
                }
                else if ((LA84_363 == LT) && (synpred52_FTS()))
                {
                    s = 356;
                }
                else if ((LA84_363 == COMMA || LA84_363 == DOT) && (synpred52_FTS()))
                {
                    s = 357;
                }
                else if ((LA84_363 == EQUALS) && (synpred52_FTS()))
                {
                    s = 358;
                }
                else if ((LA84_363 == LPAREN) && (synpred52_FTS()))
                {
                    s = 359;
                }
                else if ((LA84_363 == PERCENT) && (synpred52_FTS()))
                {
                    s = 360;
                }
                else if ((LA84_363 == PLUS) && (synpred52_FTS()))
                {
                    s = 361;
                }
                else if ((LA84_363 == MINUS) && (synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_363);
                if (s >= 0)
                    return s;
                break;

            case 217:
                int LA84_42 = input.LA(1);

                int index84_42 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_42 == COMMA || LA84_42 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_42);
                if (s >= 0)
                    return s;
                break;

            case 218:
                int LA84_113 = input.LA(1);

                int index84_113 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_113 == COMMA || LA84_113 == DOT))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_113);
                if (s >= 0)
                    return s;
                break;

            case 219:
                int LA84_371 = input.LA(1);

                int index84_371 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_371);
                if (s >= 0)
                    return s;
                break;

            case 220:
                int LA84_325 = input.LA(1);

                int index84_325 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_325 == COMMA || LA84_325 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_325);
                if (s >= 0)
                    return s;
                break;

            case 221:
                int LA84_405 = input.LA(1);

                int index84_405 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_405 == COMMA || LA84_405 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_405);
                if (s >= 0)
                    return s;
                break;

            case 222:
                int LA84_328 = input.LA(1);

                int index84_328 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_328 == COMMA || LA84_328 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_328);
                if (s >= 0)
                    return s;
                break;

            case 223:
                int LA84_230 = input.LA(1);

                int index84_230 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_230 == COMMA || LA84_230 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_230);
                if (s >= 0)
                    return s;
                break;

            case 224:
                int LA84_143 = input.LA(1);

                int index84_143 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_143 == COMMA || LA84_143 == DOT))
                {
                    s = 214;
                }
                else if ((synpred58_FTS()))
                {
                    s = 176;
                }
                else if ((synpred60_FTS()))
                {
                    s = 170;
                }

                input.seek(index84_143);
                if (s >= 0)
                    return s;
                break;

            case 225:
                int LA84_79 = input.LA(1);

                int index84_79 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_79 == COMMA || LA84_79 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_79);
                if (s >= 0)
                    return s;
                break;

            case 226:
                int LA84_136 = input.LA(1);

                int index84_136 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_136 == COMMA || LA84_136 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_136);
                if (s >= 0)
                    return s;
                break;

            case 227:
                int LA84_259 = input.LA(1);

                int index84_259 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_259 == ID))
                {
                    s = 300;
                }
                else if ((LA84_259 == FTSWORD))
                {
                    s = 229;
                }
                else if ((LA84_259 == FTSPRE))
                {
                    s = 230;
                }
                else if ((LA84_259 == FTSWILD))
                {
                    s = 231;
                }
                else if ((LA84_259 == NOT))
                {
                    s = 232;
                }
                else if ((LA84_259 == TO))
                {
                    s = 233;
                }
                else if ((LA84_259 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 234;
                }
                else if ((LA84_259 == FLOATING_POINT_LITERAL))
                {
                    s = 235;
                }
                else if ((LA84_259 == STAR))
                {
                    s = 236;
                }
                else if ((LA84_259 == QUESTION_MARK))
                {
                    s = 237;
                }
                else if ((LA84_259 == DATETIME))
                {
                    s = 238;
                }
                else if ((LA84_259 == URI))
                {
                    s = 239;
                }
                else if ((LA84_259 == TILDA) && (synpred56_FTS()))
                {
                    s = 240;
                }
                else if ((LA84_259 == CARAT) && (synpred56_FTS()))
                {
                    s = 241;
                }
                else if ((LA84_259 == AND) && (synpred56_FTS()))
                {
                    s = 242;
                }
                else if ((LA84_259 == AMP) && (synpred56_FTS()))
                {
                    s = 243;
                }
                else if ((LA84_259 == EOF) && (synpred56_FTS()))
                {
                    s = 244;
                }
                else if ((LA84_259 == RPAREN) && (synpred56_FTS()))
                {
                    s = 245;
                }
                else if ((LA84_259 == OR) && (synpred56_FTS()))
                {
                    s = 246;
                }
                else if ((LA84_259 == BAR) && (synpred56_FTS()))
                {
                    s = 247;
                }
                else if ((LA84_259 == EXCLAMATION) && (synpred56_FTS()))
                {
                    s = 248;
                }
                else if ((LA84_259 == AT) && (synpred56_FTS()))
                {
                    s = 249;
                }
                else if ((LA84_259 == FTSPHRASE) && (synpred56_FTS()))
                {
                    s = 250;
                }
                else if ((LA84_259 == LSQUARE) && (synpred56_FTS()))
                {
                    s = 251;
                }
                else if ((LA84_259 == LT) && (synpred56_FTS()))
                {
                    s = 252;
                }
                else if ((LA84_259 == COMMA || LA84_259 == DOT) && (synpred56_FTS()))
                {
                    s = 253;
                }
                else if ((LA84_259 == EQUALS) && (synpred56_FTS()))
                {
                    s = 254;
                }
                else if ((LA84_259 == LPAREN) && (synpred56_FTS()))
                {
                    s = 255;
                }
                else if ((LA84_259 == PERCENT) && (synpred56_FTS()))
                {
                    s = 256;
                }
                else if ((LA84_259 == PLUS) && (synpred56_FTS()))
                {
                    s = 257;
                }
                else if ((LA84_259 == MINUS) && (synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_259);
                if (s >= 0)
                    return s;
                break;

            case 228:
                int LA84_415 = input.LA(1);

                int index84_415 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_415);
                if (s >= 0)
                    return s;
                break;

            case 229:
                int LA84_183 = input.LA(1);

                int index84_183 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_183 == COMMA || LA84_183 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_183);
                if (s >= 0)
                    return s;
                break;

            case 230:
                int LA84_74 = input.LA(1);

                int index84_74 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_74 == COMMA || LA84_74 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_74);
                if (s >= 0)
                    return s;
                break;

            case 231:
                int LA84_131 = input.LA(1);

                int index84_131 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_131 == COMMA || LA84_131 == DOT))
                {
                    s = 122;
                }
                else if ((synpred61_FTS()))
                {
                    s = 123;
                }
                else if ((synpred63_FTS()))
                {
                    s = 102;
                }
                else if ((true))
                {
                    s = 34;
                }

                input.seek(index84_131);
                if (s >= 0)
                    return s;
                break;

            case 232:
                int LA84_340 = input.LA(1);

                int index84_340 = input.index();
                input.rewind();
                s = -1;
                if ((synpred50_FTS()))
                {
                    s = 172;
                }
                else if ((synpred52_FTS()))
                {
                    s = 362;
                }

                input.seek(index84_340);
                if (s >= 0)
                    return s;
                break;

            case 233:
                int LA84_186 = input.LA(1);

                int index84_186 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_186 == COMMA || LA84_186 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_186);
                if (s >= 0)
                    return s;
                break;

            case 234:
                int LA84_313 = input.LA(1);

                int index84_313 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_313 == ID))
                {
                    s = 370;
                }
                else if ((LA84_313 == FTSWORD))
                {
                    s = 371;
                }
                else if ((LA84_313 == FTSPRE))
                {
                    s = 372;
                }
                else if ((LA84_313 == FTSWILD))
                {
                    s = 373;
                }
                else if ((LA84_313 == NOT))
                {
                    s = 374;
                }
                else if ((LA84_313 == TO))
                {
                    s = 375;
                }
                else if ((LA84_313 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 376;
                }
                else if ((LA84_313 == FLOATING_POINT_LITERAL))
                {
                    s = 377;
                }
                else if ((LA84_313 == STAR))
                {
                    s = 378;
                }
                else if ((LA84_313 == QUESTION_MARK))
                {
                    s = 379;
                }
                else if ((LA84_313 == DATETIME))
                {
                    s = 380;
                }
                else if ((LA84_313 == URI))
                {
                    s = 381;
                }
                else if ((LA84_313 == TILDA) && (synpred51_FTS()))
                {
                    s = 382;
                }
                else if ((LA84_313 == CARAT) && (synpred51_FTS()))
                {
                    s = 383;
                }
                else if ((LA84_313 == AND) && (synpred51_FTS()))
                {
                    s = 384;
                }
                else if ((LA84_313 == AMP) && (synpred51_FTS()))
                {
                    s = 385;
                }
                else if ((LA84_313 == EOF) && (synpred51_FTS()))
                {
                    s = 386;
                }
                else if ((LA84_313 == RPAREN) && (synpred51_FTS()))
                {
                    s = 387;
                }
                else if ((LA84_313 == OR) && (synpred51_FTS()))
                {
                    s = 388;
                }
                else if ((LA84_313 == BAR) && (synpred51_FTS()))
                {
                    s = 389;
                }
                else if ((LA84_313 == EXCLAMATION) && (synpred51_FTS()))
                {
                    s = 390;
                }
                else if ((LA84_313 == AT) && (synpred51_FTS()))
                {
                    s = 391;
                }
                else if ((LA84_313 == FTSPHRASE) && (synpred51_FTS()))
                {
                    s = 392;
                }
                else if ((LA84_313 == LSQUARE) && (synpred51_FTS()))
                {
                    s = 393;
                }
                else if ((LA84_313 == LT) && (synpred51_FTS()))
                {
                    s = 394;
                }
                else if ((LA84_313 == COMMA || LA84_313 == DOT) && (synpred51_FTS()))
                {
                    s = 395;
                }
                else if ((LA84_313 == EQUALS) && (synpred51_FTS()))
                {
                    s = 396;
                }
                else if ((LA84_313 == LPAREN) && (synpred51_FTS()))
                {
                    s = 397;
                }
                else if ((LA84_313 == PERCENT) && (synpred51_FTS()))
                {
                    s = 398;
                }
                else if ((LA84_313 == PLUS) && (synpred51_FTS()))
                {
                    s = 399;
                }
                else if ((LA84_313 == MINUS) && (synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_313);
                if (s >= 0)
                    return s;
                break;

            case 235:
                int LA84_33 = input.LA(1);

                int index84_33 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_33 == ID))
                {
                    s = 72;
                }
                else if ((LA84_33 == FTSWORD))
                {
                    s = 73;
                }
                else if ((LA84_33 == FTSPRE))
                {
                    s = 74;
                }
                else if ((LA84_33 == FTSWILD))
                {
                    s = 75;
                }
                else if ((LA84_33 == NOT))
                {
                    s = 76;
                }
                else if ((LA84_33 == TO))
                {
                    s = 77;
                }
                else if ((LA84_33 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 78;
                }
                else if ((LA84_33 == FLOATING_POINT_LITERAL))
                {
                    s = 79;
                }
                else if ((LA84_33 == STAR))
                {
                    s = 80;
                }
                else if ((LA84_33 == QUESTION_MARK))
                {
                    s = 81;
                }
                else if ((LA84_33 == DATETIME))
                {
                    s = 82;
                }
                else if ((LA84_33 == URI))
                {
                    s = 83;
                }
                else if ((LA84_33 == TILDA) && (synpred63_FTS()))
                {
                    s = 84;
                }
                else if ((LA84_33 == CARAT) && (synpred63_FTS()))
                {
                    s = 85;
                }
                else if ((LA84_33 == AND) && (synpred63_FTS()))
                {
                    s = 86;
                }
                else if ((LA84_33 == AMP) && (synpred63_FTS()))
                {
                    s = 87;
                }
                else if ((LA84_33 == EOF) && (synpred63_FTS()))
                {
                    s = 88;
                }
                else if ((LA84_33 == RPAREN) && (synpred63_FTS()))
                {
                    s = 89;
                }
                else if ((LA84_33 == OR) && (synpred63_FTS()))
                {
                    s = 90;
                }
                else if ((LA84_33 == BAR) && (synpred63_FTS()))
                {
                    s = 91;
                }
                else if ((LA84_33 == EXCLAMATION) && (synpred63_FTS()))
                {
                    s = 92;
                }
                else if ((LA84_33 == AT) && (synpred63_FTS()))
                {
                    s = 93;
                }
                else if ((LA84_33 == FTSPHRASE) && (synpred63_FTS()))
                {
                    s = 94;
                }
                else if ((LA84_33 == LSQUARE) && (synpred63_FTS()))
                {
                    s = 95;
                }
                else if ((LA84_33 == LT) && (synpred63_FTS()))
                {
                    s = 96;
                }
                else if ((LA84_33 == COMMA || LA84_33 == DOT) && (synpred63_FTS()))
                {
                    s = 97;
                }
                else if ((LA84_33 == EQUALS) && (synpred63_FTS()))
                {
                    s = 98;
                }
                else if ((LA84_33 == LPAREN) && (synpred63_FTS()))
                {
                    s = 99;
                }
                else if ((LA84_33 == PERCENT) && (synpred63_FTS()))
                {
                    s = 100;
                }
                else if ((LA84_33 == PLUS) && (synpred63_FTS()))
                {
                    s = 101;
                }
                else if ((LA84_33 == MINUS) && (synpred63_FTS()))
                {
                    s = 102;
                }

                input.seek(index84_33);
                if (s >= 0)
                    return s;
                break;

            case 236:
                int LA84_106 = input.LA(1);

                int index84_106 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_106 == DOT))
                {
                    s = 171;
                }
                else if ((LA84_106 == COMMA))
                {
                    s = 104;
                }
                else if ((synpred62_FTS()))
                {
                    s = 105;
                }
                else if ((synpred64_FTS()))
                {
                    s = 70;
                }
                else if ((true))
                {
                    s = 27;
                }

                input.seek(index84_106);
                if (s >= 0)
                    return s;
                break;

            case 237:
                int LA84_456 = input.LA(1);

                int index84_456 = input.index();
                input.rewind();
                s = -1;
                if ((synpred49_FTS()))
                {
                    s = 209;
                }
                else if ((synpred51_FTS()))
                {
                    s = 400;
                }

                input.seek(index84_456);
                if (s >= 0)
                    return s;
                break;

            case 238:
                int LA84_329 = input.LA(1);

                int index84_329 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_329 == COMMA || LA84_329 == DOT))
                {
                    s = 402;
                }
                else if ((synpred53_FTS()))
                {
                    s = 211;
                }
                else if ((synpred55_FTS()))
                {
                    s = 291;
                }

                input.seek(index84_329);
                if (s >= 0)
                    return s;
                break;

            case 239:
                int LA84_297 = input.LA(1);

                int index84_297 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_297 == COMMA || LA84_297 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_297);
                if (s >= 0)
                    return s;
                break;

            case 240:
                int LA84_260 = input.LA(1);

                int index84_260 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_260 == ID))
                {
                    s = 301;
                }
                else if ((LA84_260 == FTSWORD))
                {
                    s = 302;
                }
                else if ((LA84_260 == FTSPRE))
                {
                    s = 303;
                }
                else if ((LA84_260 == FTSWILD))
                {
                    s = 304;
                }
                else if ((LA84_260 == NOT))
                {
                    s = 305;
                }
                else if ((LA84_260 == TO))
                {
                    s = 306;
                }
                else if ((LA84_260 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 307;
                }
                else if ((LA84_260 == FLOATING_POINT_LITERAL))
                {
                    s = 308;
                }
                else if ((LA84_260 == STAR))
                {
                    s = 309;
                }
                else if ((LA84_260 == QUESTION_MARK))
                {
                    s = 310;
                }
                else if ((LA84_260 == DATETIME))
                {
                    s = 311;
                }
                else if ((LA84_260 == URI))
                {
                    s = 312;
                }
                else if ((LA84_260 == TILDA) && (synpred56_FTS()))
                {
                    s = 240;
                }
                else if ((LA84_260 == CARAT) && (synpred56_FTS()))
                {
                    s = 241;
                }
                else if ((LA84_260 == AND) && (synpred56_FTS()))
                {
                    s = 242;
                }
                else if ((LA84_260 == AMP) && (synpred56_FTS()))
                {
                    s = 243;
                }
                else if ((LA84_260 == EOF) && (synpred56_FTS()))
                {
                    s = 244;
                }
                else if ((LA84_260 == RPAREN) && (synpred56_FTS()))
                {
                    s = 245;
                }
                else if ((LA84_260 == OR) && (synpred56_FTS()))
                {
                    s = 246;
                }
                else if ((LA84_260 == BAR) && (synpred56_FTS()))
                {
                    s = 247;
                }
                else if ((LA84_260 == EXCLAMATION) && (synpred56_FTS()))
                {
                    s = 248;
                }
                else if ((LA84_260 == AT) && (synpred56_FTS()))
                {
                    s = 249;
                }
                else if ((LA84_260 == FTSPHRASE) && (synpred56_FTS()))
                {
                    s = 250;
                }
                else if ((LA84_260 == LSQUARE) && (synpred56_FTS()))
                {
                    s = 251;
                }
                else if ((LA84_260 == LT) && (synpred56_FTS()))
                {
                    s = 252;
                }
                else if ((LA84_260 == COMMA || LA84_260 == DOT) && (synpred56_FTS()))
                {
                    s = 253;
                }
                else if ((LA84_260 == EQUALS) && (synpred56_FTS()))
                {
                    s = 254;
                }
                else if ((LA84_260 == LPAREN) && (synpred56_FTS()))
                {
                    s = 255;
                }
                else if ((LA84_260 == PERCENT) && (synpred56_FTS()))
                {
                    s = 256;
                }
                else if ((LA84_260 == PLUS) && (synpred56_FTS()))
                {
                    s = 257;
                }
                else if ((LA84_260 == MINUS) && (synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_260);
                if (s >= 0)
                    return s;
                break;

            case 241:
                int LA84_223 = input.LA(1);

                int index84_223 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_223 == COMMA || LA84_223 == DOT))
                {
                    s = 221;
                }
                else if ((synpred57_FTS()))
                {
                    s = 213;
                }
                else if ((synpred59_FTS()))
                {
                    s = 207;
                }

                input.seek(index84_223);
                if (s >= 0)
                    return s;
                break;

            case 242:
                int LA84_232 = input.LA(1);

                int index84_232 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_232 == COMMA || LA84_232 == DOT))
                {
                    s = 294;
                }
                else if ((synpred54_FTS()))
                {
                    s = 174;
                }
                else if ((synpred56_FTS()))
                {
                    s = 258;
                }

                input.seek(index84_232);
                if (s >= 0)
                    return s;
                break;

            case 243:
                int LA84_26 = input.LA(1);

                int index84_26 = input.index();
                input.rewind();
                s = -1;
                if ((LA84_26 == ID))
                {
                    s = 40;
                }
                else if ((LA84_26 == FTSWORD))
                {
                    s = 41;
                }
                else if ((LA84_26 == FTSPRE))
                {
                    s = 42;
                }
                else if ((LA84_26 == FTSWILD))
                {
                    s = 43;
                }
                else if ((LA84_26 == NOT))
                {
                    s = 44;
                }
                else if ((LA84_26 == TO))
                {
                    s = 45;
                }
                else if ((LA84_26 == DECIMAL_INTEGER_LITERAL))
                {
                    s = 46;
                }
                else if ((LA84_26 == FLOATING_POINT_LITERAL))
                {
                    s = 47;
                }
                else if ((LA84_26 == STAR))
                {
                    s = 48;
                }
                else if ((LA84_26 == QUESTION_MARK))
                {
                    s = 49;
                }
                else if ((LA84_26 == DATETIME))
                {
                    s = 50;
                }
                else if ((LA84_26 == URI))
                {
                    s = 51;
                }
                else if ((LA84_26 == TILDA) && (synpred64_FTS()))
                {
                    s = 52;
                }
                else if ((LA84_26 == CARAT) && (synpred64_FTS()))
                {
                    s = 53;
                }
                else if ((LA84_26 == AND) && (synpred64_FTS()))
                {
                    s = 54;
                }
                else if ((LA84_26 == AMP) && (synpred64_FTS()))
                {
                    s = 55;
                }
                else if ((LA84_26 == EOF) && (synpred64_FTS()))
                {
                    s = 56;
                }
                else if ((LA84_26 == RPAREN) && (synpred64_FTS()))
                {
                    s = 57;
                }
                else if ((LA84_26 == OR) && (synpred64_FTS()))
                {
                    s = 58;
                }
                else if ((LA84_26 == BAR) && (synpred64_FTS()))
                {
                    s = 59;
                }
                else if ((LA84_26 == EXCLAMATION) && (synpred64_FTS()))
                {
                    s = 60;
                }
                else if ((LA84_26 == AT) && (synpred64_FTS()))
                {
                    s = 61;
                }
                else if ((LA84_26 == FTSPHRASE) && (synpred64_FTS()))
                {
                    s = 62;
                }
                else if ((LA84_26 == LSQUARE) && (synpred64_FTS()))
                {
                    s = 63;
                }
                else if ((LA84_26 == LT) && (synpred64_FTS()))
                {
                    s = 64;
                }
                else if ((LA84_26 == COMMA || LA84_26 == DOT) && (synpred64_FTS()))
                {
                    s = 65;
                }
                else if ((LA84_26 == EQUALS) && (synpred64_FTS()))
                {
                    s = 66;
                }
                else if ((LA84_26 == LPAREN) && (synpred64_FTS()))
                {
                    s = 67;
                }
                else if ((LA84_26 == PERCENT) && (synpred64_FTS()))
                {
                    s = 68;
                }
                else if ((LA84_26 == PLUS) && (synpred64_FTS()))
                {
                    s = 69;
                }
                else if ((LA84_26 == MINUS) && (synpred64_FTS()))
                {
                    s = 70;
                }

                input.seek(index84_26);
                if (s >= 0)
                    return s;
                break;
            }
            if (state.backtracking > 0)
            {
                state.failed = true;
                return -1;
            }
            NoViableAltException nvae = new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    public static final BitSet FOLLOW_ftsDisjunction_in_ftsQuery578 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_ftsQuery580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cmisExplicitDisjunction_in_ftsDisjunction640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsExplicitDisjunction_in_ftsDisjunction654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsImplicitDisjunction_in_ftsDisjunction668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsImplicitConjunction_in_ftsExplicitDisjunction701 = new BitSet(new long[]{0x0000000000000082L, 0x0000000000020000L});
    public static final BitSet FOLLOW_or_in_ftsExplicitDisjunction704 = new BitSet(new long[]{0x803C80000920A8F0L, 0x0000016101164138L});
    public static final BitSet FOLLOW_ftsImplicitConjunction_in_ftsExplicitDisjunction706 = new BitSet(new long[]{0x0000000000000082L, 0x0000000000020000L});
    public static final BitSet FOLLOW_cmisConjunction_in_cmisExplicitDisjunction790 = new BitSet(new long[]{0x0000000000000082L, 0x0000000000020000L});
    public static final BitSet FOLLOW_or_in_cmisExplicitDisjunction793 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004100L});
    public static final BitSet FOLLOW_cmisConjunction_in_cmisExplicitDisjunction795 = new BitSet(new long[]{0x0000000000000082L, 0x0000000000020000L});
    public static final BitSet FOLLOW_or_in_ftsImplicitDisjunction880 = new BitSet(new long[]{0x803C80000920A8E0L, 0x0000016101164138L});
    public static final BitSet FOLLOW_ftsExplicitConjunction_in_ftsImplicitDisjunction883 = new BitSet(new long[]{0x803C80000920A8E2L, 0x0000016101164138L});
    public static final BitSet FOLLOW_ftsPrefixed_in_ftsExplicitConjunction970 = new BitSet(new long[]{0x0000000000000032L});
    public static final BitSet FOLLOW_and_in_ftsExplicitConjunction973 = new BitSet(new long[]{0x803C80000920A8E0L, 0x0000016101164138L});
    public static final BitSet FOLLOW_ftsPrefixed_in_ftsExplicitConjunction975 = new BitSet(new long[]{0x0000000000000032L});
    public static final BitSet FOLLOW_and_in_ftsImplicitConjunction1060 = new BitSet(new long[]{0x803C80000920A8E0L, 0x0000016101164138L});
    public static final BitSet FOLLOW_ftsPrefixed_in_ftsImplicitConjunction1063 = new BitSet(new long[]{0x803C80000920A8F2L, 0x0000016101164138L});
    public static final BitSet FOLLOW_cmisPrefixed_in_cmisConjunction1147 = new BitSet(new long[]{0x803C80000020A802L, 0x0000014101004100L});
    public static final BitSet FOLLOW_not_in_ftsPrefixed1239 = new BitSet(new long[]{0x803C80000120A860L, 0x0000016101064038L});
    public static final BitSet FOLLOW_ftsTest_in_ftsPrefixed1241 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsPrefixed1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsTest_in_ftsPrefixed1307 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsPrefixed1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_ftsPrefixed1373 = new BitSet(new long[]{0x803C80000120A860L, 0x0000016101064038L});
    public static final BitSet FOLLOW_ftsTest_in_ftsPrefixed1375 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsPrefixed1377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_ftsPrefixed1441 = new BitSet(new long[]{0x803C80000120A860L, 0x0000016101064038L});
    public static final BitSet FOLLOW_ftsTest_in_ftsPrefixed1443 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsPrefixed1445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_ftsPrefixed1509 = new BitSet(new long[]{0x803C80000120A860L, 0x0000016101064038L});
    public static final BitSet FOLLOW_ftsTest_in_ftsPrefixed1511 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsPrefixed1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cmisTest_in_cmisPrefixed1598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_cmisPrefixed1658 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_cmisTest_in_cmisPrefixed1660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupProximity_in_ftsTest1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsRange_in_ftsTest1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroup_in_ftsTest1908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsTermOrPhrase_in_ftsTest1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsExactTermOrPhrase_in_ftsTest1986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsTokenisedTermOrPhrase_in_ftsTest2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_ftsTest2047 = new BitSet(new long[]{0x803C80000920A8F0L, 0x0000016101164138L});
    public static final BitSet FOLLOW_ftsDisjunction_in_ftsTest2049 = new BitSet(new long[]{0x0000000000000000L, 0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_ftsTest2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_in_ftsTest2084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cmisTerm_in_cmisTest2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cmisPhrase_in_cmisTest2197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_template2278 = new BitSet(new long[]{0x8000000000000060L, 0x0000014000024000L});
    public static final BitSet FOLLOW_tempReference_in_template2280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_template2340 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_template2342 = new BitSet(new long[]{0x8000000000000060L, 0x0000014000024000L});
    public static final BitSet FOLLOW_tempReference_in_template2345 = new BitSet(new long[]{0x8000000000000860L, 0x0000014008024000L});
    public static final BitSet FOLLOW_COMMA_in_template2347 = new BitSet(new long[]{0x8000000000000060L, 0x0000014008024000L});
    public static final BitSet FOLLOW_RPAREN_in_template2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDA_in_fuzzy2434 = new BitSet(new long[]{0x0000800000008000L});
    public static final BitSet FOLLOW_number_in_fuzzy2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDA_in_slop2517 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_DECIMAL_INTEGER_LITERAL_in_slop2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARAT_in_boost2600 = new BitSet(new long[]{0x0000800000008000L});
    public static final BitSet FOLLOW_number_in_boost2602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_ftsTermOrPhrase2691 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsTermOrPhrase2693 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsTermOrPhrase2721 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsTermOrPhrase2729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsTermOrPhrase2796 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsTermOrPhrase2805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_ftsTermOrPhrase2874 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsTermOrPhrase2876 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsTermOrPhrase2904 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsTermOrPhrase2912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsTermOrPhrase2979 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsTermOrPhrase2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsTermOrPhrase3049 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsTermOrPhrase3057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsTermOrPhrase3107 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsTermOrPhrase3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_ftsExactTermOrPhrase3195 = new BitSet(new long[]{0x803C80000020A860L, 0x0000014101024000L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_ftsExactTermOrPhrase3223 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsExactTermOrPhrase3225 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsExactTermOrPhrase3253 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsExactTermOrPhrase3261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsExactTermOrPhrase3328 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsExactTermOrPhrase3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_ftsExactTermOrPhrase3406 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsExactTermOrPhrase3408 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsExactTermOrPhrase3436 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsExactTermOrPhrase3444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsExactTermOrPhrase3511 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsExactTermOrPhrase3520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsExactTermOrPhrase3581 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsExactTermOrPhrase3589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsExactTermOrPhrase3639 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsExactTermOrPhrase3648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDA_in_ftsTokenisedTermOrPhrase3729 = new BitSet(new long[]{0x803C80000020A860L, 0x0000014101024000L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_ftsTokenisedTermOrPhrase3757 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsTokenisedTermOrPhrase3759 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsTokenisedTermOrPhrase3787 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsTokenisedTermOrPhrase3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsTokenisedTermOrPhrase3862 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsTokenisedTermOrPhrase3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_ftsTokenisedTermOrPhrase3940 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsTokenisedTermOrPhrase3942 = new BitSet(new long[]{0x803C80000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsTokenisedTermOrPhrase3970 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsTokenisedTermOrPhrase3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsTokenisedTermOrPhrase4045 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsTokenisedTermOrPhrase4054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsTokenisedTermOrPhrase4115 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsTokenisedTermOrPhrase4123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsTokenisedTermOrPhrase4173 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsTokenisedTermOrPhrase4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_cmisTerm4255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPHRASE_in_cmisPhrase4309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReference_in_ftsRange4364 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsRange4366 = new BitSet(new long[]{0x803C80000000A000L, 0x0000010100000030L});
    public static final BitSet FOLLOW_ftsFieldGroupRange_in_ftsRange4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReference_in_ftsFieldGroup4426 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_ftsFieldGroup4428 = new BitSet(new long[]{0x0000000000000000L, 0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_ftsFieldGroup4430 = new BitSet(new long[]{0x803C80000920A8B0L, 0x0000016101124138L});
    public static final BitSet FOLLOW_ftsFieldGroupDisjunction_in_ftsFieldGroup4432 = new BitSet(new long[]{0x0000000000000000L, 0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_ftsFieldGroup4434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupExplicitDisjunction_in_ftsFieldGroupDisjunction4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupImplicitDisjunction_in_ftsFieldGroupDisjunction4533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupImplicitConjunction_in_ftsFieldGroupExplicitDisjunction4566 = new BitSet(new long[]{0x0000000000000082L, 0x0000000000020000L});
    public static final BitSet FOLLOW_or_in_ftsFieldGroupExplicitDisjunction4569 = new BitSet(new long[]{0x803C80000920A8B0L, 0x0000016101104138L});
    public static final BitSet FOLLOW_ftsFieldGroupImplicitConjunction_in_ftsFieldGroupExplicitDisjunction4571 = new BitSet(new long[]{0x0000000000000082L, 0x0000000000020000L});
    public static final BitSet FOLLOW_or_in_ftsFieldGroupImplicitDisjunction4656 = new BitSet(new long[]{0x803C80000920A880L, 0x0000016101104138L});
    public static final BitSet FOLLOW_ftsFieldGroupExplicitConjunction_in_ftsFieldGroupImplicitDisjunction4659 = new BitSet(new long[]{0x803C80000920A882L, 0x0000016101124138L});
    public static final BitSet FOLLOW_ftsFieldGroupPrefixed_in_ftsFieldGroupExplicitConjunction4746 = new BitSet(new long[]{0x0000000000000032L});
    public static final BitSet FOLLOW_and_in_ftsFieldGroupExplicitConjunction4749 = new BitSet(new long[]{0x803C80000920A880L, 0x0000016101104138L});
    public static final BitSet FOLLOW_ftsFieldGroupPrefixed_in_ftsFieldGroupExplicitConjunction4751 = new BitSet(new long[]{0x0000000000000032L});
    public static final BitSet FOLLOW_and_in_ftsFieldGroupImplicitConjunction4836 = new BitSet(new long[]{0x803C80000920A880L, 0x0000016101104138L});
    public static final BitSet FOLLOW_ftsFieldGroupPrefixed_in_ftsFieldGroupImplicitConjunction4839 = new BitSet(new long[]{0x803C80000920A8B2L, 0x0000016101104138L});
    public static final BitSet FOLLOW_not_in_ftsFieldGroupPrefixed4929 = new BitSet(new long[]{0x803C80000120A800L, 0x0000016101004038L});
    public static final BitSet FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed4931 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsFieldGroupPrefixed4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed4997 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsFieldGroupPrefixed4999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_ftsFieldGroupPrefixed5063 = new BitSet(new long[]{0x803C80000120A800L, 0x0000016101004038L});
    public static final BitSet FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed5065 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsFieldGroupPrefixed5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_ftsFieldGroupPrefixed5131 = new BitSet(new long[]{0x803C80000120A800L, 0x0000016101004038L});
    public static final BitSet FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed5133 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsFieldGroupPrefixed5135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_ftsFieldGroupPrefixed5199 = new BitSet(new long[]{0x803C80000120A800L, 0x0000016101004038L});
    public static final BitSet FOLLOW_ftsFieldGroupTest_in_ftsFieldGroupPrefixed5201 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_boost_in_ftsFieldGroupPrefixed5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupProximity_in_ftsFieldGroupTest5294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupTerm_in_ftsFieldGroupTest5360 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsFieldGroupTest5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupExactTerm_in_ftsFieldGroupTest5441 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsFieldGroupTest5451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupPhrase_in_ftsFieldGroupTest5522 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsFieldGroupTest5532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupExactPhrase_in_ftsFieldGroupTest5603 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsFieldGroupTest5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupTokenisedPhrase_in_ftsFieldGroupTest5684 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_slop_in_ftsFieldGroupTest5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupSynonym_in_ftsFieldGroupTest5765 = new BitSet(new long[]{0x0000000000000002L, 0x0000002000000000L});
    public static final BitSet FOLLOW_fuzzy_in_ftsFieldGroupTest5775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupRange_in_ftsFieldGroupTest5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_ftsFieldGroupTest5906 = new BitSet(new long[]{0x803C80000920A8B0L, 0x0000016101124138L});
    public static final BitSet FOLLOW_ftsFieldGroupDisjunction_in_ftsFieldGroupTest5908 = new BitSet(new long[]{0x0000000000000000L, 0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_ftsFieldGroupTest5910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWord_in_ftsFieldGroupTerm5963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_ftsFieldGroupExactTerm5996 = new BitSet(new long[]{0x803880000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsFieldGroupTerm_in_ftsFieldGroupExactTerm5998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsFieldGroupPhrase6051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_ftsFieldGroupExactPhrase6092 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_ftsFieldGroupExactPhrase_in_ftsFieldGroupExactPhrase6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDA_in_ftsFieldGroupTokenisedPhrase6155 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_ftsFieldGroupExactPhrase_in_ftsFieldGroupTokenisedPhrase6157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDA_in_ftsFieldGroupSynonym6210 = new BitSet(new long[]{0x803880000020A800L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsFieldGroupTerm_in_ftsFieldGroupSynonym6212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupProximityTerm_in_ftsFieldGroupProximity6265 = new BitSet(new long[]{0x0000000000000000L, 0x0000000100000000L});
    public static final BitSet FOLLOW_proximityGroup_in_ftsFieldGroupProximity6275 = new BitSet(new long[]{0x803880000000A000L, 0x0000014100004000L});
    public static final BitSet FOLLOW_ftsFieldGroupProximityTerm_in_ftsFieldGroupProximity6277 = new BitSet(new long[]{0x0000000000000002L, 0x0000000100000000L});
    public static final BitSet FOLLOW_ID_in_ftsFieldGroupProximityTerm6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSWORD_in_ftsFieldGroupProximityTerm6353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPRE_in_ftsFieldGroupProximityTerm6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSWILD_in_ftsFieldGroupProximityTerm6377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_ftsFieldGroupProximityTerm6389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_ftsFieldGroupProximityTerm6401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_INTEGER_LITERAL_in_ftsFieldGroupProximityTerm6413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATING_POINT_LITERAL_in_ftsFieldGroupProximityTerm6425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_ftsFieldGroupProximityTerm6437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_ftsFieldGroupProximityTerm6449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_ftsFieldGroupProximityTerm6461 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_identifier_in_ftsFieldGroupProximityTerm6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_proximityGroup6496 = new BitSet(new long[]{0x0000000000000002L, 0x0000000000000008L});
    public static final BitSet FOLLOW_LPAREN_in_proximityGroup6499 = new BitSet(new long[]{0x0000000000008000L, 0x0000000008000000L});
    public static final BitSet FOLLOW_DECIMAL_INTEGER_LITERAL_in_proximityGroup6501 = new BitSet(new long[]{0x0000000000000000L, 0x0000000008000000L});
    public static final BitSet FOLLOW_RPAREN_in_proximityGroup6504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6588 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_DOTDOT_in_ftsFieldGroupRange6590 = new BitSet(new long[]{0x803C80000000A000L, 0x0000010100000000L});
    public static final BitSet FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_left_in_ftsFieldGroupRange6630 = new BitSet(new long[]{0x803C80000000A000L, 0x0000010100000000L});
    public static final BitSet FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6632 = new BitSet(new long[]{0x0000000000000000L, 0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_ftsFieldGroupRange6634 = new BitSet(new long[]{0x803C80000000A000L, 0x0000010100000000L});
    public static final BitSet FOLLOW_ftsRangeWord_in_ftsFieldGroupRange6636 = new BitSet(new long[]{0x2000000000000000L, 0x0000000010000000L});
    public static final BitSet FOLLOW_range_right_in_ftsFieldGroupRange6638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_range_left6697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_range_left6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSQUARE_in_range_right6782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_range_right6814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_fieldReference6867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_fieldReference6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_fieldReferenceWithoutPrefix6903 = new BitSet(new long[]{0x8000000000000020L, 0x0000014000024000L});
    public static final BitSet FOLLOW_uri_in_fieldReferenceWithoutPrefix6914 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_identifier_in_fieldReferenceWithoutPrefix6925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_fieldReferenceWithPrefix7009 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_prefix_in_fieldReferenceWithPrefix7020 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_identifier_in_fieldReferenceWithPrefix7022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_tempReference7105 = new BitSet(new long[]{0x8000000000000020L, 0x0000014000024000L});
    public static final BitSet FOLLOW_prefix_in_tempReference7134 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_uri_in_tempReference7154 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_identifier_in_tempReference7175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_prefix7262 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_prefix7264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_uri7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_identifier7447 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_identifier7449 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ID_in_identifier7453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_identifier7502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_identifier7569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_identifier7607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_identifier7645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_identifier7684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord7802 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7808 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7810 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7816 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7818 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7824 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7826 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7832 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7834 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7900 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7902 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7908 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7910 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7916 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7918 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7924 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord7926 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord7932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord7999 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8005 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8007 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8013 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8015 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8021 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8023 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8029 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8095 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8097 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8103 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8105 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8111 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8113 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8119 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8186 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8192 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8194 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8200 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8202 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8208 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8210 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8270 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8272 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8278 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8280 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8286 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8288 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8352 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8358 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8360 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8366 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8368 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8374 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8432 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8434 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8440 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8442 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8448 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8506 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8512 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8514 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8520 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8522 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8574 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8576 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8582 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8584 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8641 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8647 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8649 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8655 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8706 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8708 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8714 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8765 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8771 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8773 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8817 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8819 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8867 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8873 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8915 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_ftsWord8917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ftsWord8933 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_ftsWord8952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ftsWordBase8997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSWORD_in_ftsWordBase9009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPRE_in_ftsWordBase9021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSWILD_in_ftsWordBase9034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_ftsWordBase9047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_ftsWordBase9059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_INTEGER_LITERAL_in_ftsWordBase9071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATING_POINT_LITERAL_in_ftsWordBase9083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_ftsWordBase9095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_ftsWordBase9107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_ftsWordBase9119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_ftsWordBase9131 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_identifier_in_ftsWordBase9133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ftsRangeWord9213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSWORD_in_ftsRangeWord9225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPRE_in_ftsRangeWord9237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSWILD_in_ftsRangeWord9249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FTSPHRASE_in_ftsRangeWord9261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_INTEGER_LITERAL_in_ftsRangeWord9273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATING_POINT_LITERAL_in_ftsRangeWord9285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATETIME_in_ftsRangeWord9297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_ftsRangeWord9309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URI_in_ftsRangeWord9321 = new BitSet(new long[]{0x8000000000000020L, 0x0000004000024000L});
    public static final BitSet FOLLOW_identifier_in_ftsRangeWord9323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_or9358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BAR_in_or9370 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_BAR_in_or9372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_and9405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_and9417 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_AMP_in_and9419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_in_synpred1_FTS1234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupProximity_in_synpred2_FTS1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsRange_in_synpred3_FTS1824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroup_in_synpred4_FTS1903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsTermOrPhrase_in_synpred5_FTS1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsExactTermOrPhrase_in_synpred6_FTS1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsTokenisedTermOrPhrase_in_synpred7_FTS2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_synpred8_FTS2684 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred8_FTS2686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred9_FTS2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred10_FTS2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_synpred11_FTS2867 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred11_FTS2869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred12_FTS2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred13_FTS2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred14_FTS3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred15_FTS3111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_synpred16_FTS3216 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred16_FTS3218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred17_FTS3257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred18_FTS3332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_synpred19_FTS3399 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred19_FTS3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred20_FTS3440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred21_FTS3515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred22_FTS3585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred23_FTS3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithPrefix_in_synpred24_FTS3750 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred24_FTS3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred25_FTS3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred26_FTS3866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldReferenceWithoutPrefix_in_synpred27_FTS3933 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_in_synpred27_FTS3935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred28_FTS3974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred29_FTS4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred30_FTS4119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred31_FTS4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_in_synpred32_FTS4924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupProximity_in_synpred33_FTS5289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupTerm_in_synpred34_FTS5355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred35_FTS5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupExactTerm_in_synpred36_FTS5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred37_FTS5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupPhrase_in_synpred38_FTS5517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred39_FTS5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupExactPhrase_in_synpred40_FTS5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred41_FTS5608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupTokenisedPhrase_in_synpred42_FTS5679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_slop_in_synpred43_FTS5689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupSynonym_in_synpred44_FTS5760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fuzzy_in_synpred45_FTS5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsFieldGroupRange_in_synpred46_FTS5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proximityGroup_in_synpred47_FTS6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred48_FTS7427 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_synpred48_FTS7429 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ID_in_synpred48_FTS7431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred49_FTS7747 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred49_FTS7753 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred49_FTS7755 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred49_FTS7761 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred49_FTS7763 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred49_FTS7769 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred49_FTS7771 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred49_FTS7777 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred49_FTS7779 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred49_FTS7785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred50_FTS7853 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred50_FTS7855 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred50_FTS7861 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred50_FTS7863 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred50_FTS7869 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred50_FTS7871 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred50_FTS7877 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_synpred50_FTS7879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred50_FTS7881 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred50_FTS7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred51_FTS7946 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred51_FTS7952 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred51_FTS7954 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred51_FTS7960 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred51_FTS7962 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred51_FTS7968 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred51_FTS7970 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred51_FTS7976 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred51_FTS7978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred52_FTS8048 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred52_FTS8050 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred52_FTS8056 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred52_FTS8058 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred52_FTS8064 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred52_FTS8066 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred52_FTS8072 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred52_FTS8074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred53_FTS8139 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred53_FTS8145 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred53_FTS8147 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred53_FTS8153 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred53_FTS8155 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred53_FTS8161 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred53_FTS8163 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred53_FTS8169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred54_FTS8229 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred54_FTS8231 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred54_FTS8237 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred54_FTS8239 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred54_FTS8245 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred54_FTS8247 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred54_FTS8253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred55_FTS8307 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred55_FTS8313 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred55_FTS8315 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred55_FTS8321 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred55_FTS8323 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred55_FTS8329 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred55_FTS8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred56_FTS8393 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred56_FTS8395 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred56_FTS8401 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred56_FTS8403 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred56_FTS8409 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred56_FTS8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred57_FTS8467 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred57_FTS8473 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred57_FTS8475 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred57_FTS8481 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred57_FTS8483 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred57_FTS8489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred58_FTS8541 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred58_FTS8543 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred58_FTS8549 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred58_FTS8551 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred58_FTS8557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred59_FTS8604 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred59_FTS8610 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred59_FTS8612 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred59_FTS8618 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred59_FTS8620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred60_FTS8674 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred60_FTS8676 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred60_FTS8682 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred60_FTS8684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred61_FTS8734 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred61_FTS8740 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred61_FTS8742 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred61_FTS8748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred62_FTS8792 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred62_FTS8794 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred62_FTS8800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred63_FTS8838 = new BitSet(new long[]{0x803880000000A000L, 0x0000014101004000L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred63_FTS8844 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred63_FTS8846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ftsWordBase_in_synpred64_FTS8892 = new BitSet(new long[]{0x0000000000200800L});
    public static final BitSet FOLLOW_set_in_synpred64_FTS8894 = new BitSet(new long[]{0x0000000000000002L});
}
