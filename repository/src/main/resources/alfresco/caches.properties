#
# Cache configuration
#
# To configure a cache, specify a series of properties where the property names begin with the
# cache name as specified in the Spring cache definition. For example, if a cache has the name
# "cache.myCache" then the properties should all start with "cache.myCache".
# 
# For example:
#       cache.myCache.maxItems=20000
#       cache.myCache.timeToLiveSeconds=0
#
# The cache properties are used for both clustered and non-clustered configurations. For information
# relating to Hazelcast properties, please see the Hazelcast documentation:
##
# The following properties are supported by both clustered and non-clustered (e.g. cluster.type=local) caches:
#
# maxItems              The maximum size a cache may reach. Use zero to set to Integer.MAX_VALUE.
# eviction-policy       When set to "NONE", the cache will not have a bounded capacity (i.e. maxItems does not apply).
#                       Any other value will cause maxItems to be enabled: use LRU or LFU if using clustered caches
#                       so that the value is compatible in both modes (required during startup). Please note, that
#                       the actual value (e.g. LRU) is of no consequence for the non-clustered caches: eviction is
#                       performed as for any Google Guava CacheBuilder created Cache.
# timeToLiveSeconds     Cache items will expire once this time has passed after creation.
# maxIdleSeconds        Cache items will expire when not accessed for this period.
#
# tx.maxItems           Not strictly speaking a supported property (as the TransactionalCache is a separate entity),
#                       but where a TransactionalCache bean has been defined, the convention has been to use
#                       {cacheName}.tx.maxItems to specify its capacity.
#
# The following properties are available for fully-distributed caches and are not supported
# by the other cache types:
#
# cluster.type          This property will determine what type of cache is created when clustering is available.
#                       Acceptable values are:
#                           fully-distributed    A Hazelcast IMap backed distributed cache will be used.
#                                                The cache values may be stored on any member of the cluster, hence
#                                                the term fully-distributed.
#                           local                Always use a non-clustered cache - the cache values will not
#                                                reflect updates made to the equivalent cache on another cluster member.
#                           invalidating         A local cache is used, but when an update or a removal is issued to the
#                                                cache then an invalidation message is broadcast to all members of the
#                                                cluster and those members will remove the value from their cache.
#                                                Useful where frequent reads are causing performance problems (due to
#                                                remote reads) or where values are non-Serializable.
# backup-count          How many cluster members should hold a backup of the key/value pair?
# readBackupData        Reads occur from backups when one is available locally (fully-distributed caches only).
# eviction-percentage   (deprecated, does nothing) Dictates what percentage of cache entries are shed when the capacity is reached.
# merge-policy          How Hazelcast recovers from split brain syndrome, e.g. com.hazelcast.map.merge.PutIfAbsentMapMergePolicy


# Default setting for transactional caches allows disabling/enabling
# of all cache statistics in one setting (provided individual settings
# haven't been made).
caches.tx.statsEnabled=true

cache.propertyValueCache.tx.maxItems=1000
cache.propertyValueCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.propertyValueCache.maxItems=10000
cache.propertyValueCache.timeToLiveSeconds=300
cache.propertyValueCache.maxIdleSeconds=0
cache.propertyValueCache.cluster.type=invalidating
cache.propertyValueCache.backup-count=1
cache.propertyValueCache.eviction-policy=LRU
cache.propertyValueCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.propertyValueCache.readBackupData=false

cache.propertyClassCache.tx.maxItems=1000
cache.propertyClassCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.propertyClassCache.maxItems=10000
cache.propertyClassCache.timeToLiveSeconds=0
cache.propertyClassCache.maxIdleSeconds=0
cache.propertyClassCache.cluster.type=invalidating
cache.propertyClassCache.backup-count=1
cache.propertyClassCache.eviction-policy=LRU
cache.propertyClassCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.propertyClassCache.readBackupData=false

cache.contentDataSharedCache.tx.maxItems=65000
cache.contentDataSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.contentDataSharedCache.maxItems=130000
cache.contentDataSharedCache.timeToLiveSeconds=0
cache.contentDataSharedCache.maxIdleSeconds=0
cache.contentDataSharedCache.cluster.type=fully-distributed
cache.contentDataSharedCache.backup-count=1
cache.contentDataSharedCache.eviction-policy=LRU
cache.contentDataSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.contentDataSharedCache.readBackupData=false

cache.contentUrlSharedCache.tx.maxItems=65000
cache.contentUrlSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.contentUrlSharedCache.maxItems=130000
cache.contentUrlSharedCache.timeToLiveSeconds=0
cache.contentUrlSharedCache.maxIdleSeconds=0
cache.contentUrlSharedCache.cluster.type=fully-distributed
cache.contentUrlSharedCache.backup-count=1
cache.contentUrlSharedCache.eviction-policy=LRU
cache.contentUrlSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.contentUrlSharedCache.readBackupData=false

cache.contentUrlMasterKeySharedCache.tx.maxItems=50
cache.contentUrlMasterKeySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.contentUrlMasterKeySharedCache.maxItems=0
cache.contentUrlMasterKeySharedCache.timeToLiveSeconds=0
cache.contentUrlMasterKeySharedCache.maxIdleSeconds=0
cache.contentUrlMasterKeySharedCache.cluster.type=fully-distributed
cache.contentUrlMasterKeySharedCache.backup-count=1
cache.contentUrlMasterKeySharedCache.eviction-policy=NONE
cache.contentUrlMasterKeySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.contentUrlMasterKeySharedCache.nearCache.maxSize=50
cache.contentUrlMasterKeySharedCache.nearCache.maxIdleSeconds=0
cache.contentUrlMasterKeySharedCache.nearCache.timeToLiveSeconds=0
cache.contentUrlMasterKeySharedCache.readBackupData=false

cache.contentUrlEncryptingMasterKeySharedCache.tx.maxItems=50
cache.contentUrlEncryptingMasterKeySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.contentUrlEncryptingMasterKeySharedCache.maxItems=0
cache.contentUrlEncryptingMasterKeySharedCache.timeToLiveSeconds=0
cache.contentUrlEncryptingMasterKeySharedCache.maxIdleSeconds=0
cache.contentUrlEncryptingMasterKeySharedCache.cluster.type=fully-distributed
cache.contentUrlEncryptingMasterKeySharedCache.backup-count=1
cache.contentUrlEncryptingMasterKeySharedCache.eviction-policy=NONE
cache.contentUrlEncryptingMasterKeySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.contentUrlEncryptingMasterKeySharedCache.nearCache.maxSize=50
cache.contentUrlEncryptingMasterKeySharedCache.nearCache.maxIdleSeconds=0
cache.contentUrlEncryptingMasterKeySharedCache.nearCache.timeToLiveSeconds=0
cache.contentUrlEncryptingMasterKeySharedCache.readBackupData=false

cache.immutableEntitySharedCache.tx.maxItems=10000
cache.immutableEntitySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.immutableEntitySharedCache.maxItems=50000
cache.immutableEntitySharedCache.timeToLiveSeconds=0
cache.immutableEntitySharedCache.maxIdleSeconds=0
cache.immutableEntitySharedCache.cluster.type=invalidating
cache.immutableEntitySharedCache.backup-count=1
cache.immutableEntitySharedCache.eviction-policy=LRU
cache.immutableEntitySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.immutableEntitySharedCache.readBackupData=false

cache.node.rootNodesSharedCache.tx.maxItems=1000
cache.node.rootNodesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.node.rootNodesSharedCache.maxItems=1000
cache.node.rootNodesSharedCache.timeToLiveSeconds=0
cache.node.rootNodesSharedCache.maxIdleSeconds=0
cache.node.rootNodesSharedCache.cluster.type=invalidating
cache.node.rootNodesSharedCache.backup-count=1
cache.node.rootNodesSharedCache.eviction-policy=LRU
cache.node.rootNodesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.rootNodesSharedCache.readBackupData=false

cache.node.allRootNodesSharedCache.tx.maxItems=500
cache.node.allRootNodesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.node.allRootNodesSharedCache.maxItems=1000
cache.node.allRootNodesSharedCache.timeToLiveSeconds=0
cache.node.allRootNodesSharedCache.maxIdleSeconds=0
cache.node.allRootNodesSharedCache.cluster.type=invalidating
cache.node.allRootNodesSharedCache.backup-count=1
cache.node.allRootNodesSharedCache.eviction-policy=LRU
cache.node.allRootNodesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.allRootNodesSharedCache.readBackupData=false

cache.node.nodesSharedCache.tx.maxItems=125000
cache.node.nodesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.node.nodesSharedCache.maxItems=250000
cache.node.nodesSharedCache.timeToLiveSeconds=300
cache.node.nodesSharedCache.maxIdleSeconds=0
cache.node.nodesSharedCache.cluster.type=invalidating
cache.node.nodesSharedCache.backup-count=1
cache.node.nodesSharedCache.eviction-policy=LRU
cache.node.nodesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.nodesSharedCache.readBackupData=false

cache.node.aspectsSharedCache.tx.maxItems=65000
cache.node.aspectsSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.node.aspectsSharedCache.maxItems=130000
cache.node.aspectsSharedCache.timeToLiveSeconds=0
cache.node.aspectsSharedCache.maxIdleSeconds=0
cache.node.aspectsSharedCache.cluster.type=local
cache.node.aspectsSharedCache.backup-count=1
cache.node.aspectsSharedCache.eviction-policy=LRU
cache.node.aspectsSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.aspectsSharedCache.readBackupData=false

cache.node.propertiesSharedCache.tx.maxItems=65000
cache.node.propertiesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.node.propertiesSharedCache.maxItems=130000
cache.node.propertiesSharedCache.timeToLiveSeconds=0
cache.node.propertiesSharedCache.maxIdleSeconds=0
cache.node.propertiesSharedCache.cluster.type=local
cache.node.propertiesSharedCache.backup-count=1
cache.node.propertiesSharedCache.eviction-policy=LRU
cache.node.propertiesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.propertiesSharedCache.readBackupData=false

cache.node.parentAssocsSharedCache.maxItems=130000
cache.node.parentAssocsSharedCache.timeToLiveSeconds=0
cache.node.parentAssocsSharedCache.maxIdleSeconds=0
cache.node.parentAssocsSharedCache.cluster.type=fully-distributed
cache.node.parentAssocsSharedCache.backup-count=1
cache.node.parentAssocsSharedCache.eviction-policy=LRU
cache.node.parentAssocsSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.parentAssocsSharedCache.readBackupData=false

cache.node.childByNameSharedCache.tx.maxItems=65000
cache.node.childByNameSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.node.childByNameSharedCache.maxItems=130000
cache.node.childByNameSharedCache.timeToLiveSeconds=0
cache.node.childByNameSharedCache.maxIdleSeconds=0
cache.node.childByNameSharedCache.cluster.type=local
cache.node.childByNameSharedCache.backup-count=1
cache.node.childByNameSharedCache.eviction-policy=LRU
cache.node.childByNameSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.node.childByNameSharedCache.readBackupData=false

cache.userToAuthoritySharedCache.tx.maxItems=100
cache.userToAuthoritySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.userToAuthoritySharedCache.maxItems=5000
cache.userToAuthoritySharedCache.timeToLiveSeconds=0
cache.userToAuthoritySharedCache.maxIdleSeconds=0
cache.userToAuthoritySharedCache.cluster.type=fully-distributed
cache.userToAuthoritySharedCache.backup-count=1
cache.userToAuthoritySharedCache.eviction-policy=LRU
cache.userToAuthoritySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.userToAuthoritySharedCache.readBackupData=false

cache.authenticationSharedCache.tx.maxItems=1000
cache.authenticationSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.authenticationSharedCache.maxItems=5000
cache.authenticationSharedCache.timeToLiveSeconds=0
cache.authenticationSharedCache.maxIdleSeconds=0
cache.authenticationSharedCache.cluster.type=fully-distributed
cache.authenticationSharedCache.backup-count=1
cache.authenticationSharedCache.eviction-policy=LRU
cache.authenticationSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.authenticationSharedCache.readBackupData=false

cache.authoritySharedCache.tx.maxItems=10000
cache.authoritySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.authoritySharedCache.maxItems=10000
cache.authoritySharedCache.timeToLiveSeconds=0
cache.authoritySharedCache.maxIdleSeconds=0
cache.authoritySharedCache.cluster.type=invalidating
cache.authoritySharedCache.backup-count=1
cache.authoritySharedCache.eviction-policy=LRU
cache.authoritySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.authoritySharedCache.readBackupData=false

cache.authorityToChildAuthoritySharedCache.tx.maxItems=40000
cache.authorityToChildAuthoritySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.authorityToChildAuthoritySharedCache.maxItems=40000
cache.authorityToChildAuthoritySharedCache.timeToLiveSeconds=0
cache.authorityToChildAuthoritySharedCache.maxIdleSeconds=0
cache.authorityToChildAuthoritySharedCache.cluster.type=invalidating
cache.authorityToChildAuthoritySharedCache.backup-count=1
cache.authorityToChildAuthoritySharedCache.eviction-policy=LRU
cache.authorityToChildAuthoritySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.authorityToChildAuthoritySharedCache.readBackupData=false

cache.zoneToAuthoritySharedCache.tx.maxItems=500
cache.zoneToAuthoritySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.zoneToAuthoritySharedCache.maxItems=500
cache.zoneToAuthoritySharedCache.timeToLiveSeconds=0
cache.zoneToAuthoritySharedCache.maxIdleSeconds=0
cache.zoneToAuthoritySharedCache.cluster.type=invalidating
cache.zoneToAuthoritySharedCache.backup-count=1
cache.zoneToAuthoritySharedCache.eviction-policy=LRU
cache.zoneToAuthoritySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.zoneToAuthoritySharedCache.readBackupData=false

cache.permissionsAccessSharedCache.tx.maxItems=10000
cache.permissionsAccessSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.permissionsAccessSharedCache.maxItems=50000
cache.permissionsAccessSharedCache.timeToLiveSeconds=0
cache.permissionsAccessSharedCache.maxIdleSeconds=0
cache.permissionsAccessSharedCache.cluster.type=fully-distributed
cache.permissionsAccessSharedCache.backup-count=1
cache.permissionsAccessSharedCache.eviction-policy=LRU
cache.permissionsAccessSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.permissionsAccessSharedCache.readBackupData=false

cache.readersSharedCache.tx.maxItems=10000
cache.readersSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.readersSharedCache.maxItems=10000
cache.readersSharedCache.timeToLiveSeconds=0
cache.readersSharedCache.maxIdleSeconds=0
cache.readersSharedCache.cluster.type=fully-distributed
cache.readersSharedCache.backup-count=1
cache.readersSharedCache.eviction-policy=LRU
cache.readersSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.readersSharedCache.readBackupData=false

cache.readersDeniedSharedCache.tx.maxItems=10000
cache.readersDeniedSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.readersDeniedSharedCache.maxItems=10000
cache.readersDeniedSharedCache.timeToLiveSeconds=0
cache.readersDeniedSharedCache.maxIdleSeconds=0
cache.readersDeniedSharedCache.cluster.type=fully-distributed
cache.readersDeniedSharedCache.backup-count=1
cache.readersDeniedSharedCache.eviction-policy=LRU
cache.readersDeniedSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.readersDeniedSharedCache.readBackupData=false

cache.nodeOwnerSharedCache.tx.maxItems=40000
cache.nodeOwnerSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.nodeOwnerSharedCache.maxItems=40000
cache.nodeOwnerSharedCache.timeToLiveSeconds=0
cache.nodeOwnerSharedCache.maxIdleSeconds=0
cache.nodeOwnerSharedCache.cluster.type=fully-distributed
cache.nodeOwnerSharedCache.backup-count=1
cache.nodeOwnerSharedCache.eviction-policy=LRU
cache.nodeOwnerSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.nodeOwnerSharedCache.readBackupData=false

cache.nodeRulesSharedCache.tx.maxItems=2000
cache.nodeRulesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}

cache.personSharedCache.tx.maxItems=1000
cache.personSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.personSharedCache.maxItems=1000
cache.personSharedCache.timeToLiveSeconds=0
cache.personSharedCache.maxIdleSeconds=0
cache.personSharedCache.cluster.type=fully-distributed
cache.personSharedCache.backup-count=1
cache.personSharedCache.eviction-policy=LRU
cache.personSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.personSharedCache.readBackupData=false

cache.ticketsCache.maxItems=1000
cache.ticketsCache.timeToLiveSeconds=0
cache.ticketsCache.maxIdleSeconds=0
cache.ticketsCache.cluster.type=fully-distributed
cache.ticketsCache.backup-count=1
cache.ticketsCache.eviction-policy=LRU
cache.ticketsCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.ticketsCache.readBackupData=false

cache.usernameToTicketIdCache.maxItems=1000
cache.usernameToTicketIdCache.timeToLiveSeconds=0
cache.usernameToTicketIdCache.maxIdleSeconds=0
cache.usernameToTicketIdCache.cluster.type=fully-distributed
cache.usernameToTicketIdCache.backup-count=1
cache.usernameToTicketIdCache.eviction-policy=LRU
cache.usernameToTicketIdCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.usernameToTicketIdCache.readBackupData=false

cache.authorityEntitySharedCache.tx.maxItems=50000
cache.authorityEntitySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}

cache.webServicesQuerySessionSharedCache.tx.maxItems=50
cache.webServicesQuerySessionSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.webServicesQuerySessionSharedCache.maxItems=1000
cache.webServicesQuerySessionSharedCache.timeToLiveSeconds=0
cache.webServicesQuerySessionSharedCache.maxIdleSeconds=0
cache.webServicesQuerySessionSharedCache.cluster.type=fully-distributed
cache.webServicesQuerySessionSharedCache.backup-count=1
cache.webServicesQuerySessionSharedCache.eviction-policy=LRU
cache.webServicesQuerySessionSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.webServicesQuerySessionSharedCache.readBackupData=false

cache.aclSharedCache.tx.maxItems=20000
cache.aclSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.aclSharedCache.maxItems=50000
cache.aclSharedCache.timeToLiveSeconds=0
cache.aclSharedCache.maxIdleSeconds=0
cache.aclSharedCache.cluster.type=fully-distributed
cache.aclSharedCache.backup-count=1
cache.aclSharedCache.eviction-policy=LRU
cache.aclSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.aclSharedCache.readBackupData=false

cache.aclEntitySharedCache.tx.maxItems=50000
cache.aclEntitySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.aclEntitySharedCache.maxItems=50000
cache.aclEntitySharedCache.timeToLiveSeconds=0
cache.aclEntitySharedCache.maxIdleSeconds=0
cache.aclEntitySharedCache.cluster.type=fully-distributed
cache.aclEntitySharedCache.backup-count=1
cache.aclEntitySharedCache.eviction-policy=LRU
cache.aclEntitySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.aclEntitySharedCache.readBackupData=false

cache.resourceBundleBaseNamesSharedCache.tx.maxItems=1000
cache.resourceBundleBaseNamesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.resourceBundleBaseNamesSharedCache.maxItems=1000
cache.resourceBundleBaseNamesSharedCache.timeToLiveSeconds=0
cache.resourceBundleBaseNamesSharedCache.maxIdleSeconds=0
cache.resourceBundleBaseNamesSharedCache.cluster.type=invalidating
cache.resourceBundleBaseNamesSharedCache.backup-count=1
cache.resourceBundleBaseNamesSharedCache.eviction-policy=LRU
cache.resourceBundleBaseNamesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.resourceBundleBaseNamesSharedCache.readBackupData=false

cache.loadedResourceBundlesSharedCache.tx.maxItems=1000
cache.loadedResourceBundlesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.loadedResourceBundlesSharedCache.maxItems=1000
cache.loadedResourceBundlesSharedCache.timeToLiveSeconds=0
cache.loadedResourceBundlesSharedCache.maxIdleSeconds=0
cache.loadedResourceBundlesSharedCache.cluster.type=invalidating
cache.loadedResourceBundlesSharedCache.backup-count=1
cache.loadedResourceBundlesSharedCache.eviction-policy=LRU
cache.loadedResourceBundlesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.loadedResourceBundlesSharedCache.readBackupData=false

cache.messagesSharedCache.tx.maxItems=1000
cache.messagesSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.messagesSharedCache.maxItems=1000
cache.messagesSharedCache.timeToLiveSeconds=0
cache.messagesSharedCache.maxIdleSeconds=0
cache.messagesSharedCache.cluster.type=invalidating
cache.messagesSharedCache.backup-count=1
cache.messagesSharedCache.eviction-policy=LRU
cache.messagesSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.messagesSharedCache.readBackupData=false

cache.webScriptsRegistrySharedCache.maxItems=1000
cache.webScriptsRegistrySharedCache.timeToLiveSeconds=0
cache.webScriptsRegistrySharedCache.maxIdleSeconds=0
cache.webScriptsRegistrySharedCache.cluster.type=invalidating
cache.webScriptsRegistrySharedCache.backup-count=1
cache.webScriptsRegistrySharedCache.eviction-policy=LRU
cache.webScriptsRegistrySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.webScriptsRegistrySharedCache.readBackupData=false

cache.routingContentStoreSharedCache.tx.maxItems=10000
cache.routingContentStoreSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.routingContentStoreSharedCache.maxItems=10000
cache.routingContentStoreSharedCache.timeToLiveSeconds=0
cache.routingContentStoreSharedCache.maxIdleSeconds=0
cache.routingContentStoreSharedCache.cluster.type=local
cache.routingContentStoreSharedCache.backup-count=1
cache.routingContentStoreSharedCache.eviction-policy=LRU
cache.routingContentStoreSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.routingContentStoreSharedCache.readBackupData=false

cache.executingActionsCache.maxItems=1000
cache.executingActionsCache.timeToLiveSeconds=0
cache.executingActionsCache.maxIdleSeconds=0
cache.executingActionsCache.cluster.type=fully-distributed
cache.executingActionsCache.backup-count=1
cache.executingActionsCache.eviction-policy=LRU
cache.executingActionsCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.executingActionsCache.readBackupData=false

cache.tagscopeSummarySharedCache.tx.maxItems=1000
cache.tagscopeSummarySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.tagscopeSummarySharedCache.maxItems=1000
cache.tagscopeSummarySharedCache.timeToLiveSeconds=0
cache.tagscopeSummarySharedCache.maxIdleSeconds=0
cache.tagscopeSummarySharedCache.cluster.type=fully-distributed
cache.tagscopeSummarySharedCache.backup-count=1
cache.tagscopeSummarySharedCache.eviction-policy=LRU
cache.tagscopeSummarySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.tagscopeSummarySharedCache.readBackupData=false

cache.imapMessageSharedCache.tx.maxItems=1000
cache.imapMessageSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.imapMessageSharedCache.maxItems=2000
cache.imapMessageSharedCache.timeToLiveSeconds=0
cache.imapMessageSharedCache.maxIdleSeconds=0
cache.imapMessageSharedCache.cluster.type=invalidating
cache.imapMessageSharedCache.backup-count=1
cache.imapMessageSharedCache.eviction-policy=LRU
cache.imapMessageSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.imapMessageSharedCache.readBackupData=false

cache.tenantEntitySharedCache.tx.maxItems=1000
cache.tenantEntitySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.tenantEntitySharedCache.maxItems=1000
cache.tenantEntitySharedCache.timeToLiveSeconds=0
cache.tenantEntitySharedCache.maxIdleSeconds=0
cache.tenantEntitySharedCache.cluster.type=fully-distributed
cache.tenantEntitySharedCache.backup-count=1
cache.tenantEntitySharedCache.eviction-policy=LRU
cache.tenantEntitySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.tenantEntitySharedCache.readBackupData=false

cache.immutableSingletonSharedCache.tx.maxItems=12000
cache.immutableSingletonSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.immutableSingletonSharedCache.maxItems=12000
cache.immutableSingletonSharedCache.timeToLiveSeconds=0
cache.immutableSingletonSharedCache.maxIdleSeconds=0
cache.immutableSingletonSharedCache.cluster.type=invalidating
cache.immutableSingletonSharedCache.backup-count=1
cache.immutableSingletonSharedCache.eviction-policy=LRU
cache.immutableSingletonSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.immutableSingletonSharedCache.readBackupData=false

cache.remoteAlfrescoTicketService.ticketsCache.maxItems=1000
cache.remoteAlfrescoTicketService.ticketsCache.timeToLiveSeconds=0
cache.remoteAlfrescoTicketService.ticketsCache.maxIdleSeconds=0
cache.remoteAlfrescoTicketService.ticketsCache.cluster.type=fully-distributed
cache.remoteAlfrescoTicketService.ticketsCache.backup-count=1
cache.remoteAlfrescoTicketService.ticketsCache.eviction-policy=LRU
cache.remoteAlfrescoTicketService.ticketsCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.remoteAlfrescoTicketService.ticketsCache.readBackupData=false

cache.contentDiskDriver.fileInfoCache.maxItems=1000
cache.contentDiskDriver.fileInfoCache.timeToLiveSeconds=0
cache.contentDiskDriver.fileInfoCache.maxIdleSeconds=0
cache.contentDiskDriver.fileInfoCache.cluster.type=local
cache.contentDiskDriver.fileInfoCache.backup-count=1
cache.contentDiskDriver.fileInfoCache.eviction-policy=LRU
cache.contentDiskDriver.fileInfoCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.contentDiskDriver.fileInfoCache.readBackupData=false

cache.globalConfigSharedCache.maxItems=1000
cache.globalConfigSharedCache.timeToLiveSeconds=0
cache.globalConfigSharedCache.maxIdleSeconds=0
cache.globalConfigSharedCache.cluster.type=invalidating
cache.globalConfigSharedCache.backup-count=1
cache.globalConfigSharedCache.eviction-policy=LRU
cache.globalConfigSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.globalConfigSharedCache.readBackupData=false

cache.permissionEntitySharedCache.tx.maxItems=50000
cache.permissionEntitySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}

cache.propertyUniqueContextSharedCache.tx.maxItems=10000
cache.propertyUniqueContextSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.propertyUniqueContextSharedCache.maxItems=10000
cache.propertyUniqueContextSharedCache.timeToLiveSeconds=0
cache.propertyUniqueContextSharedCache.maxIdleSeconds=0
cache.propertyUniqueContextSharedCache.cluster.type=invalidating
cache.propertyUniqueContextSharedCache.backup-count=1
cache.propertyUniqueContextSharedCache.eviction-policy=LRU
cache.propertyUniqueContextSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.propertyUniqueContextSharedCache.readBackupData=false

cache.siteNodeRefSharedCache.tx.maxItems=5000
cache.siteNodeRefSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.siteNodeRefSharedCache.maxItems=5000
cache.siteNodeRefSharedCache.timeToLiveSeconds=0
cache.siteNodeRefSharedCache.maxIdleSeconds=0
cache.siteNodeRefSharedCache.cluster.type=fully-distributed
cache.siteNodeRefSharedCache.backup-count=1
cache.siteNodeRefSharedCache.eviction-policy=LRU
cache.siteNodeRefSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.siteNodeRefSharedCache.readBackupData=false

cache.samlTrustEngineSharedCache.tx.maxItems=5000
cache.samlTrustEngineSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.samlTrustEngineSharedCache.maxItems=5000
cache.samlTrustEngineSharedCache.timeToLiveSeconds=0
cache.samlTrustEngineSharedCache.maxIdleSeconds=0
cache.samlTrustEngineSharedCache.cluster.type=invalidating
cache.samlTrustEngineSharedCache.backup-count=1
cache.samlTrustEngineSharedCache.eviction-policy=LRU
cache.samlTrustEngineSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.samlTrustEngineSharedCache.readBackupData=false

# Caching content store, see caching-content-store-context.xml.sample*
cache.cachingContentStoreCache.maxItems=5000
cache.cachingContentStoreCache.timeToLiveSeconds=86400
cache.cachingContentStoreCache.maxIdleSeconds=14400
cache.cachingContentStoreCache.cluster.type=local
cache.cachingContentStoreCache.backup-count=1
cache.cachingContentStoreCache.eviction-policy=LRU
cache.cachingContentStoreCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.cachingContentStoreCache.readBackupData=false

cache.publicapi.webScriptsRegistryCache.maxItems=1000
cache.publicapi.webScriptsRegistryCache.timeToLiveSeconds=0
cache.publicapi.webScriptsRegistryCache.maxIdleSeconds=0
cache.publicapi.webScriptsRegistryCache.cluster.type=invalidating
cache.publicapi.webScriptsRegistryCache.backup-count=1
cache.publicapi.webScriptsRegistryCache.eviction-policy=LRU
cache.publicapi.webScriptsRegistryCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.publicapi.webScriptsRegistryCache.readBackupData=false

cache.cloudHybridSyncEventCounterCache.maxItems=150000
cache.cloudHybridSyncEventCounterCache.timeToLiveSeconds=0
cache.cloudHybridSyncEventCounterCache.maxIdleSeconds=0
cache.cloudHybridSyncEventCounterCache.cluster.type=fully-distributed
cache.cloudHybridSyncEventCounterCache.backup-count=1
cache.cloudHybridSyncEventCounterCache.eviction-policy=LRU
cache.cloudHybridSyncEventCounterCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy

cache.cloudHybridSyncDenyCache.maxItems=150000
cache.cloudHybridSyncDenyCache.timeToLiveSeconds=3600
cache.cloudHybridSyncDenyCache.maxIdleSeconds=0
cache.cloudHybridSyncDenyCache.cluster.type=fully-distributed
cache.cloudHybridSyncDenyCache.backup-count=1
cache.cloudHybridSyncDenyCache.eviction-policy=LRU
cache.cloudHybridSyncDenyCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy

#
# RM Caveat cache
#
cache.caveatConfigCache.tx.maxItems=100
cache.caveatConfigCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.caveatConfigCache.maxItems=5000
cache.caveatConfigCache.timeToLiveSeconds=0
cache.caveatConfigCache.maxIdleSeconds=0
cache.caveatConfigCache.cluster.type=invalidating
cache.caveatConfigCache.backup-count=1
cache.caveatConfigCache.eviction-policy=LRU
cache.caveatConfigCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.caveatConfigCache.readBackupData=false

#
#Solr Facets cache
#
cache.solrFacetNodeRefSharedCache.tx.maxItems=5000
cache.solrFacetNodeRefSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.solrFacetNodeRefSharedCache.maxItems=5000
cache.solrFacetNodeRefSharedCache.timeToLiveSeconds=0
cache.solrFacetNodeRefSharedCache.maxIdleSeconds=0
cache.solrFacetNodeRefSharedCache.cluster.type=fully-distributed
cache.solrFacetNodeRefSharedCache.backup-count=1
cache.solrFacetNodeRefSharedCache.eviction-policy=LRU
cache.solrFacetNodeRefSharedCache.merge-policy=com.hazelcast.map.merge.LatestUpdateMapMergePolicy
cache.solrFacetNodeRefSharedCache.readBackupData=false

cache.openCMISRegistrySharedCache.tx.maxItems=5
cache.openCMISRegistrySharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.openCMISRegistrySharedCache.maxItems=500
cache.openCMISRegistrySharedCache.timeToLiveSeconds=1800
cache.openCMISRegistrySharedCache.maxIdleSeconds=0
cache.openCMISRegistrySharedCache.cluster.type=invalidating
cache.openCMISRegistrySharedCache.backup-count=1
cache.openCMISRegistrySharedCache.eviction-policy=LRU
cache.openCMISRegistrySharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.openCMISRegistrySharedCache.readBackupData=false

#
#Shard states cache
#
cache.shardStateSharedCache.tx.maxItems=100
cache.shardStateSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.shardStateSharedCache.maxItems=500
cache.shardStateSharedCache.timeToLiveSeconds=1800
cache.shardStateSharedCache.maxIdleSeconds=0
cache.shardStateSharedCache.cluster.type=invalidating
cache.shardStateSharedCache.backup-count=1
cache.shardStateSharedCache.eviction-policy=LRU
cache.shardStateSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.shardStateSharedCache.readBackupData=false

#
#Shard instance to guid cache
#
cache.shardToGuidSharedCache.tx.maxItems=100
cache.shardToGuidSharedCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.shardToGuidSharedCache.maxItems=500
cache.shardToGuidSharedCache.timeToLiveSeconds=0
cache.shardToGuidSharedCache.maxIdleSeconds=0
cache.shardToGuidSharedCache.cluster.type=invalidating
cache.shardToGuidSharedCache.backup-count=1
cache.shardToGuidSharedCache.eviction-policy=LRU
cache.shardToGuidSharedCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.shardToGuidSharedCache.readBackupData=false

#
# Authorization cache
#
cache.authorizationCache.tx.maxItems=1000
cache.authorizationCache.tx.statsEnabled=${caches.tx.statsEnabled}
cache.authorizationCache.maxItems=10000
cache.authorizationCache.timeToLiveSeconds=300
cache.authorizationCache.maxIdleSeconds=0
cache.authorizationCache.cluster.type=fully-distributed
cache.authorizationCache.backup-count=1
cache.authorizationCache.eviction-policy=LRU
cache.authorizationCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.authorizationCache.readBackupData=false

#
# Protected users cache
#
cache.protectedUsersCache.maxItems=1000
cache.protectedUsersCache.timeToLiveSeconds=0
cache.protectedUsersCache.maxIdleSeconds=0
cache.protectedUsersCache.cluster.type=local
cache.protectedUsersCache.backup-count=1
cache.protectedUsersCache.eviction-policy=LRU
cache.protectedUsersCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.protectedUsersCache.readBackupData=false

#
# Heartbeat cluster usage cache
#
cache.hbClusterUsageCache.maxItems=10
cache.hbClusterUsageCache.timeToLiveSeconds=0
cache.hbClusterUsageCache.maxIdleSeconds=0
cache.hbClusterUsageCache.cluster.type=fully-distributed
cache.hbClusterUsageCache.backup-count=1
cache.hbClusterUsageCache.eviction-policy=NONE
cache.hbClusterUsageCache.merge-policy=com.hazelcast.map.merge.PutIfAbsentMapMergePolicy
cache.hbClusterUsageCache.readBackupData=false


#
# Query accelerator cluster cache
#
cache.queryAcceleratorCache.maxItems=1000
cache.queryAcceleratorCache.timeToLiveSeconds=0
cache.queryAcceleratorCache.maxIdleSeconds=0
cache.queryAcceleratorCache.cluster.type=fully-distributed
cache.queryAcceleratorCache.backup-count=1
cache.queryAcceleratorCache.eviction-policy=NONE
cache.queryAcceleratorCache.merge-policy=com.hazelcast.map.merge.LatestUpdateMapMergePolicy
cache.queryAcceleratorCache.readBackupData=false
