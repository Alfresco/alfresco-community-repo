import:
  - source: travis-env-vars.yml
os: linux
dist: xenial
language: java
jdk:
  - openjdk11

services:
  - docker

branches:
  only:
    - /release\/V3.\d+.*/
    - /feature-3.\d+\/.*/
    - /merge-3.\d+\/.*/
    - /hotfix-3.\d+\/.*/

cache:
  directories:
    - $HOME/.m2

# the cache can grow constantly
before_cache:
  - rm -rf $HOME/.m2/repository/org/alfresco/alfresco-rm*

before_install:
  - "cp .travis.settings.xml $HOME/.m2/settings.xml"
install: skip

stages:
  - name: Build AGS
  - name: Tests
    if: commit_message !~ /\[skip tests\]/
  - name: Security Scans
  - name: Release
    if: fork = false AND (branch = master OR branch =~ /release\/.*/) AND type != pull_request AND commit_message =~ /\[(community|enterprise) release .*\]/
  - name: Publish
    if: fork = false AND (branch = master OR branch =~ /release\/.*/) AND type != pull_request AND commit_message =~ /\[publish\]/

jobs:
  include:
    - name: "Build AGS Community"
      stage: Build AGS
      before_script: source scripts/setUpMavenPhase.sh
      script:
        - travis_retry travis_wait 100 mvn -B -q clean ${MAVEN_PHASE} -P${BUILD_PROFILE} -Dimage.tag=${IMAGE_TAG} -Dskip.integrationtests=false -Dcommunity -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: "Build AGS Enterprise"
      stage: Build AGS
      install:
        - travis_retry travis_wait 60 mvn -B -q clean install $MVN_SKIP -f rm-community/pom.xml -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      before_script: source scripts/setUpMavenPhase.sh
      script:
        - travis_retry travis_wait 60 mvn -B -q ${MAVEN_PHASE} -P${BUILD_PROFILE} -Dimage.tag=${IMAGE_TAG} -Dskip.integrationtests=false -f rm-enterprise/pom.xml -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: "Build AGS Benchmark"
      stage: Build AGS
      install:
        - travis_retry travis_wait 60 mvn -B -q clean install $MVN_SKIP -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      before_script: source scripts/setUpMavenPhase.sh
      script:
        - travis_retry travis_wait 35 mvn -B -q ${MAVEN_PHASE} -Dskip.integrationtests=false -f rm-benchmark/pom.xml -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: "Community Integrations Tests on MySQL"
      stage: Tests
      script:
        - echo "Community Integrations Tests on MySQL"
    - name: "Enterprise Integrations Tests on MySQL"
      stage: Tests
      script:
        - echo "Enterprise Integrations Tests on MySQL"

    - name: "Community Rest API Tests"
      stage: Tests
      install:
        - |
          echo ${TRAVIS_COMMIT_MESSAGE}
          if [[ ${TRAVIS_COMMIT_MESSAGE} =~ '"[tests on community]"' ]]; then
            travis_retry travis_wait 90 mvn -B -q install $MVN_SKIP -PbuildDockerImage -pl :alfresco-rm-community-repo -am
          else
            travis_retry travis_wait 90 mvn -B -q install $MVN_SKIP -PbuildDockerImage -pl :alfresco-rm-enterprise-repo -am
          fi
        - travis_retry travis_wait 30 mvn -B -U -q clean install ${MVN_SKIP} -pl :alfresco-rm-automation-community-rest-api -am
      before_script:
        - |
          if [[ ${TRAVIS_COMMIT_MESSAGE} =~ '"[tests on community]"' ]]; then
            bash scripts/startAlfresco.sh $COMMUNITY_REPO_PATH
          else
            bash scripts/startAlfresco.sh $ENTERPRISE_REPO_PATH
          fi
        - bash scripts/waitForAlfrescoToStart.sh
      script: mvn -B test -pl :alfresco-rm-automation-community-rest-api -Dskip.automationtests=false
      after_failure: docker ps -a | grep '_alfresco_1' | awk '{print $1}' | xargs docker logs | tail -5000

    - name: "Enterprise Rest API Tests"
      stage: Tests
      if: commit_message !~ /\[tests on community\]/
      install:
        - travis_retry travis_wait 90 mvn -B -q install $MVN_SKIP -PbuildDockerImage -pl :alfresco-rm-enterprise-repo -am
        - travis_retry travis_wait 30 mvn -B -U -q clean install ${MVN_SKIP} -pl :alfresco-rm-automation-enterprise-rest-api -am
      before_script:
        - bash scripts/startAlfresco.sh $ENTERPRISE_REPO_PATH
        - bash scripts/waitForAlfrescoToStart.sh
      script:
        - mvn -B test -pl :alfresco-rm-automation-enterprise-rest-api -Dskip.automationtests=false
      after_failure: docker ps -a | grep '_alfresco_1' | awk '{print $1}' | xargs docker logs | tail -5000

    - &community_shared_UI_configuration
      name: "Community Smoke UI Tests for Records"
      stage: Tests
      addons:
        firefox: "43.0.1"
        artifacts:
          paths:
            - ./rm-automation/rm-automation-ui/target/surefire-reports
            - ./rm-automation/rm-automation-ui/target/reports
            - ./rm-automation/rm-automation-ui/target/screenshots
          target_paths: $TRAVIS_BUILD_NUMBER
      before_install:
        - |
          if [[ ${TRAVIS_COMMIT_MESSAGE} =~ '"[tests on community]"' ]]; then
            travis_retry travis_wait 90 mvn -B -q install $MVN_SKIP -PbuildDockerImage -pl :alfresco-rm-community-repo,:alfresco-rm-community-share -am
          else
            travis_retry travis_wait 90 mvn -B -q install $MVN_SKIP -PbuildDockerImage -pl :alfresco-rm-enterprise-repo,:alfresco-rm-enterprise-share -am
          fi
        - travis_retry travis_wait 30 mvn -B -U -q clean install ${MVN_SKIP} -pl :alfresco-rm-automation-ui -am
      install:
        - |
          if [[ ${TRAVIS_COMMIT_MESSAGE} =~ '"[tests on community]"' ]]; then
            bash scripts/startAlfresco.sh $COMMUNITY_SHARE_PATH
          else
            bash scripts/startAlfresco.sh $ENTERPRISE_SHARE_PATH
          fi
        - bash scripts/waitForAlfrescoToStart.sh
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=communitySmokeRecords.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *community_shared_UI_configuration
      name: "Community Smoke UI Tests for actions in RM site"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=communitySmokeRMSite.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *community_shared_UI_configuration
      name: "Community Level 2 UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=communityLevel2Tests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - &enterprise_shared_UI_configuration
      name: "Enterprise Level 2 UI Tests"
      stage: Tests
      if: commit_message !~ /\[tests on community\]/
      addons:
        firefox: "43.0.1"
        artifacts:
          paths:
            - ./rm-automation/rm-automation-ui/target/surefire-reports
            - ./rm-automation/rm-automation-ui/target/reports
            - ./rm-automation/rm-automation-ui/target/screenshots
          target_paths: $TRAVIS_BUILD_NUMBER
      before_install:
        - travis_retry travis_wait 90 mvn -B -q install $MVN_SKIP -PbuildDockerImage -pl :alfresco-rm-enterprise-repo,:alfresco-rm-enterprise-share -am
        - travis_retry travis_wait 30 mvn -B -U -q clean install ${MVN_SKIP} -pl :alfresco-rm-automation-ui -am
      install:
        - bash scripts/startAlfresco.sh $ENTERPRISE_SHARE_PATH
        - bash scripts/waitForAlfrescoToStart.sh
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseLevel2Tests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *enterprise_shared_UI_configuration
      name: "Enterprise Classification Level 2 UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseLevel2ClassificationTests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *enterprise_shared_UI_configuration
      name: "Enterprise Records Classification UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseRecordsClassificationTests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *enterprise_shared_UI_configuration
      name: "Enterprise Folders Classification UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseFoldersClassificationTests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *enterprise_shared_UI_configuration
      name: "Enterprise Documents Classification UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseDocumentsClassificationTests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *enterprise_shared_UI_configuration
      name: "Enterprise Security Marks UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseSecurityMarksTests.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - <<: *enterprise_shared_UI_configuration
      name: "Enterprise Console, Guides and Configuration UI Tests"
      script:
        - travis_wait 90 xvfb-run --server-args="-screen 0 1920x1080x24" mvn -B test -pl :alfresco-rm-automation-ui -Dskip.automationtests=false -DsuiteXmlFile=enterpriseConsoleGuidesAndConfiguration.xml -Dshare.url=${SHARE_URL} -Dalfresco.url=${ALFRESCO_URL} ${WEBDRIVER_ARGUMENTS}

    - name: "Source Clear Scan (SCA)"
      stage: Security Scans
      script:
       - echo "Source Clear Scan (SCA)"
    - name: "Static Analysis (SAST)"
      stage: Security Scans
      script:
       - echo "Static Analysis (SAST)"

    - name: "Community Release and Publish to S3 Staging Bucket"
      stage: Release
      if: commit_message =~ /\[community release .*\]/
      before_script:
        - source scripts/set-release-variables.sh
        - bash scripts/check-existing-tags.sh "alfresco/alfresco-governance-share-community"
      script:
        - bash scripts/release.sh "community"
      before_deploy:
        - bash scripts/zip-artifacts-staging.sh "community"
        - bash scripts/pushDockerDigestTag.sh -i quay.io/alfresco/alfresco-governance-repository-community -i quay.io/alfresco/alfresco-governance-share-community -r quay.io -t ${RELEASE_VERSION}
      deploy:
        - provider: s3
          access_key_id: ${STAGING_AWS_ACCESS_KEY}
          secret_access_key: ${STAGING_AWS_SECRET_KEY}
          region: "eu-west-1"
          bucket: "alfresco-artefacts-staging"
          upload_dir: "community/RM/${RELEASE_VERSION}"
          skip_cleanup: true
          acl: private
          local_dir: artifacts_dir
          on:
            all_branches: true
      after_deploy:
        - echo "Finished release and deployed to https://s3.console.aws.amazon.com/s3/buckets/alfresco-artefacts-staging/community/RM/${RELEASE_VERSION}"

    - name: "Enterprise Release and Publish to S3 Staging Bucket"
      stage: Release
      if: commit_message =~ /\[enterprise release .*\]/
      before_script:
        - source scripts/set-release-variables.sh
        - bash scripts/check-existing-tags.sh "alfresco/alfresco-governance-share-enterprise"
      script:
        - bash scripts/release.sh "enterprise"
      before_deploy:
        - bash scripts/zip-artifacts-staging.sh "enterprise"
        - bash scripts/pushDockerDigestTag.sh -i quay.io/alfresco/alfresco-governance-repository-enterprise -i quay.io/alfresco/alfresco-governance-share-enterprise -r quay.io -t ${RELEASE_VERSION}
      deploy:
        - provider: s3
          access_key_id: ${STAGING_AWS_ACCESS_KEY}
          secret_access_key: ${STAGING_AWS_SECRET_KEY}
          region: "eu-west-1"
          bucket: "alfresco-artefacts-staging"
          upload_dir: "enterprise/RM/${RELEASE_VERSION}"
          skip_cleanup: true
          acl: private
          local_dir: artifacts_dir
          on:
            all_branches: true
      after_deploy:
        - echo "Finished release and deployed to https://s3.console.aws.amazon.com/s3/buckets/alfresco-artefacts-staging/enterprise/RM/${RELEASE_VERSION}"

    - name: "Community Publish to S3 Release Bucket"
      stage: Publish
      if: commit_message =~ /\[community release .*\]/ AND commit_message =~ /\[publish\]/
      before_script: source scripts/set-release-variables.sh
      script: skip
      before_deploy: bash scripts/zip-artifacts-release.sh "community"
      deploy:
        - provider: s3
          access_key_id: ${RELEASE_AWS_ACCESS_KEY}
          secret_access_key: $RELEASE_AWS_ACCESS_SECRET}
          region: "eu-west-1"
          bucket: "eu.dl.alfresco.com"
          upload_dir: "release/community/RM/${RELEASE_VERSION}"
          skip_cleanup: true
          acl: private
          local_dir: artifacts_dir
          on:
            all_branches: true
      after_deploy:
        - echo "Finished release and deployed to https://s3.console.aws.amazon.com/s3/buckets/eu.dl.alfresco.com/release/community/RM/${RELEASE_VERSION}"

    - name: "Enterprise Publish to S3 Release Bucket"
      stage: Publish
      if: commit_message =~ /\[enterprise release .*\]/ AND commit_message =~ /\[publish\]/
      before_script: source scripts/set-release-variables.sh
      script: skip
      before_deploy: bash scripts/zip-artifacts-release.sh "enterprise"
      deploy:
        - provider: s3
          access_key_id: ${RELEASE_AWS_ACCESS_KEY}
          secret_access_key: ${RELEASE_AWS_ACCESS_SECRET}
          region: "eu-west-1"
          bucket: "eu.dl.alfresco.com"
          upload_dir: "release/enterprise/RM/${RELEASE_VERSION}"
          skip_cleanup: true
          acl: private
          local_dir: artifacts_dir
          on:
            all_branches: true
      after_deploy:
        - echo "Finished release and deployed to https://s3.console.aws.amazon.com/s3/buckets/eu.dl.alfresco.com/release/enterprise/RM/${RELEASE_VERSION}"
